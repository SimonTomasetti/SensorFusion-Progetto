
SensorFusion_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de78  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dac  0810e118  0810e118  0000f118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810eec4  0810eec4  0000fec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810eecc  0810eecc  0000fecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810eed0  0810eed0  0000fed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f8  10000000  0810eed4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008ac  100001f8  0810f0cc  000101f8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  10000aa4  0810f0cc  00010aa4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c793  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036fc  00000000  00000000  0002c9bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001808  00000000  00000000  000300b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012c7  00000000  00000000  000318c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c9fb  00000000  00000000  00032b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f3b0  00000000  00000000  0006f582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018a78a  00000000  00000000  0008e932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002190bc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007d20  00000000  00000000  00219100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  00220e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001f8 	.word	0x100001f8
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810e100 	.word	0x0810e100

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001fc 	.word	0x100001fc
 81002dc:	0810e100 	.word	0x0810e100

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a0 	b.w	81010f0 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	@ (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	460c      	mov	r4, r1
 8100e3c:	2b00      	cmp	r3, #0
 8100e3e:	d14e      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e40:	4694      	mov	ip, r2
 8100e42:	458c      	cmp	ip, r1
 8100e44:	4686      	mov	lr, r0
 8100e46:	fab2 f282 	clz	r2, r2
 8100e4a:	d962      	bls.n	8100f12 <__udivmoddi4+0xde>
 8100e4c:	b14a      	cbz	r2, 8100e62 <__udivmoddi4+0x2e>
 8100e4e:	f1c2 0320 	rsb	r3, r2, #32
 8100e52:	4091      	lsls	r1, r2
 8100e54:	fa20 f303 	lsr.w	r3, r0, r3
 8100e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5c:	4319      	orrs	r1, r3
 8100e5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8100e62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e66:	fa1f f68c 	uxth.w	r6, ip
 8100e6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8100e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100e72:	fb07 1114 	mls	r1, r7, r4, r1
 8100e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e7a:	fb04 f106 	mul.w	r1, r4, r6
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f104 30ff 	add.w	r0, r4, #4294967295
 8100e8a:	f080 8112 	bcs.w	81010b2 <__udivmoddi4+0x27e>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 810f 	bls.w	81010b2 <__udivmoddi4+0x27e>
 8100e94:	3c02      	subs	r4, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a59      	subs	r1, r3, r1
 8100e9a:	fa1f f38e 	uxth.w	r3, lr
 8100e9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8100ea2:	fb07 1110 	mls	r1, r7, r0, r1
 8100ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100eaa:	fb00 f606 	mul.w	r6, r0, r6
 8100eae:	429e      	cmp	r6, r3
 8100eb0:	d90a      	bls.n	8100ec8 <__udivmoddi4+0x94>
 8100eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8100eb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8100eba:	f080 80fc 	bcs.w	81010b6 <__udivmoddi4+0x282>
 8100ebe:	429e      	cmp	r6, r3
 8100ec0:	f240 80f9 	bls.w	81010b6 <__udivmoddi4+0x282>
 8100ec4:	4463      	add	r3, ip
 8100ec6:	3802      	subs	r0, #2
 8100ec8:	1b9b      	subs	r3, r3, r6
 8100eca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100ece:	2100      	movs	r1, #0
 8100ed0:	b11d      	cbz	r5, 8100eda <__udivmoddi4+0xa6>
 8100ed2:	40d3      	lsrs	r3, r2
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	e9c5 3200 	strd	r3, r2, [r5]
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d905      	bls.n	8100eee <__udivmoddi4+0xba>
 8100ee2:	b10d      	cbz	r5, 8100ee8 <__udivmoddi4+0xb4>
 8100ee4:	e9c5 0100 	strd	r0, r1, [r5]
 8100ee8:	2100      	movs	r1, #0
 8100eea:	4608      	mov	r0, r1
 8100eec:	e7f5      	b.n	8100eda <__udivmoddi4+0xa6>
 8100eee:	fab3 f183 	clz	r1, r3
 8100ef2:	2900      	cmp	r1, #0
 8100ef4:	d146      	bne.n	8100f84 <__udivmoddi4+0x150>
 8100ef6:	42a3      	cmp	r3, r4
 8100ef8:	d302      	bcc.n	8100f00 <__udivmoddi4+0xcc>
 8100efa:	4290      	cmp	r0, r2
 8100efc:	f0c0 80f0 	bcc.w	81010e0 <__udivmoddi4+0x2ac>
 8100f00:	1a86      	subs	r6, r0, r2
 8100f02:	eb64 0303 	sbc.w	r3, r4, r3
 8100f06:	2001      	movs	r0, #1
 8100f08:	2d00      	cmp	r5, #0
 8100f0a:	d0e6      	beq.n	8100eda <__udivmoddi4+0xa6>
 8100f0c:	e9c5 6300 	strd	r6, r3, [r5]
 8100f10:	e7e3      	b.n	8100eda <__udivmoddi4+0xa6>
 8100f12:	2a00      	cmp	r2, #0
 8100f14:	f040 8090 	bne.w	8101038 <__udivmoddi4+0x204>
 8100f18:	eba1 040c 	sub.w	r4, r1, ip
 8100f1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f20:	fa1f f78c 	uxth.w	r7, ip
 8100f24:	2101      	movs	r1, #1
 8100f26:	fbb4 f6f8 	udiv	r6, r4, r8
 8100f2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100f2e:	fb08 4416 	mls	r4, r8, r6, r4
 8100f32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f36:	fb07 f006 	mul.w	r0, r7, r6
 8100f3a:	4298      	cmp	r0, r3
 8100f3c:	d908      	bls.n	8100f50 <__udivmoddi4+0x11c>
 8100f3e:	eb1c 0303 	adds.w	r3, ip, r3
 8100f42:	f106 34ff 	add.w	r4, r6, #4294967295
 8100f46:	d202      	bcs.n	8100f4e <__udivmoddi4+0x11a>
 8100f48:	4298      	cmp	r0, r3
 8100f4a:	f200 80cd 	bhi.w	81010e8 <__udivmoddi4+0x2b4>
 8100f4e:	4626      	mov	r6, r4
 8100f50:	1a1c      	subs	r4, r3, r0
 8100f52:	fa1f f38e 	uxth.w	r3, lr
 8100f56:	fbb4 f0f8 	udiv	r0, r4, r8
 8100f5a:	fb08 4410 	mls	r4, r8, r0, r4
 8100f5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f62:	fb00 f707 	mul.w	r7, r0, r7
 8100f66:	429f      	cmp	r7, r3
 8100f68:	d908      	bls.n	8100f7c <__udivmoddi4+0x148>
 8100f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8100f72:	d202      	bcs.n	8100f7a <__udivmoddi4+0x146>
 8100f74:	429f      	cmp	r7, r3
 8100f76:	f200 80b0 	bhi.w	81010da <__udivmoddi4+0x2a6>
 8100f7a:	4620      	mov	r0, r4
 8100f7c:	1bdb      	subs	r3, r3, r7
 8100f7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100f82:	e7a5      	b.n	8100ed0 <__udivmoddi4+0x9c>
 8100f84:	f1c1 0620 	rsb	r6, r1, #32
 8100f88:	408b      	lsls	r3, r1
 8100f8a:	fa22 f706 	lsr.w	r7, r2, r6
 8100f8e:	431f      	orrs	r7, r3
 8100f90:	fa20 fc06 	lsr.w	ip, r0, r6
 8100f94:	fa04 f301 	lsl.w	r3, r4, r1
 8100f98:	ea43 030c 	orr.w	r3, r3, ip
 8100f9c:	40f4      	lsrs	r4, r6
 8100f9e:	fa00 f801 	lsl.w	r8, r0, r1
 8100fa2:	0c38      	lsrs	r0, r7, #16
 8100fa4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100fa8:	fbb4 fef0 	udiv	lr, r4, r0
 8100fac:	fa1f fc87 	uxth.w	ip, r7
 8100fb0:	fb00 441e 	mls	r4, r0, lr, r4
 8100fb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fb8:	fb0e f90c 	mul.w	r9, lr, ip
 8100fbc:	45a1      	cmp	r9, r4
 8100fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc2:	d90a      	bls.n	8100fda <__udivmoddi4+0x1a6>
 8100fc4:	193c      	adds	r4, r7, r4
 8100fc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100fca:	f080 8084 	bcs.w	81010d6 <__udivmoddi4+0x2a2>
 8100fce:	45a1      	cmp	r9, r4
 8100fd0:	f240 8081 	bls.w	81010d6 <__udivmoddi4+0x2a2>
 8100fd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8100fd8:	443c      	add	r4, r7
 8100fda:	eba4 0409 	sub.w	r4, r4, r9
 8100fde:	fa1f f983 	uxth.w	r9, r3
 8100fe2:	fbb4 f3f0 	udiv	r3, r4, r0
 8100fe6:	fb00 4413 	mls	r4, r0, r3, r4
 8100fea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fee:	fb03 fc0c 	mul.w	ip, r3, ip
 8100ff2:	45a4      	cmp	ip, r4
 8100ff4:	d907      	bls.n	8101006 <__udivmoddi4+0x1d2>
 8100ff6:	193c      	adds	r4, r7, r4
 8100ff8:	f103 30ff 	add.w	r0, r3, #4294967295
 8100ffc:	d267      	bcs.n	81010ce <__udivmoddi4+0x29a>
 8100ffe:	45a4      	cmp	ip, r4
 8101000:	d965      	bls.n	81010ce <__udivmoddi4+0x29a>
 8101002:	3b02      	subs	r3, #2
 8101004:	443c      	add	r4, r7
 8101006:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 810100a:	fba0 9302 	umull	r9, r3, r0, r2
 810100e:	eba4 040c 	sub.w	r4, r4, ip
 8101012:	429c      	cmp	r4, r3
 8101014:	46ce      	mov	lr, r9
 8101016:	469c      	mov	ip, r3
 8101018:	d351      	bcc.n	81010be <__udivmoddi4+0x28a>
 810101a:	d04e      	beq.n	81010ba <__udivmoddi4+0x286>
 810101c:	b155      	cbz	r5, 8101034 <__udivmoddi4+0x200>
 810101e:	ebb8 030e 	subs.w	r3, r8, lr
 8101022:	eb64 040c 	sbc.w	r4, r4, ip
 8101026:	fa04 f606 	lsl.w	r6, r4, r6
 810102a:	40cb      	lsrs	r3, r1
 810102c:	431e      	orrs	r6, r3
 810102e:	40cc      	lsrs	r4, r1
 8101030:	e9c5 6400 	strd	r6, r4, [r5]
 8101034:	2100      	movs	r1, #0
 8101036:	e750      	b.n	8100eda <__udivmoddi4+0xa6>
 8101038:	f1c2 0320 	rsb	r3, r2, #32
 810103c:	fa20 f103 	lsr.w	r1, r0, r3
 8101040:	fa0c fc02 	lsl.w	ip, ip, r2
 8101044:	fa24 f303 	lsr.w	r3, r4, r3
 8101048:	4094      	lsls	r4, r2
 810104a:	430c      	orrs	r4, r1
 810104c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8101050:	fa00 fe02 	lsl.w	lr, r0, r2
 8101054:	fa1f f78c 	uxth.w	r7, ip
 8101058:	fbb3 f0f8 	udiv	r0, r3, r8
 810105c:	fb08 3110 	mls	r1, r8, r0, r3
 8101060:	0c23      	lsrs	r3, r4, #16
 8101062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8101066:	fb00 f107 	mul.w	r1, r0, r7
 810106a:	4299      	cmp	r1, r3
 810106c:	d908      	bls.n	8101080 <__udivmoddi4+0x24c>
 810106e:	eb1c 0303 	adds.w	r3, ip, r3
 8101072:	f100 36ff 	add.w	r6, r0, #4294967295
 8101076:	d22c      	bcs.n	81010d2 <__udivmoddi4+0x29e>
 8101078:	4299      	cmp	r1, r3
 810107a:	d92a      	bls.n	81010d2 <__udivmoddi4+0x29e>
 810107c:	3802      	subs	r0, #2
 810107e:	4463      	add	r3, ip
 8101080:	1a5b      	subs	r3, r3, r1
 8101082:	b2a4      	uxth	r4, r4
 8101084:	fbb3 f1f8 	udiv	r1, r3, r8
 8101088:	fb08 3311 	mls	r3, r8, r1, r3
 810108c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8101090:	fb01 f307 	mul.w	r3, r1, r7
 8101094:	42a3      	cmp	r3, r4
 8101096:	d908      	bls.n	81010aa <__udivmoddi4+0x276>
 8101098:	eb1c 0404 	adds.w	r4, ip, r4
 810109c:	f101 36ff 	add.w	r6, r1, #4294967295
 81010a0:	d213      	bcs.n	81010ca <__udivmoddi4+0x296>
 81010a2:	42a3      	cmp	r3, r4
 81010a4:	d911      	bls.n	81010ca <__udivmoddi4+0x296>
 81010a6:	3902      	subs	r1, #2
 81010a8:	4464      	add	r4, ip
 81010aa:	1ae4      	subs	r4, r4, r3
 81010ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 81010b0:	e739      	b.n	8100f26 <__udivmoddi4+0xf2>
 81010b2:	4604      	mov	r4, r0
 81010b4:	e6f0      	b.n	8100e98 <__udivmoddi4+0x64>
 81010b6:	4608      	mov	r0, r1
 81010b8:	e706      	b.n	8100ec8 <__udivmoddi4+0x94>
 81010ba:	45c8      	cmp	r8, r9
 81010bc:	d2ae      	bcs.n	810101c <__udivmoddi4+0x1e8>
 81010be:	ebb9 0e02 	subs.w	lr, r9, r2
 81010c2:	eb63 0c07 	sbc.w	ip, r3, r7
 81010c6:	3801      	subs	r0, #1
 81010c8:	e7a8      	b.n	810101c <__udivmoddi4+0x1e8>
 81010ca:	4631      	mov	r1, r6
 81010cc:	e7ed      	b.n	81010aa <__udivmoddi4+0x276>
 81010ce:	4603      	mov	r3, r0
 81010d0:	e799      	b.n	8101006 <__udivmoddi4+0x1d2>
 81010d2:	4630      	mov	r0, r6
 81010d4:	e7d4      	b.n	8101080 <__udivmoddi4+0x24c>
 81010d6:	46d6      	mov	lr, sl
 81010d8:	e77f      	b.n	8100fda <__udivmoddi4+0x1a6>
 81010da:	4463      	add	r3, ip
 81010dc:	3802      	subs	r0, #2
 81010de:	e74d      	b.n	8100f7c <__udivmoddi4+0x148>
 81010e0:	4606      	mov	r6, r0
 81010e2:	4623      	mov	r3, r4
 81010e4:	4608      	mov	r0, r1
 81010e6:	e70f      	b.n	8100f08 <__udivmoddi4+0xd4>
 81010e8:	3e02      	subs	r6, #2
 81010ea:	4463      	add	r3, ip
 81010ec:	e730      	b.n	8100f50 <__udivmoddi4+0x11c>
 81010ee:	bf00      	nop

081010f0 <__aeabi_idiv0>:
 81010f0:	4770      	bx	lr
 81010f2:	bf00      	nop

081010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010f4:	b480      	push	{r7}
 81010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81010f8:	4b09      	ldr	r3, [pc, #36]	@ (8101120 <SystemInit+0x2c>)
 81010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81010fe:	4a08      	ldr	r2, [pc, #32]	@ (8101120 <SystemInit+0x2c>)
 8101100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101108:	4b05      	ldr	r3, [pc, #20]	@ (8101120 <SystemInit+0x2c>)
 810110a:	691b      	ldr	r3, [r3, #16]
 810110c:	4a04      	ldr	r2, [pc, #16]	@ (8101120 <SystemInit+0x2c>)
 810110e:	f043 0310 	orr.w	r3, r3, #16
 8101112:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101114:	bf00      	nop
 8101116:	46bd      	mov	sp, r7
 8101118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111c:	4770      	bx	lr
 810111e:	bf00      	nop
 8101120:	e000ed00 	.word	0xe000ed00

08101124 <_dwm_send_command>:

//static uint8_t uart_rx_buffer[128];
//static uint8_t uart_tx_buffer[128];

// Funzioni private
static int _dwm_send_command(const uint8_t* cmd, uint8_t cmd_len) {
 8101124:	b580      	push	{r7, lr}
 8101126:	b082      	sub	sp, #8
 8101128:	af00      	add	r7, sp, #0
 810112a:	6078      	str	r0, [r7, #4]
 810112c:	460b      	mov	r3, r1
 810112e:	70fb      	strb	r3, [r7, #3]
    return (HAL_UART_Transmit(dwm_huart, cmd, cmd_len, 100) == HAL_OK) ? 0 : -1;
 8101130:	4b09      	ldr	r3, [pc, #36]	@ (8101158 <_dwm_send_command+0x34>)
 8101132:	6818      	ldr	r0, [r3, #0]
 8101134:	78fb      	ldrb	r3, [r7, #3]
 8101136:	b29a      	uxth	r2, r3
 8101138:	2364      	movs	r3, #100	@ 0x64
 810113a:	6879      	ldr	r1, [r7, #4]
 810113c:	f007 f8de 	bl	81082fc <HAL_UART_Transmit>
 8101140:	4603      	mov	r3, r0
 8101142:	2b00      	cmp	r3, #0
 8101144:	d101      	bne.n	810114a <_dwm_send_command+0x26>
 8101146:	2300      	movs	r3, #0
 8101148:	e001      	b.n	810114e <_dwm_send_command+0x2a>
 810114a:	f04f 33ff 	mov.w	r3, #4294967295
}
 810114e:	4618      	mov	r0, r3
 8101150:	3708      	adds	r7, #8
 8101152:	46bd      	mov	sp, r7
 8101154:	bd80      	pop	{r7, pc}
 8101156:	bf00      	nop
 8101158:	10000014 	.word	0x10000014

0810115c <_dwm_receive_response>:

static int _dwm_receive_response(uint8_t* buf, uint16_t buf_size, uint32_t timeout) {
 810115c:	b580      	push	{r7, lr}
 810115e:	b084      	sub	sp, #16
 8101160:	af00      	add	r7, sp, #0
 8101162:	60f8      	str	r0, [r7, #12]
 8101164:	460b      	mov	r3, r1
 8101166:	607a      	str	r2, [r7, #4]
 8101168:	817b      	strh	r3, [r7, #10]
    return (HAL_UART_Receive(dwm_huart, buf, buf_size, timeout) == HAL_OK) ? 0 : -1;
 810116a:	4b09      	ldr	r3, [pc, #36]	@ (8101190 <_dwm_receive_response+0x34>)
 810116c:	6818      	ldr	r0, [r3, #0]
 810116e:	897a      	ldrh	r2, [r7, #10]
 8101170:	687b      	ldr	r3, [r7, #4]
 8101172:	68f9      	ldr	r1, [r7, #12]
 8101174:	f007 f950 	bl	8108418 <HAL_UART_Receive>
 8101178:	4603      	mov	r3, r0
 810117a:	2b00      	cmp	r3, #0
 810117c:	d101      	bne.n	8101182 <_dwm_receive_response+0x26>
 810117e:	2300      	movs	r3, #0
 8101180:	e001      	b.n	8101186 <_dwm_receive_response+0x2a>
 8101182:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101186:	4618      	mov	r0, r3
 8101188:	3710      	adds	r7, #16
 810118a:	46bd      	mov	sp, r7
 810118c:	bd80      	pop	{r7, pc}
 810118e:	bf00      	nop
 8101190:	10000014 	.word	0x10000014

08101194 <dwm_init>:

// Funzioni pubbliche
int dwm_init(void) {
 8101194:	b580      	push	{r7, lr}
 8101196:	b082      	sub	sp, #8
 8101198:	af00      	add	r7, sp, #0
    const uint8_t reset_cmd[] = {0xDE, 0x01};  // Formato corretto dal datasheet
 810119a:	f44f 73ef 	mov.w	r3, #478	@ 0x1de
 810119e:	80bb      	strh	r3, [r7, #4]
    return _dwm_send_command(reset_cmd, sizeof(reset_cmd));
 81011a0:	1d3b      	adds	r3, r7, #4
 81011a2:	2102      	movs	r1, #2
 81011a4:	4618      	mov	r0, r3
 81011a6:	f7ff ffbd 	bl	8101124 <_dwm_send_command>
 81011aa:	4603      	mov	r3, r0
}
 81011ac:	4618      	mov	r0, r3
 81011ae:	3708      	adds	r7, #8
 81011b0:	46bd      	mov	sp, r7
 81011b2:	bd80      	pop	{r7, pc}

081011b4 <dwm_cfg_tag_set>:
/*int dwm_init(void) {
    const uint8_t reset_cmd[] = {0x01};  // Comando reset
    return _dwm_send_command(reset_cmd, sizeof(reset_cmd));
}*/

int dwm_cfg_tag_set(dwm_cfg_tag_t* cfg) {
 81011b4:	b580      	push	{r7, lr}
 81011b6:	b084      	sub	sp, #16
 81011b8:	af00      	add	r7, sp, #0
 81011ba:	6078      	str	r0, [r7, #4]
    uint8_t config_cmd[] = {
 81011bc:	2302      	movs	r3, #2
 81011be:	733b      	strb	r3, [r7, #12]
        0x02,  // Opcode configurazione
        (cfg->common.uwb_mode << 2) | (cfg->loc_engine_en << 4),
 81011c0:	687b      	ldr	r3, [r7, #4]
 81011c2:	781b      	ldrb	r3, [r3, #0]
 81011c4:	009b      	lsls	r3, r3, #2
 81011c6:	b25a      	sxtb	r2, r3
 81011c8:	687b      	ldr	r3, [r7, #4]
 81011ca:	78db      	ldrb	r3, [r3, #3]
 81011cc:	011b      	lsls	r3, r3, #4
 81011ce:	b25b      	sxtb	r3, r3
 81011d0:	4313      	orrs	r3, r2
 81011d2:	b25b      	sxtb	r3, r3
 81011d4:	b2db      	uxtb	r3, r3
    uint8_t config_cmd[] = {
 81011d6:	737b      	strb	r3, [r7, #13]
        cfg->meas_mode
 81011d8:	687b      	ldr	r3, [r7, #4]
 81011da:	789b      	ldrb	r3, [r3, #2]
    uint8_t config_cmd[] = {
 81011dc:	73bb      	strb	r3, [r7, #14]
    };
    return _dwm_send_command(config_cmd, sizeof(config_cmd));
 81011de:	f107 030c 	add.w	r3, r7, #12
 81011e2:	2103      	movs	r1, #3
 81011e4:	4618      	mov	r0, r3
 81011e6:	f7ff ff9d 	bl	8101124 <_dwm_send_command>
 81011ea:	4603      	mov	r3, r0
}
 81011ec:	4618      	mov	r0, r3
 81011ee:	3710      	adds	r7, #16
 81011f0:	46bd      	mov	sp, r7
 81011f2:	bd80      	pop	{r7, pc}

081011f4 <dwm_uwb_cfg_set>:

int dwm_uwb_cfg_set(uint8_t pg_delay, uint32_t tx_power) {
 81011f4:	b580      	push	{r7, lr}
 81011f6:	b084      	sub	sp, #16
 81011f8:	af00      	add	r7, sp, #0
 81011fa:	4603      	mov	r3, r0
 81011fc:	6039      	str	r1, [r7, #0]
 81011fe:	71fb      	strb	r3, [r7, #7]
    uint8_t config_cmd[] = {
 8101200:	2303      	movs	r3, #3
 8101202:	723b      	strb	r3, [r7, #8]
 8101204:	79fb      	ldrb	r3, [r7, #7]
 8101206:	727b      	strb	r3, [r7, #9]
        0x03,  // Opcode UWB config
        pg_delay,
        (tx_power >> 24) & 0xFF,
 8101208:	683b      	ldr	r3, [r7, #0]
 810120a:	0e1b      	lsrs	r3, r3, #24
    uint8_t config_cmd[] = {
 810120c:	b2db      	uxtb	r3, r3
 810120e:	72bb      	strb	r3, [r7, #10]
        (tx_power >> 16) & 0xFF,
 8101210:	683b      	ldr	r3, [r7, #0]
 8101212:	0c1b      	lsrs	r3, r3, #16
    uint8_t config_cmd[] = {
 8101214:	b2db      	uxtb	r3, r3
 8101216:	72fb      	strb	r3, [r7, #11]
        (tx_power >> 8) & 0xFF,
 8101218:	683b      	ldr	r3, [r7, #0]
 810121a:	0a1b      	lsrs	r3, r3, #8
    uint8_t config_cmd[] = {
 810121c:	b2db      	uxtb	r3, r3
 810121e:	733b      	strb	r3, [r7, #12]
 8101220:	683b      	ldr	r3, [r7, #0]
 8101222:	b2db      	uxtb	r3, r3
 8101224:	737b      	strb	r3, [r7, #13]
        tx_power & 0xFF
    };
    return _dwm_send_command(config_cmd, sizeof(config_cmd));
 8101226:	f107 0308 	add.w	r3, r7, #8
 810122a:	2106      	movs	r1, #6
 810122c:	4618      	mov	r0, r3
 810122e:	f7ff ff79 	bl	8101124 <_dwm_send_command>
 8101232:	4603      	mov	r3, r0
}
 8101234:	4618      	mov	r0, r3
 8101236:	3710      	adds	r7, #16
 8101238:	46bd      	mov	sp, r7
 810123a:	bd80      	pop	{r7, pc}

0810123c <dwm_loc_get>:
int dwm_loc_get(dwm_loc_data_t* loc) {
 810123c:	b580      	push	{r7, lr}
 810123e:	b094      	sub	sp, #80	@ 0x50
 8101240:	af00      	add	r7, sp, #0
 8101242:	6078      	str	r0, [r7, #4]
    const uint8_t get_dist_cmd[] = {0x0C, 0x00};  // TLV: T=0x0C (get distances), L=0
 8101244:	230c      	movs	r3, #12
 8101246:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (_dwm_send_command(get_dist_cmd, sizeof(get_dist_cmd)) != 0) {
 810124a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 810124e:	2102      	movs	r1, #2
 8101250:	4618      	mov	r0, r3
 8101252:	f7ff ff67 	bl	8101124 <_dwm_send_command>
 8101256:	4603      	mov	r3, r0
 8101258:	2b00      	cmp	r3, #0
 810125a:	d002      	beq.n	8101262 <dwm_loc_get+0x26>
        return -1;
 810125c:	f04f 33ff 	mov.w	r3, #4294967295
 8101260:	e093      	b.n	810138a <dwm_loc_get+0x14e>
    }
    uint8_t response[64];  // buffer temporaneo
    if (_dwm_receive_response(response, sizeof(response), 1000) != 0) {
 8101262:	f107 0308 	add.w	r3, r7, #8
 8101266:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 810126a:	2140      	movs	r1, #64	@ 0x40
 810126c:	4618      	mov	r0, r3
 810126e:	f7ff ff75 	bl	810115c <_dwm_receive_response>
 8101272:	4603      	mov	r3, r0
 8101274:	2b00      	cmp	r3, #0
 8101276:	d002      	beq.n	810127e <dwm_loc_get+0x42>
        return -1;
 8101278:	f04f 33ff 	mov.w	r3, #4294967295
 810127c:	e085      	b.n	810138a <dwm_loc_get+0x14e>
    }
    // Controlla tipo risposta
    if (response[0] != 0x0C) {
 810127e:	7a3b      	ldrb	r3, [r7, #8]
 8101280:	2b0c      	cmp	r3, #12
 8101282:	d002      	beq.n	810128a <dwm_loc_get+0x4e>
        return -1;
 8101284:	f04f 33ff 	mov.w	r3, #4294967295
 8101288:	e07f      	b.n	810138a <dwm_loc_get+0x14e>
    }
    uint8_t len = response[1];  // L = lunghezza payload
 810128a:	7a7b      	ldrb	r3, [r7, #9]
 810128c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    if (len == 0 || len > sizeof(response) - 2) {
 8101290:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8101294:	2b00      	cmp	r3, #0
 8101296:	d003      	beq.n	81012a0 <dwm_loc_get+0x64>
 8101298:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 810129c:	2b3e      	cmp	r3, #62	@ 0x3e
 810129e:	d902      	bls.n	81012a6 <dwm_loc_get+0x6a>
        return -1;
 81012a0:	f04f 33ff 	mov.w	r3, #4294967295
 81012a4:	e071      	b.n	810138a <dwm_loc_get+0x14e>
    }
    uint8_t anchor_cnt = response[2];  // primo byte utile = numero di anchor
 81012a6:	7abb      	ldrb	r3, [r7, #10]
 81012a8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    loc->anchors.dist.cnt = anchor_cnt;
 81012ac:	687b      	ldr	r3, [r7, #4]
 81012ae:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 81012b2:	711a      	strb	r2, [r3, #4]

    for (uint8_t i = 0; i < anchor_cnt; i++) {
 81012b4:	2300      	movs	r3, #0
 81012b6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 81012ba:	e05f      	b.n	810137c <dwm_loc_get+0x140>
        uint8_t base = 3 + i * 7;
 81012bc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 81012c0:	461a      	mov	r2, r3
 81012c2:	00d2      	lsls	r2, r2, #3
 81012c4:	1ad3      	subs	r3, r2, r3
 81012c6:	b2db      	uxtb	r3, r3
 81012c8:	3303      	adds	r3, #3
 81012ca:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        loc->anchors.dist.addr[i] = (response[base] << 8) | response[base + 1];
 81012ce:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 81012d2:	3350      	adds	r3, #80	@ 0x50
 81012d4:	443b      	add	r3, r7
 81012d6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 81012da:	021b      	lsls	r3, r3, #8
 81012dc:	b21a      	sxth	r2, r3
 81012de:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 81012e2:	3301      	adds	r3, #1
 81012e4:	3350      	adds	r3, #80	@ 0x50
 81012e6:	443b      	add	r3, r7
 81012e8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 81012ec:	b21b      	sxth	r3, r3
 81012ee:	4313      	orrs	r3, r2
 81012f0:	b21a      	sxth	r2, r3
 81012f2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 81012f6:	b291      	uxth	r1, r2
 81012f8:	687a      	ldr	r2, [r7, #4]
 81012fa:	005b      	lsls	r3, r3, #1
 81012fc:	4413      	add	r3, r2
 81012fe:	460a      	mov	r2, r1
 8101300:	80da      	strh	r2, [r3, #6]
        loc->anchors.dist.dist[i] = (response[base + 2] << 24) |
 8101302:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101306:	3302      	adds	r3, #2
 8101308:	3350      	adds	r3, #80	@ 0x50
 810130a:	443b      	add	r3, r7
 810130c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8101310:	061a      	lsls	r2, r3, #24
                                    (response[base + 3] << 16) |
 8101312:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101316:	3303      	adds	r3, #3
 8101318:	3350      	adds	r3, #80	@ 0x50
 810131a:	443b      	add	r3, r7
 810131c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8101320:	041b      	lsls	r3, r3, #16
        loc->anchors.dist.dist[i] = (response[base + 2] << 24) |
 8101322:	431a      	orrs	r2, r3
                                    (response[base + 4] << 8) |
 8101324:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101328:	3304      	adds	r3, #4
 810132a:	3350      	adds	r3, #80	@ 0x50
 810132c:	443b      	add	r3, r7
 810132e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8101332:	021b      	lsls	r3, r3, #8
                                    (response[base + 3] << 16) |
 8101334:	4313      	orrs	r3, r2
                                    response[base + 5];
 8101336:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 810133a:	3205      	adds	r2, #5
 810133c:	3250      	adds	r2, #80	@ 0x50
 810133e:	443a      	add	r2, r7
 8101340:	f812 2c48 	ldrb.w	r2, [r2, #-72]
                                    (response[base + 4] << 8) |
 8101344:	431a      	orrs	r2, r3
        loc->anchors.dist.dist[i] = (response[base + 2] << 24) |
 8101346:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
                                    (response[base + 4] << 8) |
 810134a:	4611      	mov	r1, r2
        loc->anchors.dist.dist[i] = (response[base + 2] << 24) |
 810134c:	687a      	ldr	r2, [r7, #4]
 810134e:	3308      	adds	r3, #8
 8101350:	009b      	lsls	r3, r3, #2
 8101352:	4413      	add	r3, r2
 8101354:	6059      	str	r1, [r3, #4]
        loc->anchors.dist.qf[i] = response[base + 6];
 8101356:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 810135a:	1d9a      	adds	r2, r3, #6
 810135c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8101360:	3250      	adds	r2, #80	@ 0x50
 8101362:	443a      	add	r2, r7
 8101364:	f812 1c48 	ldrb.w	r1, [r2, #-72]
 8101368:	687a      	ldr	r2, [r7, #4]
 810136a:	4413      	add	r3, r2
 810136c:	460a      	mov	r2, r1
 810136e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    for (uint8_t i = 0; i < anchor_cnt; i++) {
 8101372:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8101376:	3301      	adds	r3, #1
 8101378:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 810137c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8101380:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8101384:	429a      	cmp	r2, r3
 8101386:	d399      	bcc.n	81012bc <dwm_loc_get+0x80>
    }

    return 0;
 8101388:	2300      	movs	r3, #0
}
 810138a:	4618      	mov	r0, r3
 810138c:	3750      	adds	r7, #80	@ 0x50
 810138e:	46bd      	mov	sp, r7
 8101390:	bd80      	pop	{r7, pc}

08101392 <bno055_setPage>:
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

// Imposta la pagina di registro del sensore BNO055
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8101392:	b580      	push	{r7, lr}
 8101394:	b082      	sub	sp, #8
 8101396:	af00      	add	r7, sp, #0
 8101398:	4603      	mov	r3, r0
 810139a:	71fb      	strb	r3, [r7, #7]
 810139c:	79fb      	ldrb	r3, [r7, #7]
 810139e:	4619      	mov	r1, r3
 81013a0:	2007      	movs	r0, #7
 81013a2:	f000 fa03 	bl	81017ac <bno055_writeData>
 81013a6:	bf00      	nop
 81013a8:	3708      	adds	r7, #8
 81013aa:	46bd      	mov	sp, r7
 81013ac:	bd80      	pop	{r7, pc}

081013ae <bno055_setOperationMode>:
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

// Imposta la modalità operativa del sensore BNO055 e attende un ritardo in base alla modalità
void bno055_setOperationMode(bno055_opmode_t mode) {
 81013ae:	b580      	push	{r7, lr}
 81013b0:	b082      	sub	sp, #8
 81013b2:	af00      	add	r7, sp, #0
 81013b4:	4603      	mov	r3, r0
 81013b6:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 81013b8:	79fb      	ldrb	r3, [r7, #7]
 81013ba:	4619      	mov	r1, r3
 81013bc:	203d      	movs	r0, #61	@ 0x3d
 81013be:	f000 f9f5 	bl	81017ac <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 81013c2:	79fb      	ldrb	r3, [r7, #7]
 81013c4:	2b00      	cmp	r3, #0
 81013c6:	d103      	bne.n	81013d0 <bno055_setOperationMode+0x22>
    bno055_delay(100);
 81013c8:	2064      	movs	r0, #100	@ 0x64
 81013ca:	f000 f9e3 	bl	8101794 <bno055_delay>
  } else {
    bno055_delay(80);
  }
}
 81013ce:	e002      	b.n	81013d6 <bno055_setOperationMode+0x28>
    bno055_delay(80);
 81013d0:	2050      	movs	r0, #80	@ 0x50
 81013d2:	f000 f9df 	bl	8101794 <bno055_delay>
}
 81013d6:	bf00      	nop
 81013d8:	3708      	adds	r7, #8
 81013da:	46bd      	mov	sp, r7
 81013dc:	bd80      	pop	{r7, pc}

081013de <bno055_setOperationModeConfig>:

// NON FUSION MODE

// Imposta la modalità operativa del sensore BNO055 su configurazione
void bno055_setOperationModeConfig() {
 81013de:	b580      	push	{r7, lr}
 81013e0:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 81013e2:	2000      	movs	r0, #0
 81013e4:	f7ff ffe3 	bl	81013ae <bno055_setOperationMode>
}
 81013e8:	bf00      	nop
 81013ea:	bd80      	pop	{r7, pc}

081013ec <bno055_setOperationModeNDOF>:
void bno055_setOperationModeNDOF_FMC_OFF(){
	bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF_FMC_OFF);
}

// Imposta la modalità operativa del sensore BNO055 su NDOF (Nine Degrees of Freedom)
void bno055_setOperationModeNDOF() {
 81013ec:	b580      	push	{r7, lr}
 81013ee:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 81013f0:	200c      	movs	r0, #12
 81013f2:	f7ff ffdc 	bl	81013ae <bno055_setOperationMode>
}
 81013f6:	bf00      	nop
 81013f8:	bd80      	pop	{r7, pc}

081013fa <bno055_reset>:
void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
// Disabilita l'uso di un cristallo esterno per il sensore BNO055
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

// Esegue una procedura di reset per il sensore BNO055
void bno055_reset() {
 81013fa:	b580      	push	{r7, lr}
 81013fc:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 81013fe:	2120      	movs	r1, #32
 8101400:	203f      	movs	r0, #63	@ 0x3f
 8101402:	f000 f9d3 	bl	81017ac <bno055_writeData>
  bno055_delay(700);
 8101406:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 810140a:	f000 f9c3 	bl	8101794 <bno055_delay>
}
 810140e:	bf00      	nop
 8101410:	bd80      	pop	{r7, pc}
	...

08101414 <bno055_setup>:
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

// Inizializza il sensore BNO055 eseguendo una procedura di reset e configurazione iniziale
void bno055_setup() {
 8101414:	b580      	push	{r7, lr}
 8101416:	b082      	sub	sp, #8
 8101418:	af00      	add	r7, sp, #0
  bno055_reset();
 810141a:	f7ff ffee 	bl	81013fa <bno055_reset>

  uint8_t id = 0;
 810141e:	2300      	movs	r3, #0
 8101420:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8101422:	1dfb      	adds	r3, r7, #7
 8101424:	2201      	movs	r2, #1
 8101426:	4619      	mov	r1, r3
 8101428:	2000      	movs	r0, #0
 810142a:	f000 fa99 	bl	8101960 <bno055_readData>
  if (id != BNO055_ID) {
 810142e:	79fb      	ldrb	r3, [r7, #7]
 8101430:	2ba0      	cmp	r3, #160	@ 0xa0
 8101432:	d004      	beq.n	810143e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8101434:	79fb      	ldrb	r3, [r7, #7]
 8101436:	4619      	mov	r1, r3
 8101438:	4809      	ldr	r0, [pc, #36]	@ (8101460 <bno055_setup+0x4c>)
 810143a:	f009 f89d 	bl	810a578 <iprintf>
  }
  bno055_setPage(0);
 810143e:	2000      	movs	r0, #0
 8101440:	f7ff ffa7 	bl	8101392 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8101444:	2100      	movs	r1, #0
 8101446:	203f      	movs	r0, #63	@ 0x3f
 8101448:	f000 f9b0 	bl	81017ac <bno055_writeData>

  // Seleziona la modalità di configurazione del BNO055
  bno055_setOperationModeConfig();
 810144c:	f7ff ffc7 	bl	81013de <bno055_setOperationModeConfig>
  bno055_delay(10);
 8101450:	200a      	movs	r0, #10
 8101452:	f000 f99f 	bl	8101794 <bno055_delay>
}
 8101456:	bf00      	nop
 8101458:	3708      	adds	r7, #8
 810145a:	46bd      	mov	sp, r7
 810145c:	bd80      	pop	{r7, pc}
 810145e:	bf00      	nop
 8101460:	0810e118 	.word	0x0810e118

08101464 <bno055_getVector>:

  bno055_setOperationMode(operationMode);
}

//Ottiene un vettore specifico dal sensore BNO055 con la possibilità di specificare la scala del vettore
bno055_vector_t bno055_getVector(uint8_t vec) {
 8101464:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101468:	b09e      	sub	sp, #120	@ 0x78
 810146a:	af00      	add	r7, sp, #0
 810146c:	4603      	mov	r3, r0
 810146e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8101472:	2000      	movs	r0, #0
 8101474:	f7ff ff8d 	bl	8101392 <bno055_setPage>
  uint8_t buffer[8];    // I quaternioni richiedono 8 byte

  if (vec == BNO055_VECTOR_QUATERNION)
 8101478:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810147c:	2b20      	cmp	r3, #32
 810147e:	d108      	bne.n	8101492 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8101480:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8101484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101488:	2208      	movs	r2, #8
 810148a:	4618      	mov	r0, r3
 810148c:	f000 fa68 	bl	8101960 <bno055_readData>
 8101490:	e007      	b.n	81014a2 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8101492:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8101496:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810149a:	2206      	movs	r2, #6
 810149c:	4618      	mov	r0, r3
 810149e:	f000 fa5f 	bl	8101960 <bno055_readData>

  double scale = 1;
 81014a2:	f04f 0200 	mov.w	r2, #0
 81014a6:	4b8b      	ldr	r3, [pc, #556]	@ (81016d4 <bno055_getVector+0x270>)
 81014a8:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 81014ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81014b0:	2b0e      	cmp	r3, #14
 81014b2:	d109      	bne.n	81014c8 <bno055_getVector+0x64>
    scale = magScale;
 81014b4:	4b88      	ldr	r3, [pc, #544]	@ (81016d8 <bno055_getVector+0x274>)
 81014b6:	881b      	ldrh	r3, [r3, #0]
 81014b8:	4618      	mov	r0, r3
 81014ba:	f7ff f8ab 	bl	8100614 <__aeabi_ui2d>
 81014be:	4602      	mov	r2, r0
 81014c0:	460b      	mov	r3, r1
 81014c2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81014c6:	e03e      	b.n	8101546 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 81014c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81014cc:	2b08      	cmp	r3, #8
 81014ce:	d007      	beq.n	81014e0 <bno055_getVector+0x7c>
 81014d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81014d4:	2b28      	cmp	r3, #40	@ 0x28
 81014d6:	d003      	beq.n	81014e0 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 81014d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81014dc:	2b2e      	cmp	r3, #46	@ 0x2e
 81014de:	d109      	bne.n	81014f4 <bno055_getVector+0x90>
    scale = accelScale;
 81014e0:	4b7e      	ldr	r3, [pc, #504]	@ (81016dc <bno055_getVector+0x278>)
 81014e2:	881b      	ldrh	r3, [r3, #0]
 81014e4:	4618      	mov	r0, r3
 81014e6:	f7ff f895 	bl	8100614 <__aeabi_ui2d>
 81014ea:	4602      	mov	r2, r0
 81014ec:	460b      	mov	r3, r1
 81014ee:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81014f2:	e028      	b.n	8101546 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 81014f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81014f8:	2b14      	cmp	r3, #20
 81014fa:	d109      	bne.n	8101510 <bno055_getVector+0xac>
    scale = angularRateScale;
 81014fc:	4b78      	ldr	r3, [pc, #480]	@ (81016e0 <bno055_getVector+0x27c>)
 81014fe:	881b      	ldrh	r3, [r3, #0]
 8101500:	4618      	mov	r0, r3
 8101502:	f7ff f887 	bl	8100614 <__aeabi_ui2d>
 8101506:	4602      	mov	r2, r0
 8101508:	460b      	mov	r3, r1
 810150a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 810150e:	e01a      	b.n	8101546 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8101510:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101514:	2b1a      	cmp	r3, #26
 8101516:	d109      	bne.n	810152c <bno055_getVector+0xc8>
    scale = eulerScale;
 8101518:	4b72      	ldr	r3, [pc, #456]	@ (81016e4 <bno055_getVector+0x280>)
 810151a:	881b      	ldrh	r3, [r3, #0]
 810151c:	4618      	mov	r0, r3
 810151e:	f7ff f879 	bl	8100614 <__aeabi_ui2d>
 8101522:	4602      	mov	r2, r0
 8101524:	460b      	mov	r3, r1
 8101526:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 810152a:	e00c      	b.n	8101546 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 810152c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101530:	2b20      	cmp	r3, #32
 8101532:	d108      	bne.n	8101546 <bno055_getVector+0xe2>
    scale = quaScale;
 8101534:	4b6c      	ldr	r3, [pc, #432]	@ (81016e8 <bno055_getVector+0x284>)
 8101536:	881b      	ldrh	r3, [r3, #0]
 8101538:	4618      	mov	r0, r3
 810153a:	f7ff f86b 	bl	8100614 <__aeabi_ui2d>
 810153e:	4602      	mov	r2, r0
 8101540:	460b      	mov	r3, r1
 8101542:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8101546:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810154a:	2220      	movs	r2, #32
 810154c:	2100      	movs	r1, #0
 810154e:	4618      	mov	r0, r3
 8101550:	f009 f9ae 	bl	810a8b0 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8101554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101558:	2b20      	cmp	r3, #32
 810155a:	d150      	bne.n	81015fe <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 810155c:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8101560:	021b      	lsls	r3, r3, #8
 8101562:	b21a      	sxth	r2, r3
 8101564:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8101568:	b21b      	sxth	r3, r3
 810156a:	4313      	orrs	r3, r2
 810156c:	b21b      	sxth	r3, r3
 810156e:	4618      	mov	r0, r3
 8101570:	f7ff f860 	bl	8100634 <__aeabi_i2d>
 8101574:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101578:	f7ff f9f0 	bl	810095c <__aeabi_ddiv>
 810157c:	4602      	mov	r2, r0
 810157e:	460b      	mov	r3, r1
 8101580:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8101584:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8101588:	021b      	lsls	r3, r3, #8
 810158a:	b21a      	sxth	r2, r3
 810158c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8101590:	b21b      	sxth	r3, r3
 8101592:	4313      	orrs	r3, r2
 8101594:	b21b      	sxth	r3, r3
 8101596:	4618      	mov	r0, r3
 8101598:	f7ff f84c 	bl	8100634 <__aeabi_i2d>
 810159c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81015a0:	f7ff f9dc 	bl	810095c <__aeabi_ddiv>
 81015a4:	4602      	mov	r2, r0
 81015a6:	460b      	mov	r3, r1
 81015a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 81015ac:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 81015b0:	021b      	lsls	r3, r3, #8
 81015b2:	b21a      	sxth	r2, r3
 81015b4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 81015b8:	b21b      	sxth	r3, r3
 81015ba:	4313      	orrs	r3, r2
 81015bc:	b21b      	sxth	r3, r3
 81015be:	4618      	mov	r0, r3
 81015c0:	f7ff f838 	bl	8100634 <__aeabi_i2d>
 81015c4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81015c8:	f7ff f9c8 	bl	810095c <__aeabi_ddiv>
 81015cc:	4602      	mov	r2, r0
 81015ce:	460b      	mov	r3, r1
 81015d0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 81015d4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 81015d8:	021b      	lsls	r3, r3, #8
 81015da:	b21a      	sxth	r2, r3
 81015dc:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 81015e0:	b21b      	sxth	r3, r3
 81015e2:	4313      	orrs	r3, r2
 81015e4:	b21b      	sxth	r3, r3
 81015e6:	4618      	mov	r0, r3
 81015e8:	f7ff f824 	bl	8100634 <__aeabi_i2d>
 81015ec:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81015f0:	f7ff f9b4 	bl	810095c <__aeabi_ddiv>
 81015f4:	4602      	mov	r2, r0
 81015f6:	460b      	mov	r3, r1
 81015f8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 81015fc:	e03b      	b.n	8101676 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 81015fe:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8101602:	021b      	lsls	r3, r3, #8
 8101604:	b21a      	sxth	r2, r3
 8101606:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 810160a:	b21b      	sxth	r3, r3
 810160c:	4313      	orrs	r3, r2
 810160e:	b21b      	sxth	r3, r3
 8101610:	4618      	mov	r0, r3
 8101612:	f7ff f80f 	bl	8100634 <__aeabi_i2d>
 8101616:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 810161a:	f7ff f99f 	bl	810095c <__aeabi_ddiv>
 810161e:	4602      	mov	r2, r0
 8101620:	460b      	mov	r3, r1
 8101622:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8101626:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 810162a:	021b      	lsls	r3, r3, #8
 810162c:	b21a      	sxth	r2, r3
 810162e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8101632:	b21b      	sxth	r3, r3
 8101634:	4313      	orrs	r3, r2
 8101636:	b21b      	sxth	r3, r3
 8101638:	4618      	mov	r0, r3
 810163a:	f7fe fffb 	bl	8100634 <__aeabi_i2d>
 810163e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101642:	f7ff f98b 	bl	810095c <__aeabi_ddiv>
 8101646:	4602      	mov	r2, r0
 8101648:	460b      	mov	r3, r1
 810164a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 810164e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8101652:	021b      	lsls	r3, r3, #8
 8101654:	b21a      	sxth	r2, r3
 8101656:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 810165a:	b21b      	sxth	r3, r3
 810165c:	4313      	orrs	r3, r2
 810165e:	b21b      	sxth	r3, r3
 8101660:	4618      	mov	r0, r3
 8101662:	f7fe ffe7 	bl	8100634 <__aeabi_i2d>
 8101666:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 810166a:	f7ff f977 	bl	810095c <__aeabi_ddiv>
 810166e:	4602      	mov	r2, r0
 8101670:	460b      	mov	r3, r1
 8101672:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 8101676:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 810167a:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 810167e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101682:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8101686:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810168a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 810168e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8101692:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8101696:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 810169a:	ec49 8b14 	vmov	d4, r8, r9
 810169e:	ec45 4b15 	vmov	d5, r4, r5
 81016a2:	ec41 0b16 	vmov	d6, r0, r1
 81016a6:	ec43 2b17 	vmov	d7, r2, r3
}
 81016aa:	eeb0 0a44 	vmov.f32	s0, s8
 81016ae:	eef0 0a64 	vmov.f32	s1, s9
 81016b2:	eeb0 1a45 	vmov.f32	s2, s10
 81016b6:	eef0 1a65 	vmov.f32	s3, s11
 81016ba:	eeb0 2a46 	vmov.f32	s4, s12
 81016be:	eef0 2a66 	vmov.f32	s5, s13
 81016c2:	eeb0 3a47 	vmov.f32	s6, s14
 81016c6:	eef0 3a67 	vmov.f32	s7, s15
 81016ca:	3778      	adds	r7, #120	@ 0x78
 81016cc:	46bd      	mov	sp, r7
 81016ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 81016d2:	bf00      	nop
 81016d4:	3ff00000 	.word	0x3ff00000
 81016d8:	1000000e 	.word	0x1000000e
 81016dc:	10000008 	.word	0x10000008
 81016e0:	1000000a 	.word	0x1000000a
 81016e4:	1000000c 	.word	0x1000000c
 81016e8:	10000010 	.word	0x10000010

081016ec <bno055_getVectorEuler>:
// Ottiene un vettore giroscopico dal sensore BNO055
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
// Ottiene un vettore di angoli di Eulero dal sensore BNO055
bno055_vector_t bno055_getVectorEuler() {
 81016ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81016f0:	b090      	sub	sp, #64	@ 0x40
 81016f2:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 81016f4:	201a      	movs	r0, #26
 81016f6:	f7ff feb5 	bl	8101464 <bno055_getVector>
 81016fa:	eeb0 4a40 	vmov.f32	s8, s0
 81016fe:	eef0 4a60 	vmov.f32	s9, s1
 8101702:	eeb0 5a41 	vmov.f32	s10, s2
 8101706:	eef0 5a61 	vmov.f32	s11, s3
 810170a:	eeb0 6a42 	vmov.f32	s12, s4
 810170e:	eef0 6a62 	vmov.f32	s13, s5
 8101712:	eeb0 7a43 	vmov.f32	s14, s6
 8101716:	eef0 7a63 	vmov.f32	s15, s7
 810171a:	ed87 4b08 	vstr	d4, [r7, #32]
 810171e:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8101722:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8101726:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 810172a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810172e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8101732:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8101736:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 810173a:	ec49 8b14 	vmov	d4, r8, r9
 810173e:	ec45 4b15 	vmov	d5, r4, r5
 8101742:	ec41 0b16 	vmov	d6, r0, r1
 8101746:	ec43 2b17 	vmov	d7, r2, r3
}
 810174a:	eeb0 0a44 	vmov.f32	s0, s8
 810174e:	eef0 0a64 	vmov.f32	s1, s9
 8101752:	eeb0 1a45 	vmov.f32	s2, s10
 8101756:	eef0 1a65 	vmov.f32	s3, s11
 810175a:	eeb0 2a46 	vmov.f32	s4, s12
 810175e:	eef0 2a66 	vmov.f32	s5, s13
 8101762:	eeb0 3a47 	vmov.f32	s6, s14
 8101766:	eef0 3a67 	vmov.f32	s7, s15
 810176a:	3740      	adds	r7, #64	@ 0x40
 810176c:	46bd      	mov	sp, r7
 810176e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08101774 <bno055_assignI2C>:
  uint8_t axisMapSign = (axis.x_sign << 2) | (axis.y_sign << 1) | (axis.z_sign);
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8101774:	b480      	push	{r7}
 8101776:	b083      	sub	sp, #12
 8101778:	af00      	add	r7, sp, #0
 810177a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 810177c:	4a04      	ldr	r2, [pc, #16]	@ (8101790 <bno055_assignI2C+0x1c>)
 810177e:	687b      	ldr	r3, [r7, #4]
 8101780:	6013      	str	r3, [r2, #0]
}
 8101782:	bf00      	nop
 8101784:	370c      	adds	r7, #12
 8101786:	46bd      	mov	sp, r7
 8101788:	f85d 7b04 	ldr.w	r7, [sp], #4
 810178c:	4770      	bx	lr
 810178e:	bf00      	nop
 8101790:	10000214 	.word	0x10000214

08101794 <bno055_delay>:

void bno055_delay(int time) {
 8101794:	b580      	push	{r7, lr}
 8101796:	b082      	sub	sp, #8
 8101798:	af00      	add	r7, sp, #0
 810179a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 810179c:	687b      	ldr	r3, [r7, #4]
 810179e:	4618      	mov	r0, r3
 81017a0:	f002 faaa 	bl	8103cf8 <HAL_Delay>
#endif
}
 81017a4:	bf00      	nop
 81017a6:	3708      	adds	r7, #8
 81017a8:	46bd      	mov	sp, r7
 81017aa:	bd80      	pop	{r7, pc}

081017ac <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 81017ac:	b580      	push	{r7, lr}
 81017ae:	b088      	sub	sp, #32
 81017b0:	af02      	add	r7, sp, #8
 81017b2:	4603      	mov	r3, r0
 81017b4:	460a      	mov	r2, r1
 81017b6:	71fb      	strb	r3, [r7, #7]
 81017b8:	4613      	mov	r3, r2
 81017ba:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 81017bc:	79fb      	ldrb	r3, [r7, #7]
 81017be:	733b      	strb	r3, [r7, #12]
 81017c0:	79bb      	ldrb	r3, [r7, #6]
 81017c2:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 81017c4:	4b53      	ldr	r3, [pc, #332]	@ (8101914 <bno055_writeData+0x168>)
 81017c6:	6818      	ldr	r0, [r3, #0]
 81017c8:	f107 020c 	add.w	r2, r7, #12
 81017cc:	230a      	movs	r3, #10
 81017ce:	9300      	str	r3, [sp, #0]
 81017d0:	2302      	movs	r3, #2
 81017d2:	2150      	movs	r1, #80	@ 0x50
 81017d4:	f002 fe24 	bl	8104420 <HAL_I2C_Master_Transmit>
 81017d8:	4603      	mov	r3, r0
 81017da:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);

  if (status == HAL_OK) {
 81017dc:	7dfb      	ldrb	r3, [r7, #23]
 81017de:	2b00      	cmp	r3, #0
 81017e0:	f000 8092 	beq.w	8101908 <bno055_writeData+0x15c>
    return;
  }

  if (status == HAL_ERROR) {
 81017e4:	7dfb      	ldrb	r3, [r7, #23]
 81017e6:	2b01      	cmp	r3, #1
 81017e8:	d103      	bne.n	81017f2 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 81017ea:	484b      	ldr	r0, [pc, #300]	@ (8101918 <bno055_writeData+0x16c>)
 81017ec:	f008 ff2c 	bl	810a648 <puts>
 81017f0:	e012      	b.n	8101818 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 81017f2:	7dfb      	ldrb	r3, [r7, #23]
 81017f4:	2b03      	cmp	r3, #3
 81017f6:	d103      	bne.n	8101800 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 81017f8:	4848      	ldr	r0, [pc, #288]	@ (810191c <bno055_writeData+0x170>)
 81017fa:	f008 ff25 	bl	810a648 <puts>
 81017fe:	e00b      	b.n	8101818 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8101800:	7dfb      	ldrb	r3, [r7, #23]
 8101802:	2b02      	cmp	r3, #2
 8101804:	d103      	bne.n	810180e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8101806:	4846      	ldr	r0, [pc, #280]	@ (8101920 <bno055_writeData+0x174>)
 8101808:	f008 ff1e 	bl	810a648 <puts>
 810180c:	e004      	b.n	8101818 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 810180e:	7dfb      	ldrb	r3, [r7, #23]
 8101810:	4619      	mov	r1, r3
 8101812:	4844      	ldr	r0, [pc, #272]	@ (8101924 <bno055_writeData+0x178>)
 8101814:	f008 feb0 	bl	810a578 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8101818:	4b3e      	ldr	r3, [pc, #248]	@ (8101914 <bno055_writeData+0x168>)
 810181a:	681b      	ldr	r3, [r3, #0]
 810181c:	4618      	mov	r0, r3
 810181e:	f003 f81b 	bl	8104858 <HAL_I2C_GetError>
 8101822:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8101824:	693b      	ldr	r3, [r7, #16]
 8101826:	2b00      	cmp	r3, #0
 8101828:	d070      	beq.n	810190c <bno055_writeData+0x160>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 810182a:	693b      	ldr	r3, [r7, #16]
 810182c:	2b01      	cmp	r3, #1
 810182e:	d103      	bne.n	8101838 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8101830:	483d      	ldr	r0, [pc, #244]	@ (8101928 <bno055_writeData+0x17c>)
 8101832:	f008 ff09 	bl	810a648 <puts>
 8101836:	e021      	b.n	810187c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8101838:	693b      	ldr	r3, [r7, #16]
 810183a:	2b02      	cmp	r3, #2
 810183c:	d103      	bne.n	8101846 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 810183e:	483b      	ldr	r0, [pc, #236]	@ (810192c <bno055_writeData+0x180>)
 8101840:	f008 ff02 	bl	810a648 <puts>
 8101844:	e01a      	b.n	810187c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8101846:	693b      	ldr	r3, [r7, #16]
 8101848:	2b04      	cmp	r3, #4
 810184a:	d103      	bne.n	8101854 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 810184c:	4838      	ldr	r0, [pc, #224]	@ (8101930 <bno055_writeData+0x184>)
 810184e:	f008 fefb 	bl	810a648 <puts>
 8101852:	e013      	b.n	810187c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8101854:	693b      	ldr	r3, [r7, #16]
 8101856:	2b08      	cmp	r3, #8
 8101858:	d103      	bne.n	8101862 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 810185a:	4836      	ldr	r0, [pc, #216]	@ (8101934 <bno055_writeData+0x188>)
 810185c:	f008 fef4 	bl	810a648 <puts>
 8101860:	e00c      	b.n	810187c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8101862:	693b      	ldr	r3, [r7, #16]
 8101864:	2b10      	cmp	r3, #16
 8101866:	d103      	bne.n	8101870 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8101868:	4833      	ldr	r0, [pc, #204]	@ (8101938 <bno055_writeData+0x18c>)
 810186a:	f008 feed 	bl	810a648 <puts>
 810186e:	e005      	b.n	810187c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8101870:	693b      	ldr	r3, [r7, #16]
 8101872:	2b20      	cmp	r3, #32
 8101874:	d102      	bne.n	810187c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8101876:	4831      	ldr	r0, [pc, #196]	@ (810193c <bno055_writeData+0x190>)
 8101878:	f008 fee6 	bl	810a648 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 810187c:	4b25      	ldr	r3, [pc, #148]	@ (8101914 <bno055_writeData+0x168>)
 810187e:	681b      	ldr	r3, [r3, #0]
 8101880:	4618      	mov	r0, r3
 8101882:	f002 ffdb 	bl	810483c <HAL_I2C_GetState>
 8101886:	4603      	mov	r3, r0
 8101888:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 810188a:	7bfb      	ldrb	r3, [r7, #15]
 810188c:	2b00      	cmp	r3, #0
 810188e:	d103      	bne.n	8101898 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8101890:	482b      	ldr	r0, [pc, #172]	@ (8101940 <bno055_writeData+0x194>)
 8101892:	f008 fed9 	bl	810a648 <puts>
 8101896:	e03a      	b.n	810190e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_READY) {
 8101898:	7bfb      	ldrb	r3, [r7, #15]
 810189a:	2b20      	cmp	r3, #32
 810189c:	d103      	bne.n	81018a6 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 810189e:	4828      	ldr	r0, [pc, #160]	@ (8101940 <bno055_writeData+0x194>)
 81018a0:	f008 fed2 	bl	810a648 <puts>
 81018a4:	e033      	b.n	810190e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY) {
 81018a6:	7bfb      	ldrb	r3, [r7, #15]
 81018a8:	2b24      	cmp	r3, #36	@ 0x24
 81018aa:	d103      	bne.n	81018b4 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 81018ac:	4825      	ldr	r0, [pc, #148]	@ (8101944 <bno055_writeData+0x198>)
 81018ae:	f008 fecb 	bl	810a648 <puts>
 81018b2:	e02c      	b.n	810190e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 81018b4:	7bfb      	ldrb	r3, [r7, #15]
 81018b6:	2b21      	cmp	r3, #33	@ 0x21
 81018b8:	d103      	bne.n	81018c2 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 81018ba:	4823      	ldr	r0, [pc, #140]	@ (8101948 <bno055_writeData+0x19c>)
 81018bc:	f008 fec4 	bl	810a648 <puts>
 81018c0:	e025      	b.n	810190e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 81018c2:	7bfb      	ldrb	r3, [r7, #15]
 81018c4:	2b22      	cmp	r3, #34	@ 0x22
 81018c6:	d103      	bne.n	81018d0 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 81018c8:	4820      	ldr	r0, [pc, #128]	@ (810194c <bno055_writeData+0x1a0>)
 81018ca:	f008 febd 	bl	810a648 <puts>
 81018ce:	e01e      	b.n	810190e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 81018d0:	7bfb      	ldrb	r3, [r7, #15]
 81018d2:	2b28      	cmp	r3, #40	@ 0x28
 81018d4:	d103      	bne.n	81018de <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 81018d6:	481e      	ldr	r0, [pc, #120]	@ (8101950 <bno055_writeData+0x1a4>)
 81018d8:	f008 feb6 	bl	810a648 <puts>
 81018dc:	e017      	b.n	810190e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 81018de:	7bfb      	ldrb	r3, [r7, #15]
 81018e0:	2b29      	cmp	r3, #41	@ 0x29
 81018e2:	d103      	bne.n	81018ec <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 81018e4:	481b      	ldr	r0, [pc, #108]	@ (8101954 <bno055_writeData+0x1a8>)
 81018e6:	f008 feaf 	bl	810a648 <puts>
 81018ea:	e010      	b.n	810190e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 81018ec:	7bfb      	ldrb	r3, [r7, #15]
 81018ee:	2b2a      	cmp	r3, #42	@ 0x2a
 81018f0:	d103      	bne.n	81018fa <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 81018f2:	4819      	ldr	r0, [pc, #100]	@ (8101958 <bno055_writeData+0x1ac>)
 81018f4:	f008 fea8 	bl	810a648 <puts>
 81018f8:	e009      	b.n	810190e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_ABORT) {
 81018fa:	7bfb      	ldrb	r3, [r7, #15]
 81018fc:	2b60      	cmp	r3, #96	@ 0x60
 81018fe:	d106      	bne.n	810190e <bno055_writeData+0x162>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8101900:	4816      	ldr	r0, [pc, #88]	@ (810195c <bno055_writeData+0x1b0>)
 8101902:	f008 fea1 	bl	810a648 <puts>
 8101906:	e002      	b.n	810190e <bno055_writeData+0x162>
    return;
 8101908:	bf00      	nop
 810190a:	e000      	b.n	810190e <bno055_writeData+0x162>
    return;
 810190c:	bf00      	nop
//  } else if (state == HAL_I2C_STATE_ERROR) {
//    printf("HAL_I2C_STATE_ERROR\r\n");
}
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 810190e:	3718      	adds	r7, #24
 8101910:	46bd      	mov	sp, r7
 8101912:	bd80      	pop	{r7, pc}
 8101914:	10000214 	.word	0x10000214
 8101918:	0810e1b8 	.word	0x0810e1b8
 810191c:	0810e1dc 	.word	0x0810e1dc
 8101920:	0810e204 	.word	0x0810e204
 8101924:	0810e228 	.word	0x0810e228
 8101928:	0810e240 	.word	0x0810e240
 810192c:	0810e254 	.word	0x0810e254
 8101930:	0810e268 	.word	0x0810e268
 8101934:	0810e27c 	.word	0x0810e27c
 8101938:	0810e290 	.word	0x0810e290
 810193c:	0810e2a4 	.word	0x0810e2a4
 8101940:	0810e2bc 	.word	0x0810e2bc
 8101944:	0810e2d4 	.word	0x0810e2d4
 8101948:	0810e2e8 	.word	0x0810e2e8
 810194c:	0810e300 	.word	0x0810e300
 8101950:	0810e318 	.word	0x0810e318
 8101954:	0810e330 	.word	0x0810e330
 8101958:	0810e350 	.word	0x0810e350
 810195c:	0810e370 	.word	0x0810e370

08101960 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8101960:	b580      	push	{r7, lr}
 8101962:	b086      	sub	sp, #24
 8101964:	af02      	add	r7, sp, #8
 8101966:	4603      	mov	r3, r0
 8101968:	6039      	str	r1, [r7, #0]
 810196a:	71fb      	strb	r3, [r7, #7]
 810196c:	4613      	mov	r3, r2
 810196e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8101970:	4b1c      	ldr	r3, [pc, #112]	@ (81019e4 <bno055_readData+0x84>)
 8101972:	6818      	ldr	r0, [r3, #0]
 8101974:	1dfa      	adds	r2, r7, #7
 8101976:	2364      	movs	r3, #100	@ 0x64
 8101978:	9300      	str	r3, [sp, #0]
 810197a:	2301      	movs	r3, #1
 810197c:	2150      	movs	r1, #80	@ 0x50
 810197e:	f002 fd4f 	bl	8104420 <HAL_I2C_Master_Transmit>
 8101982:	4603      	mov	r3, r0
 8101984:	73fb      	strb	r3, [r7, #15]
                          100);
	ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8101986:	4b17      	ldr	r3, [pc, #92]	@ (81019e4 <bno055_readData+0x84>)
 8101988:	6818      	ldr	r0, [r3, #0]
 810198a:	79bb      	ldrb	r3, [r7, #6]
 810198c:	b29b      	uxth	r3, r3
 810198e:	2264      	movs	r2, #100	@ 0x64
 8101990:	9200      	str	r2, [sp, #0]
 8101992:	683a      	ldr	r2, [r7, #0]
 8101994:	2150      	movs	r1, #80	@ 0x50
 8101996:	f002 fe5b 	bl	8104650 <HAL_I2C_Master_Receive>
 810199a:	4603      	mov	r3, r0
 810199c:	73fb      	strb	r3, [r7, #15]
                         100);
	  if (ret == HAL_OK) {
 810199e:	7bfb      	ldrb	r3, [r7, #15]
 81019a0:	2b00      	cmp	r3, #0
 81019a2:	d01a      	beq.n	81019da <bno055_readData+0x7a>
	    return;
	  }

	  if (ret == HAL_ERROR) {
 81019a4:	7bfb      	ldrb	r3, [r7, #15]
 81019a6:	2b01      	cmp	r3, #1
 81019a8:	d103      	bne.n	81019b2 <bno055_readData+0x52>
	    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 81019aa:	480f      	ldr	r0, [pc, #60]	@ (81019e8 <bno055_readData+0x88>)
 81019ac:	f008 fe4c 	bl	810a648 <puts>
 81019b0:	e014      	b.n	81019dc <bno055_readData+0x7c>
	  } else if (ret == HAL_TIMEOUT) {
 81019b2:	7bfb      	ldrb	r3, [r7, #15]
 81019b4:	2b03      	cmp	r3, #3
 81019b6:	d103      	bne.n	81019c0 <bno055_readData+0x60>
	    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 81019b8:	480c      	ldr	r0, [pc, #48]	@ (81019ec <bno055_readData+0x8c>)
 81019ba:	f008 fe45 	bl	810a648 <puts>
 81019be:	e00d      	b.n	81019dc <bno055_readData+0x7c>
	  } else if (ret == HAL_BUSY) {
 81019c0:	7bfb      	ldrb	r3, [r7, #15]
 81019c2:	2b02      	cmp	r3, #2
 81019c4:	d103      	bne.n	81019ce <bno055_readData+0x6e>
	    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 81019c6:	480a      	ldr	r0, [pc, #40]	@ (81019f0 <bno055_readData+0x90>)
 81019c8:	f008 fe3e 	bl	810a648 <puts>
 81019cc:	e006      	b.n	81019dc <bno055_readData+0x7c>
	  } else {
	    printf("Unknown status data %d", ret);
 81019ce:	7bfb      	ldrb	r3, [r7, #15]
 81019d0:	4619      	mov	r1, r3
 81019d2:	4808      	ldr	r0, [pc, #32]	@ (81019f4 <bno055_readData+0x94>)
 81019d4:	f008 fdd0 	bl	810a578 <iprintf>
 81019d8:	e000      	b.n	81019dc <bno055_readData+0x7c>
	    return;
 81019da:	bf00      	nop
	  }
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 81019dc:	3710      	adds	r7, #16
 81019de:	46bd      	mov	sp, r7
 81019e0:	bd80      	pop	{r7, pc}
 81019e2:	bf00      	nop
 81019e4:	10000214 	.word	0x10000214
 81019e8:	0810e1b8 	.word	0x0810e1b8
 81019ec:	0810e1dc 	.word	0x0810e1dc
 81019f0:	0810e204 	.word	0x0810e204
 81019f4:	0810e228 	.word	0x0810e228

081019f8 <cholesky_decompose_lower>:
* \return Zero in case of success, nonzero if the matrix is not positive semi-definite.
*
* Kudos: https://code.google.com/p/efficient-java-matrix-library
*/
int cholesky_decompose_lower(register const matrix_t *const mat)
{
 81019f8:	b580      	push	{r7, lr}
 81019fa:	b08a      	sub	sp, #40	@ 0x28
 81019fc:	af00      	add	r7, sp, #0
 81019fe:	4603      	mov	r3, r0
    uint_fast8_t i, j;
    uint_fast8_t n = mat->rows;
 8101a00:	681a      	ldr	r2, [r3, #0]
 8101a02:	60fa      	str	r2, [r7, #12]
    matrix_data_t *t = mat->data;
 8101a04:	689a      	ldr	r2, [r3, #8]
 8101a06:	60ba      	str	r2, [r7, #8]

    matrix_data_t el_ii;
    matrix_data_t div_el_ii = 0;
 8101a08:	f04f 0200 	mov.w	r2, #0
 8101a0c:	61fa      	str	r2, [r7, #28]

    assert(mat != (matrix_t*)0);
 8101a0e:	2b00      	cmp	r3, #0
 8101a10:	d105      	bne.n	8101a1e <cholesky_decompose_lower+0x26>
 8101a12:	4b67      	ldr	r3, [pc, #412]	@ (8101bb0 <cholesky_decompose_lower+0x1b8>)
 8101a14:	4a67      	ldr	r2, [pc, #412]	@ (8101bb4 <cholesky_decompose_lower+0x1bc>)
 8101a16:	211f      	movs	r1, #31
 8101a18:	4867      	ldr	r0, [pc, #412]	@ (8101bb8 <cholesky_decompose_lower+0x1c0>)
 8101a1a:	f007 fe4f 	bl	81096bc <__assert_func>
    assert(mat->rows == mat->cols);
 8101a1e:	6819      	ldr	r1, [r3, #0]
 8101a20:	685a      	ldr	r2, [r3, #4]
 8101a22:	4291      	cmp	r1, r2
 8101a24:	d005      	beq.n	8101a32 <cholesky_decompose_lower+0x3a>
 8101a26:	4b65      	ldr	r3, [pc, #404]	@ (8101bbc <cholesky_decompose_lower+0x1c4>)
 8101a28:	4a62      	ldr	r2, [pc, #392]	@ (8101bb4 <cholesky_decompose_lower+0x1bc>)
 8101a2a:	2120      	movs	r1, #32
 8101a2c:	4862      	ldr	r0, [pc, #392]	@ (8101bb8 <cholesky_decompose_lower+0x1c0>)
 8101a2e:	f007 fe45 	bl	81096bc <__assert_func>
    assert(mat->rows > 0);
 8101a32:	681b      	ldr	r3, [r3, #0]
 8101a34:	2b00      	cmp	r3, #0
 8101a36:	d105      	bne.n	8101a44 <cholesky_decompose_lower+0x4c>
 8101a38:	4b61      	ldr	r3, [pc, #388]	@ (8101bc0 <cholesky_decompose_lower+0x1c8>)
 8101a3a:	4a5e      	ldr	r2, [pc, #376]	@ (8101bb4 <cholesky_decompose_lower+0x1bc>)
 8101a3c:	2121      	movs	r1, #33	@ 0x21
 8101a3e:	485e      	ldr	r0, [pc, #376]	@ (8101bb8 <cholesky_decompose_lower+0x1c0>)
 8101a40:	f007 fe3c 	bl	81096bc <__assert_func>

    for( i = 0; i < n; ++i )
 8101a44:	2300      	movs	r3, #0
 8101a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8101a48:	e087      	b.n	8101b5a <cholesky_decompose_lower+0x162>
    {
        for( j = i; j < n; ++j )
 8101a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101a4c:	623b      	str	r3, [r7, #32]
 8101a4e:	e07c      	b.n	8101b4a <cholesky_decompose_lower+0x152>
        {
            matrix_data_t sum = t[i*n+j];
 8101a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101a52:	68fa      	ldr	r2, [r7, #12]
 8101a54:	fb03 f202 	mul.w	r2, r3, r2
 8101a58:	6a3b      	ldr	r3, [r7, #32]
 8101a5a:	4413      	add	r3, r2
 8101a5c:	009b      	lsls	r3, r3, #2
 8101a5e:	68ba      	ldr	r2, [r7, #8]
 8101a60:	4413      	add	r3, r2
 8101a62:	681b      	ldr	r3, [r3, #0]
 8101a64:	61bb      	str	r3, [r7, #24]

            uint_fast16_t iEl = i*n;
 8101a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101a68:	68fa      	ldr	r2, [r7, #12]
 8101a6a:	fb02 f303 	mul.w	r3, r2, r3
 8101a6e:	617b      	str	r3, [r7, #20]
            uint_fast16_t jEl = j*n;
 8101a70:	6a3b      	ldr	r3, [r7, #32]
 8101a72:	68fa      	ldr	r2, [r7, #12]
 8101a74:	fb02 f303 	mul.w	r3, r2, r3
 8101a78:	613b      	str	r3, [r7, #16]
            uint_fast16_t end = iEl+i;
 8101a7a:	697a      	ldr	r2, [r7, #20]
 8101a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101a7e:	4413      	add	r3, r2
 8101a80:	607b      	str	r3, [r7, #4]
            // k = 0:i-1
            for( ; iEl<end; ++iEl,++jEl )
 8101a82:	e019      	b.n	8101ab8 <cholesky_decompose_lower+0xc0>
            {
                // sum -= el[i*n+k]*el[j*n+k];
                sum -= t[iEl]* t[jEl];
 8101a84:	697b      	ldr	r3, [r7, #20]
 8101a86:	009b      	lsls	r3, r3, #2
 8101a88:	68ba      	ldr	r2, [r7, #8]
 8101a8a:	4413      	add	r3, r2
 8101a8c:	ed93 7a00 	vldr	s14, [r3]
 8101a90:	693b      	ldr	r3, [r7, #16]
 8101a92:	009b      	lsls	r3, r3, #2
 8101a94:	68ba      	ldr	r2, [r7, #8]
 8101a96:	4413      	add	r3, r2
 8101a98:	edd3 7a00 	vldr	s15, [r3]
 8101a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101aa0:	ed97 7a06 	vldr	s14, [r7, #24]
 8101aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101aa8:	edc7 7a06 	vstr	s15, [r7, #24]
            for( ; iEl<end; ++iEl,++jEl )
 8101aac:	697b      	ldr	r3, [r7, #20]
 8101aae:	3301      	adds	r3, #1
 8101ab0:	617b      	str	r3, [r7, #20]
 8101ab2:	693b      	ldr	r3, [r7, #16]
 8101ab4:	3301      	adds	r3, #1
 8101ab6:	613b      	str	r3, [r7, #16]
 8101ab8:	697a      	ldr	r2, [r7, #20]
 8101aba:	687b      	ldr	r3, [r7, #4]
 8101abc:	429a      	cmp	r2, r3
 8101abe:	d3e1      	bcc.n	8101a84 <cholesky_decompose_lower+0x8c>
            }

            if( i == j )
 8101ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101ac2:	6a3b      	ldr	r3, [r7, #32]
 8101ac4:	429a      	cmp	r2, r3
 8101ac6:	d12c      	bne.n	8101b22 <cholesky_decompose_lower+0x12a>
            {
                // is it positive-definite?
                if( sum <= 0.0 ) return 1;
 8101ac8:	edd7 7a06 	vldr	s15, [r7, #24]
 8101acc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101ad4:	d801      	bhi.n	8101ada <cholesky_decompose_lower+0xe2>
 8101ad6:	2301      	movs	r3, #1
 8101ad8:	e066      	b.n	8101ba8 <cholesky_decompose_lower+0x1b0>

                el_ii = (matrix_data_t)sqrt(sum);
 8101ada:	69b8      	ldr	r0, [r7, #24]
 8101adc:	f7fe fdbc 	bl	8100658 <__aeabi_f2d>
 8101ae0:	4602      	mov	r2, r0
 8101ae2:	460b      	mov	r3, r1
 8101ae4:	ec43 2b10 	vmov	d0, r2, r3
 8101ae8:	f00c fa04 	bl	810def4 <sqrt>
 8101aec:	ec53 2b10 	vmov	r2, r3, d0
 8101af0:	4610      	mov	r0, r2
 8101af2:	4619      	mov	r1, r3
 8101af4:	f7ff f900 	bl	8100cf8 <__aeabi_d2f>
 8101af8:	4603      	mov	r3, r0
 8101afa:	603b      	str	r3, [r7, #0]
                t[i*n+i] = el_ii;
 8101afc:	68fb      	ldr	r3, [r7, #12]
 8101afe:	3301      	adds	r3, #1
 8101b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101b02:	fb02 f303 	mul.w	r3, r2, r3
 8101b06:	009b      	lsls	r3, r3, #2
 8101b08:	68ba      	ldr	r2, [r7, #8]
 8101b0a:	4413      	add	r3, r2
 8101b0c:	683a      	ldr	r2, [r7, #0]
 8101b0e:	601a      	str	r2, [r3, #0]
                div_el_ii = (matrix_data_t)1.0/el_ii;
 8101b10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101b14:	ed97 7a00 	vldr	s14, [r7]
 8101b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101b1c:	edc7 7a07 	vstr	s15, [r7, #28]
 8101b20:	e010      	b.n	8101b44 <cholesky_decompose_lower+0x14c>
            }
            else
            {
                t[j*n+i] = sum*div_el_ii;
 8101b22:	6a3b      	ldr	r3, [r7, #32]
 8101b24:	68fa      	ldr	r2, [r7, #12]
 8101b26:	fb03 f202 	mul.w	r2, r3, r2
 8101b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101b2c:	4413      	add	r3, r2
 8101b2e:	009b      	lsls	r3, r3, #2
 8101b30:	68ba      	ldr	r2, [r7, #8]
 8101b32:	4413      	add	r3, r2
 8101b34:	ed97 7a06 	vldr	s14, [r7, #24]
 8101b38:	edd7 7a07 	vldr	s15, [r7, #28]
 8101b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101b40:	edc3 7a00 	vstr	s15, [r3]
        for( j = i; j < n; ++j )
 8101b44:	6a3b      	ldr	r3, [r7, #32]
 8101b46:	3301      	adds	r3, #1
 8101b48:	623b      	str	r3, [r7, #32]
 8101b4a:	6a3a      	ldr	r2, [r7, #32]
 8101b4c:	68fb      	ldr	r3, [r7, #12]
 8101b4e:	429a      	cmp	r2, r3
 8101b50:	f4ff af7e 	bcc.w	8101a50 <cholesky_decompose_lower+0x58>
    for( i = 0; i < n; ++i )
 8101b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101b56:	3301      	adds	r3, #1
 8101b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8101b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101b5c:	68fb      	ldr	r3, [r7, #12]
 8101b5e:	429a      	cmp	r2, r3
 8101b60:	f4ff af73 	bcc.w	8101a4a <cholesky_decompose_lower+0x52>
            }
        }
    }

    // zero the top right corner.
    for( i = 0; i < n; ++i )
 8101b64:	2300      	movs	r3, #0
 8101b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8101b68:	e019      	b.n	8101b9e <cholesky_decompose_lower+0x1a6>
    {
        for( j = i+1; j < n; ++j )
 8101b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101b6c:	3301      	adds	r3, #1
 8101b6e:	623b      	str	r3, [r7, #32]
 8101b70:	e00e      	b.n	8101b90 <cholesky_decompose_lower+0x198>
        {
            t[i*n+j] = 0.0;
 8101b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101b74:	68fa      	ldr	r2, [r7, #12]
 8101b76:	fb03 f202 	mul.w	r2, r3, r2
 8101b7a:	6a3b      	ldr	r3, [r7, #32]
 8101b7c:	4413      	add	r3, r2
 8101b7e:	009b      	lsls	r3, r3, #2
 8101b80:	68ba      	ldr	r2, [r7, #8]
 8101b82:	4413      	add	r3, r2
 8101b84:	f04f 0200 	mov.w	r2, #0
 8101b88:	601a      	str	r2, [r3, #0]
        for( j = i+1; j < n; ++j )
 8101b8a:	6a3b      	ldr	r3, [r7, #32]
 8101b8c:	3301      	adds	r3, #1
 8101b8e:	623b      	str	r3, [r7, #32]
 8101b90:	6a3a      	ldr	r2, [r7, #32]
 8101b92:	68fb      	ldr	r3, [r7, #12]
 8101b94:	429a      	cmp	r2, r3
 8101b96:	d3ec      	bcc.n	8101b72 <cholesky_decompose_lower+0x17a>
    for( i = 0; i < n; ++i )
 8101b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101b9a:	3301      	adds	r3, #1
 8101b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8101b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101ba0:	68fb      	ldr	r3, [r7, #12]
 8101ba2:	429a      	cmp	r2, r3
 8101ba4:	d3e1      	bcc.n	8101b6a <cholesky_decompose_lower+0x172>
        }
    }

    return 0;
 8101ba6:	2300      	movs	r3, #0
}
 8101ba8:	4618      	mov	r0, r3
 8101baa:	3728      	adds	r7, #40	@ 0x28
 8101bac:	46bd      	mov	sp, r7
 8101bae:	bd80      	pop	{r7, pc}
 8101bb0:	0810e66c 	.word	0x0810e66c
 8101bb4:	0810ea48 	.word	0x0810ea48
 8101bb8:	0810e680 	.word	0x0810e680
 8101bbc:	0810e698 	.word	0x0810e698
 8101bc0:	0810e6b0 	.word	0x0810e6b0

08101bc4 <DWM_Init>:
        return HAL_ERROR;

    return HAL_OK;
}*/
// Sostituisci la funzione DWM_Init con questa versione modificata
HAL_StatusTypeDef DWM_Init(UART_HandleTypeDef *huart) {
 8101bc4:	b580      	push	{r7, lr}
 8101bc6:	b084      	sub	sp, #16
 8101bc8:	af00      	add	r7, sp, #0
 8101bca:	6078      	str	r0, [r7, #4]
    // 1. Init hardware
    if(dwm_init() != 0) return HAL_ERROR;
 8101bcc:	f7ff fae2 	bl	8101194 <dwm_init>
 8101bd0:	4603      	mov	r3, r0
 8101bd2:	2b00      	cmp	r3, #0
 8101bd4:	d001      	beq.n	8101bda <DWM_Init+0x16>
 8101bd6:	2301      	movs	r3, #1
 8101bd8:	e017      	b.n	8101c0a <DWM_Init+0x46>

    // 2. Configurazione tag (verificata nel datasheet)
    dwm_cfg_tag_t cfg = {
 8101bda:	4b0e      	ldr	r3, [pc, #56]	@ (8101c14 <DWM_Init+0x50>)
 8101bdc:	681b      	ldr	r3, [r3, #0]
 8101bde:	60fb      	str	r3, [r7, #12]
        .common.uwb_mode = 2,    // DWM_UWB_MODE_ACTIVE
        .common.ble_en = true,
        .meas_mode = 0,          // DWM_MEAS_MODE_TWR
        .loc_engine_en = true
    };
    if(dwm_cfg_tag_set(&cfg) != 0) return HAL_ERROR;
 8101be0:	f107 030c 	add.w	r3, r7, #12
 8101be4:	4618      	mov	r0, r3
 8101be6:	f7ff fae5 	bl	81011b4 <dwm_cfg_tag_set>
 8101bea:	4603      	mov	r3, r0
 8101bec:	2b00      	cmp	r3, #0
 8101bee:	d001      	beq.n	8101bf4 <DWM_Init+0x30>
 8101bf0:	2301      	movs	r3, #1
 8101bf2:	e00a      	b.n	8101c0a <DWM_Init+0x46>

    // 3. Parametri UWB modificati (pg_delay e tx_power ridotto)
    if(dwm_uwb_cfg_set(0xC0, 0x0D0D0D0D) != 0)  // pg_delay=0xC0, tx_power=0x0D0D0D0D
 8101bf4:	f04f 310d 	mov.w	r1, #218959117	@ 0xd0d0d0d
 8101bf8:	20c0      	movs	r0, #192	@ 0xc0
 8101bfa:	f7ff fafb 	bl	81011f4 <dwm_uwb_cfg_set>
 8101bfe:	4603      	mov	r3, r0
 8101c00:	2b00      	cmp	r3, #0
 8101c02:	d001      	beq.n	8101c08 <DWM_Init+0x44>
        return HAL_ERROR;
 8101c04:	2301      	movs	r3, #1
 8101c06:	e000      	b.n	8101c0a <DWM_Init+0x46>

    return HAL_OK;
 8101c08:	2300      	movs	r3, #0
}
 8101c0a:	4618      	mov	r0, r3
 8101c0c:	3710      	adds	r7, #16
 8101c0e:	46bd      	mov	sp, r7
 8101c10:	bd80      	pop	{r7, pc}
 8101c12:	bf00      	nop
 8101c14:	0810e6c0 	.word	0x0810e6c0

08101c18 <DWM_GetDistances>:


HAL_StatusTypeDef DWM_GetDistances(DistanceMeasurement *meas, uint8_t *count) {
 8101c18:	b580      	push	{r7, lr}
 8101c1a:	b09e      	sub	sp, #120	@ 0x78
 8101c1c:	af00      	add	r7, sp, #0
 8101c1e:	6078      	str	r0, [r7, #4]
 8101c20:	6039      	str	r1, [r7, #0]
    dwm_loc_data_t loc;
    *count = 0;
 8101c22:	683b      	ldr	r3, [r7, #0]
 8101c24:	2200      	movs	r2, #0
 8101c26:	701a      	strb	r2, [r3, #0]
    if (dwm_loc_get(&loc) != 0) {
 8101c28:	f107 0308 	add.w	r3, r7, #8
 8101c2c:	4618      	mov	r0, r3
 8101c2e:	f7ff fb05 	bl	810123c <dwm_loc_get>
 8101c32:	4603      	mov	r3, r0
 8101c34:	2b00      	cmp	r3, #0
 8101c36:	d001      	beq.n	8101c3c <DWM_GetDistances+0x24>
            return HAL_ERROR;  // Fallimento UART
 8101c38:	2301      	movs	r3, #1
 8101c3a:	e04f      	b.n	8101cdc <DWM_GetDistances+0xc4>
        }

        *count = loc.anchors.dist.cnt;  // Potrebbe essere 0
 8101c3c:	7b3a      	ldrb	r2, [r7, #12]
 8101c3e:	683b      	ldr	r3, [r7, #0]
 8101c40:	701a      	strb	r2, [r3, #0]
        for(uint8_t i = 0; i < *count; i++) {
 8101c42:	2300      	movs	r3, #0
 8101c44:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8101c48:	e041      	b.n	8101cce <DWM_GetDistances+0xb6>
            meas[i].anchor_id = loc.anchors.dist.addr[i];
 8101c4a:	f897 1077 	ldrb.w	r1, [r7, #119]	@ 0x77
 8101c4e:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8101c52:	4613      	mov	r3, r2
 8101c54:	005b      	lsls	r3, r3, #1
 8101c56:	4413      	add	r3, r2
 8101c58:	009b      	lsls	r3, r3, #2
 8101c5a:	461a      	mov	r2, r3
 8101c5c:	687b      	ldr	r3, [r7, #4]
 8101c5e:	441a      	add	r2, r3
 8101c60:	004b      	lsls	r3, r1, #1
 8101c62:	3378      	adds	r3, #120	@ 0x78
 8101c64:	443b      	add	r3, r7
 8101c66:	f833 3c6a 	ldrh.w	r3, [r3, #-106]
 8101c6a:	8013      	strh	r3, [r2, #0]
            meas[i].distance_m = loc.anchors.dist.dist[i] / 1000.0f;
 8101c6c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8101c70:	3308      	adds	r3, #8
 8101c72:	009b      	lsls	r3, r3, #2
 8101c74:	3378      	adds	r3, #120	@ 0x78
 8101c76:	443b      	add	r3, r7
 8101c78:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8101c7c:	ee07 3a90 	vmov	s15, r3
 8101c80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101c84:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8101c88:	4613      	mov	r3, r2
 8101c8a:	005b      	lsls	r3, r3, #1
 8101c8c:	4413      	add	r3, r2
 8101c8e:	009b      	lsls	r3, r3, #2
 8101c90:	461a      	mov	r2, r3
 8101c92:	687b      	ldr	r3, [r7, #4]
 8101c94:	4413      	add	r3, r2
 8101c96:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8101ce4 <DWM_GetDistances+0xcc>
 8101c9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101c9e:	edc3 7a01 	vstr	s15, [r3, #4]
            meas[i].quality = loc.anchors.dist.qf[i];
 8101ca2:	f897 1077 	ldrb.w	r1, [r7, #119]	@ 0x77
 8101ca6:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8101caa:	4613      	mov	r3, r2
 8101cac:	005b      	lsls	r3, r3, #1
 8101cae:	4413      	add	r3, r2
 8101cb0:	009b      	lsls	r3, r3, #2
 8101cb2:	461a      	mov	r2, r3
 8101cb4:	687b      	ldr	r3, [r7, #4]
 8101cb6:	4413      	add	r3, r2
 8101cb8:	f101 0278 	add.w	r2, r1, #120	@ 0x78
 8101cbc:	443a      	add	r2, r7
 8101cbe:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8101cc2:	721a      	strb	r2, [r3, #8]
        for(uint8_t i = 0; i < *count; i++) {
 8101cc4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8101cc8:	3301      	adds	r3, #1
 8101cca:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8101cce:	683b      	ldr	r3, [r7, #0]
 8101cd0:	781b      	ldrb	r3, [r3, #0]
 8101cd2:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8101cd6:	429a      	cmp	r2, r3
 8101cd8:	d3b7      	bcc.n	8101c4a <DWM_GetDistances+0x32>
        meas[i].anchor_id = loc.anchors.dist.addr[i];
        meas[i].distance_m = loc.anchors.dist.dist[i] / 1000.0f;
        meas[i].quality = loc.anchors.dist.qf[i];
    }*/

    return HAL_OK;
 8101cda:	2300      	movs	r3, #0
}
 8101cdc:	4618      	mov	r0, r3
 8101cde:	3778      	adds	r7, #120	@ 0x78
 8101ce0:	46bd      	mov	sp, r7
 8101ce2:	bd80      	pop	{r7, pc}
 8101ce4:	447a0000 	.word	0x447a0000

08101ce8 <kalman_measurement_initialize>:
	    matrix_data_t *aux,
	    matrix_data_t *S_inv,
	    matrix_data_t *temp_HP,
	    matrix_data_t *temp_PHt,
	    matrix_data_t *temp_KHP)
{
 8101ce8:	b580      	push	{r7, lr}
 8101cea:	b084      	sub	sp, #16
 8101cec:	af00      	add	r7, sp, #0
 8101cee:	60f8      	str	r0, [r7, #12]
 8101cf0:	60b9      	str	r1, [r7, #8]
 8101cf2:	607a      	str	r2, [r7, #4]
 8101cf4:	603b      	str	r3, [r7, #0]
    matrix_init(&kfm->H, num_measurements, num_states, H); // Usa H definita altrove
 8101cf6:	68fb      	ldr	r3, [r7, #12]
 8101cf8:	f103 000c 	add.w	r0, r3, #12
 8101cfc:	683b      	ldr	r3, [r7, #0]
 8101cfe:	68ba      	ldr	r2, [r7, #8]
 8101d00:	6879      	ldr	r1, [r7, #4]
 8101d02:	f000 ffc7 	bl	8102c94 <matrix_init>
    matrix_init(&kfm->R, num_measurements, num_measurements, R); // Usa R definita altrove
 8101d06:	68fb      	ldr	r3, [r7, #12]
 8101d08:	f103 0018 	add.w	r0, r3, #24
 8101d0c:	69fb      	ldr	r3, [r7, #28]
 8101d0e:	687a      	ldr	r2, [r7, #4]
 8101d10:	6879      	ldr	r1, [r7, #4]
 8101d12:	f000 ffbf 	bl	8102c94 <matrix_init>
    matrix_init(&kfm->z, num_measurements, 1, z); // Usa z definito altrove
 8101d16:	68f8      	ldr	r0, [r7, #12]
 8101d18:	69bb      	ldr	r3, [r7, #24]
 8101d1a:	2201      	movs	r2, #1
 8101d1c:	6879      	ldr	r1, [r7, #4]
 8101d1e:	f000 ffb9 	bl	8102c94 <matrix_init>

    matrix_init(&kfm->K, num_states, num_measurements, K);
 8101d22:	68fb      	ldr	r3, [r7, #12]
 8101d24:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8101d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101d2a:	687a      	ldr	r2, [r7, #4]
 8101d2c:	68b9      	ldr	r1, [r7, #8]
 8101d2e:	f000 ffb1 	bl	8102c94 <matrix_init>
    matrix_init(&kfm->S, num_measurements, num_measurements, S);
 8101d32:	68fb      	ldr	r3, [r7, #12]
 8101d34:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8101d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101d3a:	687a      	ldr	r2, [r7, #4]
 8101d3c:	6879      	ldr	r1, [r7, #4]
 8101d3e:	f000 ffa9 	bl	8102c94 <matrix_init>
    matrix_init(&kfm->y, num_measurements, 1, y);
 8101d42:	68fb      	ldr	r3, [r7, #12]
 8101d44:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8101d48:	6a3b      	ldr	r3, [r7, #32]
 8101d4a:	2201      	movs	r2, #1
 8101d4c:	6879      	ldr	r1, [r7, #4]
 8101d4e:	f000 ffa1 	bl	8102c94 <matrix_init>

    // set auxiliary vector
    kfm->temporary.aux = aux;
 8101d52:	68fb      	ldr	r3, [r7, #12]
 8101d54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101d56:	649a      	str	r2, [r3, #72]	@ 0x48

    // set inverted S matrix
    matrix_init(&kfm->temporary.S_inv, num_measurements, num_measurements, S_inv);
 8101d58:	68fb      	ldr	r3, [r7, #12]
 8101d5a:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8101d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101d60:	687a      	ldr	r2, [r7, #4]
 8101d62:	6879      	ldr	r1, [r7, #4]
 8101d64:	f000 ff96 	bl	8102c94 <matrix_init>

    // set temporary HxP matrix
    matrix_init(&kfm->temporary.HP, num_measurements, num_states, temp_HP);
 8101d68:	68fb      	ldr	r3, [r7, #12]
 8101d6a:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8101d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101d70:	68ba      	ldr	r2, [r7, #8]
 8101d72:	6879      	ldr	r1, [r7, #4]
 8101d74:	f000 ff8e 	bl	8102c94 <matrix_init>

    // set temporary PxH' matrix
    matrix_init(&kfm->temporary.PHt, num_states, num_measurements, temp_PHt);
 8101d78:	68fb      	ldr	r3, [r7, #12]
 8101d7a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8101d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101d80:	687a      	ldr	r2, [r7, #4]
 8101d82:	68b9      	ldr	r1, [r7, #8]
 8101d84:	f000 ff86 	bl	8102c94 <matrix_init>

    // set temporary KxHxP matrix
    matrix_init(&kfm->temporary.KHP, num_states, num_states, temp_KHP);
 8101d88:	68fb      	ldr	r3, [r7, #12]
 8101d8a:	f103 0064 	add.w	r0, r3, #100	@ 0x64
 8101d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8101d90:	68ba      	ldr	r2, [r7, #8]
 8101d92:	68b9      	ldr	r1, [r7, #8]
 8101d94:	f000 ff7e 	bl	8102c94 <matrix_init>
}
 8101d98:	bf00      	nop
 8101d9a:	3710      	adds	r7, #16
 8101d9c:	46bd      	mov	sp, r7
 8101d9e:	bd80      	pop	{r7, pc}

08101da0 <kalman_predict_x>:
/*!
* \brief Performs the time update / prediction step of only the state vector
* \param[in] kf The Kalman Filter structure to predict with.
*/
void kalman_predict_x(register kalman_t *const kf)
{
 8101da0:	b580      	push	{r7, lr}
 8101da2:	b084      	sub	sp, #16
 8101da4:	af00      	add	r7, sp, #0
 8101da6:	4603      	mov	r3, r0
    // matrices and vectors
    const matrix_t *RESTRICT const A = &kf->A;
 8101da8:	f103 020c 	add.w	r2, r3, #12
 8101dac:	60fa      	str	r2, [r7, #12]
    matrix_t *RESTRICT const x = &kf->x;
 8101dae:	60bb      	str	r3, [r7, #8]

    // temporaries
    matrix_t *RESTRICT const xpredicted = &kf->temporary.predicted_x;
 8101db0:	334c      	adds	r3, #76	@ 0x4c
 8101db2:	607b      	str	r3, [r7, #4]
    /* Predict next state using system dynamics                             */
    /* x = A*x                                                              */
    /************************************************************************/

    // x = A*x
    matrix_mult_rowvector(A, x, xpredicted);
 8101db4:	687a      	ldr	r2, [r7, #4]
 8101db6:	68b9      	ldr	r1, [r7, #8]
 8101db8:	68f8      	ldr	r0, [r7, #12]
 8101dba:	f001 f9f6 	bl	81031aa <matrix_mult_rowvector>
    matrix_copy(xpredicted, x);
 8101dbe:	68b9      	ldr	r1, [r7, #8]
 8101dc0:	6878      	ldr	r0, [r7, #4]
 8101dc2:	f001 fac1 	bl	8103348 <matrix_copy>
}
 8101dc6:	bf00      	nop
 8101dc8:	3710      	adds	r7, #16
 8101dca:	46bd      	mov	sp, r7
 8101dcc:	bd80      	pop	{r7, pc}

08101dce <kalman_predict_Q>:
/*!
* \brief Performs the time update / prediction step of only the state covariance matrix
* \param[in] kf The Kalman Filter structure to predict with.
*/
void kalman_predict_Q(register kalman_t *const kf)
{
 8101dce:	b590      	push	{r4, r7, lr}
 8101dd0:	b087      	sub	sp, #28
 8101dd2:	af00      	add	r7, sp, #0
 8101dd4:	4604      	mov	r4, r0
    // matrices and vectors
    const matrix_t *RESTRICT const A = &kf->A;
 8101dd6:	f104 030c 	add.w	r3, r4, #12
 8101dda:	617b      	str	r3, [r7, #20]
    const matrix_t *RESTRICT const B = &kf->B;
 8101ddc:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8101de0:	613b      	str	r3, [r7, #16]
    matrix_t *RESTRICT const P = &kf->P;
 8101de2:	f104 0318 	add.w	r3, r4, #24
 8101de6:	60fb      	str	r3, [r7, #12]

    // temporaries
    matrix_data_t *RESTRICT const aux = kf->temporary.aux;
 8101de8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8101dea:	60bb      	str	r3, [r7, #8]
    matrix_t *RESTRICT const P_temp = &kf->temporary.P;
 8101dec:	f104 0358 	add.w	r3, r4, #88	@ 0x58
 8101df0:	607b      	str	r3, [r7, #4]
    matrix_t *RESTRICT const BQ_temp = &kf->temporary.BQ;
 8101df2:	f104 0364 	add.w	r3, r4, #100	@ 0x64
 8101df6:	603b      	str	r3, [r7, #0]
    /* Predict next covariance using system dynamics and input              */
    /* P = A*P*A' + B*Q*B'                                                  */
    /************************************************************************/

    // P = A*P*A'
    matrix_mult(A, P, P_temp, aux);                 // temp = A*P
 8101df8:	68bb      	ldr	r3, [r7, #8]
 8101dfa:	687a      	ldr	r2, [r7, #4]
 8101dfc:	68f9      	ldr	r1, [r7, #12]
 8101dfe:	6978      	ldr	r0, [r7, #20]
 8101e00:	f001 f84a 	bl	8102e98 <matrix_mult>
    matrix_mult_transb(P_temp, A, P);               // P = temp*A'
 8101e04:	68fa      	ldr	r2, [r7, #12]
 8101e06:	6979      	ldr	r1, [r7, #20]
 8101e08:	6878      	ldr	r0, [r7, #4]
 8101e0a:	f001 f8ff 	bl	810300c <matrix_mult_transb>

    // P = P + B*Q*B'
    if (kf->B.rows > 0)
 8101e0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8101e10:	2b00      	cmp	r3, #0
 8101e12:	d00b      	beq.n	8101e2c <kalman_predict_Q+0x5e>
    {
        matrix_mult(B, &kf->Q, BQ_temp, aux);       // temp = B*Q
 8101e14:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8101e18:	68bb      	ldr	r3, [r7, #8]
 8101e1a:	683a      	ldr	r2, [r7, #0]
 8101e1c:	6938      	ldr	r0, [r7, #16]
 8101e1e:	f001 f83b 	bl	8102e98 <matrix_mult>
        matrix_multadd_transb(BQ_temp, B, P);       // P += temp*B'
 8101e22:	68fa      	ldr	r2, [r7, #12]
 8101e24:	6939      	ldr	r1, [r7, #16]
 8101e26:	6838      	ldr	r0, [r7, #0]
 8101e28:	f001 f953 	bl	81030d2 <matrix_multadd_transb>
    }
}
 8101e2c:	bf00      	nop
 8101e2e:	371c      	adds	r7, #28
 8101e30:	46bd      	mov	sp, r7
 8101e32:	bd90      	pop	{r4, r7, pc}

08101e34 <kalman_correct>:
/*!
* \brief Performs the measurement update step.
* \param[in] kf The Kalman Filter structure to correct.
*/
void kalman_correct(kalman_t *kf, kalman_measurement_t *kfm)
{
 8101e34:	b580      	push	{r7, lr}
 8101e36:	b08e      	sub	sp, #56	@ 0x38
 8101e38:	af00      	add	r7, sp, #0
 8101e3a:	6078      	str	r0, [r7, #4]
 8101e3c:	6039      	str	r1, [r7, #0]
    matrix_t *RESTRICT const P = &kf->P;
 8101e3e:	687b      	ldr	r3, [r7, #4]
 8101e40:	3318      	adds	r3, #24
 8101e42:	637b      	str	r3, [r7, #52]	@ 0x34
    const matrix_t *RESTRICT const H = &kfm->H;
 8101e44:	683b      	ldr	r3, [r7, #0]
 8101e46:	330c      	adds	r3, #12
 8101e48:	633b      	str	r3, [r7, #48]	@ 0x30
    matrix_t *RESTRICT const K = &kfm->K;
 8101e4a:	683b      	ldr	r3, [r7, #0]
 8101e4c:	333c      	adds	r3, #60	@ 0x3c
 8101e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    matrix_t *RESTRICT const S = &kfm->S;
 8101e50:	683b      	ldr	r3, [r7, #0]
 8101e52:	3330      	adds	r3, #48	@ 0x30
 8101e54:	62bb      	str	r3, [r7, #40]	@ 0x28
    matrix_t *RESTRICT const y = &kfm->y;
 8101e56:	683b      	ldr	r3, [r7, #0]
 8101e58:	3324      	adds	r3, #36	@ 0x24
 8101e5a:	627b      	str	r3, [r7, #36]	@ 0x24
    matrix_t *RESTRICT const x = &kf->x;
 8101e5c:	687b      	ldr	r3, [r7, #4]
 8101e5e:	623b      	str	r3, [r7, #32]

    // temporaries
    matrix_data_t *RESTRICT const aux = kfm->temporary.aux;
 8101e60:	683b      	ldr	r3, [r7, #0]
 8101e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101e64:	61fb      	str	r3, [r7, #28]
    matrix_t *RESTRICT const Sinv = &kfm->temporary.S_inv;
 8101e66:	683b      	ldr	r3, [r7, #0]
 8101e68:	334c      	adds	r3, #76	@ 0x4c
 8101e6a:	61bb      	str	r3, [r7, #24]
    matrix_t *RESTRICT const temp_HP = &kfm->temporary.HP;
 8101e6c:	683b      	ldr	r3, [r7, #0]
 8101e6e:	3358      	adds	r3, #88	@ 0x58
 8101e70:	617b      	str	r3, [r7, #20]
    matrix_t *RESTRICT const temp_KHP = &kfm->temporary.KHP;
 8101e72:	683b      	ldr	r3, [r7, #0]
 8101e74:	3364      	adds	r3, #100	@ 0x64
 8101e76:	613b      	str	r3, [r7, #16]
    matrix_t *RESTRICT const temp_PHt = &kfm->temporary.PHt;
 8101e78:	683b      	ldr	r3, [r7, #0]
 8101e7a:	3370      	adds	r3, #112	@ 0x70
 8101e7c:	60fb      	str	r3, [r7, #12]
    /* y = z - H*x                                                          */
    /* S = H*P*H' + R                                                       */
    /************************************************************************/

    // y = z - H*x
    matrix_mult_rowvector(H, x, y);
 8101e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101e80:	6a39      	ldr	r1, [r7, #32]
 8101e82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8101e84:	f001 f991 	bl	81031aa <matrix_mult_rowvector>
    matrix_sub_inplace_b(&kfm->z, y);
 8101e88:	683b      	ldr	r3, [r7, #0]
 8101e8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8101e8c:	4618      	mov	r0, r3
 8101e8e:	f001 fa72 	bl	8103376 <matrix_sub_inplace_b>

    // S = H*P*H' + R
    matrix_mult(H, P, temp_HP, aux);            // temp = H*P
 8101e92:	69fb      	ldr	r3, [r7, #28]
 8101e94:	697a      	ldr	r2, [r7, #20]
 8101e96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8101e98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8101e9a:	f000 fffd 	bl	8102e98 <matrix_mult>
    matrix_mult_transb(temp_HP, H, S);          // S = temp*H'
 8101e9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8101ea0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8101ea2:	6978      	ldr	r0, [r7, #20]
 8101ea4:	f001 f8b2 	bl	810300c <matrix_mult_transb>
    matrix_add_inplace(S, &kfm->R);             // S += R
 8101ea8:	683b      	ldr	r3, [r7, #0]
 8101eaa:	3318      	adds	r3, #24
 8101eac:	4619      	mov	r1, r3
 8101eae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8101eb0:	f001 fa93 	bl	81033da <matrix_add_inplace>
    /* Calculate Kalman gain                                                */
    /* K = P*H' * S^-1                                                      */
    /************************************************************************/

    // K = P*H' * S^-1
    cholesky_decompose_lower(S);
 8101eb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8101eb6:	f7ff fd9f 	bl	81019f8 <cholesky_decompose_lower>
    matrix_invert_lower(S, Sinv);               // Sinv = S^-1
 8101eba:	69b9      	ldr	r1, [r7, #24]
 8101ebc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8101ebe:	f000 feff 	bl	8102cc0 <matrix_invert_lower>
    // NOTE that to allow aliasing of Sinv and temp_PHt, a copy must be performed here
    matrix_mult_transb(P, H, temp_PHt);         // temp = P*H'
 8101ec2:	68fa      	ldr	r2, [r7, #12]
 8101ec4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8101ec6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8101ec8:	f001 f8a0 	bl	810300c <matrix_mult_transb>
    matrix_mult(temp_PHt, Sinv, K, aux);        // K = temp*Sinv
 8101ecc:	69fb      	ldr	r3, [r7, #28]
 8101ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101ed0:	69b9      	ldr	r1, [r7, #24]
 8101ed2:	68f8      	ldr	r0, [r7, #12]
 8101ed4:	f000 ffe0 	bl	8102e98 <matrix_mult>
    /* Correct state prediction                                             */
    /* x = x + K*y                                                          */
    /************************************************************************/

    // x = x + K*y
    matrix_multadd_rowvector(K, y, x);
 8101ed8:	6a3a      	ldr	r2, [r7, #32]
 8101eda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8101edc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8101ede:	f001 f9c7 	bl	8103270 <matrix_multadd_rowvector>
    /* P = (I-K*H) * P                                                      */
    /*   = P - K*(H*P)                                                      */
    /************************************************************************/

    // P = P - K*(H*P)
    matrix_mult(H, P, temp_HP, aux);            // temp_HP = H*P
 8101ee2:	69fb      	ldr	r3, [r7, #28]
 8101ee4:	697a      	ldr	r2, [r7, #20]
 8101ee6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8101ee8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8101eea:	f000 ffd5 	bl	8102e98 <matrix_mult>
    matrix_mult(K, temp_HP, temp_KHP, aux);     // temp_KHP = K*temp_HP
 8101eee:	69fb      	ldr	r3, [r7, #28]
 8101ef0:	693a      	ldr	r2, [r7, #16]
 8101ef2:	6979      	ldr	r1, [r7, #20]
 8101ef4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8101ef6:	f000 ffcf 	bl	8102e98 <matrix_mult>
    matrix_sub(P, temp_KHP, P);                 // P -= temp_KHP
 8101efa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8101efc:	6939      	ldr	r1, [r7, #16]
 8101efe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8101f00:	f001 fa9d 	bl	810343e <matrix_sub>
}
 8101f04:	bf00      	nop
 8101f06:	3738      	adds	r7, #56	@ 0x38
 8101f08:	46bd      	mov	sp, r7
 8101f0a:	bd80      	pop	{r7, pc}
 8101f0c:	0000      	movs	r0, r0
	...

08101f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101f14:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8101f18:	af0a      	add	r7, sp, #40	@ 0x28
int main(void)
 8101f1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8101f1e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8

  /* USER CODE BEGIN 1 */
	float pitch, roll, yaw;
		float vel_filtrata;
		float pos_x, pos_y;
		z_data[0] = pitch;
 8101f22:	4a4f      	ldr	r2, [pc, #316]	@ (8102060 <main+0x150>)
 8101f24:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8101f28:	6013      	str	r3, [r2, #0]
		z_data[1] = roll;
 8101f2a:	4a4d      	ldr	r2, [pc, #308]	@ (8102060 <main+0x150>)
 8101f2c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8101f30:	6053      	str	r3, [r2, #4]
		z_data[2] = yaw;
 8101f32:	4a4b      	ldr	r2, [pc, #300]	@ (8102060 <main+0x150>)
 8101f34:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8101f38:	6093      	str	r3, [r2, #8]
		z_data[3] = vel_filtrata;
 8101f3a:	4a49      	ldr	r2, [pc, #292]	@ (8102060 <main+0x150>)
 8101f3c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8101f40:	60d3      	str	r3, [r2, #12]
		z_data[4] = pos_x;
 8101f42:	4a47      	ldr	r2, [pc, #284]	@ (8102060 <main+0x150>)
 8101f44:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8101f48:	6113      	str	r3, [r2, #16]
		z_data[5] = pos_y;
 8101f4a:	4a45      	ldr	r2, [pc, #276]	@ (8102060 <main+0x150>)
 8101f4c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8101f50:	6153      	str	r3, [r2, #20]
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101f52:	4b44      	ldr	r3, [pc, #272]	@ (8102064 <main+0x154>)
 8101f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101f58:	4a42      	ldr	r2, [pc, #264]	@ (8102064 <main+0x154>)
 8101f5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101f62:	4b40      	ldr	r3, [pc, #256]	@ (8102064 <main+0x154>)
 8101f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101f6c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8101f70:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101f74:	2001      	movs	r0, #1
 8101f76:	f002 f9a5 	bl	81042c4 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101f7a:	f003 f831 	bl	8104fe0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101f7e:	2201      	movs	r2, #1
 8101f80:	2102      	movs	r1, #2
 8101f82:	2000      	movs	r0, #0
 8101f84:	f002 ffb2 	bl	8104eec <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101f88:	4b37      	ldr	r3, [pc, #220]	@ (8102068 <main+0x158>)
 8101f8a:	681b      	ldr	r3, [r3, #0]
 8101f8c:	091b      	lsrs	r3, r3, #4
 8101f8e:	f003 030f 	and.w	r3, r3, #15
 8101f92:	2b07      	cmp	r3, #7
 8101f94:	d108      	bne.n	8101fa8 <main+0x98>
 8101f96:	4b35      	ldr	r3, [pc, #212]	@ (810206c <main+0x15c>)
 8101f98:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8101f9c:	4a33      	ldr	r2, [pc, #204]	@ (810206c <main+0x15c>)
 8101f9e:	f043 0301 	orr.w	r3, r3, #1
 8101fa2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8101fa6:	e007      	b.n	8101fb8 <main+0xa8>
 8101fa8:	4b30      	ldr	r3, [pc, #192]	@ (810206c <main+0x15c>)
 8101faa:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8101fae:	4a2f      	ldr	r2, [pc, #188]	@ (810206c <main+0x15c>)
 8101fb0:	f043 0301 	orr.w	r3, r3, #1
 8101fb4:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101fb8:	f001 fdea 	bl	8103b90 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101fbc:	f000 fcca 	bl	8102954 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8101fc0:	f000 fc30 	bl	8102824 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8101fc4:	f000 fc7a 	bl	81028bc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8101fc8:	f000 fad2 	bl	8102570 <MX_I2C1_Init>
  MX_TIM1_Init();
 8101fcc:	f000 fb10 	bl	81025f0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8101fd0:	f000 fb9c 	bl	810270c <MX_TIM4_Init>
  MX_TIM6_Init();
 8101fd4:	f000 fbf0 	bl	81027b8 <MX_TIM6_Init>
                           predictedX,
                           (matrix_data_t*)temp_P,
                           (matrix_data_t*)temp_BQ
                       );
  }
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8101fd8:	2100      	movs	r1, #0
 8101fda:	4825      	ldr	r0, [pc, #148]	@ (8102070 <main+0x160>)
 8101fdc:	f005 f93a 	bl	8107254 <HAL_TIM_PWM_Start>
      TIM1->CCR1=10;
 8101fe0:	4b24      	ldr	r3, [pc, #144]	@ (8102074 <main+0x164>)
 8101fe2:	220a      	movs	r2, #10
 8101fe4:	635a      	str	r2, [r3, #52]	@ 0x34
      HAL_TIM_Base_Start_IT(&htim6);
 8101fe6:	4824      	ldr	r0, [pc, #144]	@ (8102078 <main+0x168>)
 8101fe8:	f005 f864 	bl	81070b4 <HAL_TIM_Base_Start_IT>

      HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8101fec:	213c      	movs	r1, #60	@ 0x3c
 8101fee:	4823      	ldr	r0, [pc, #140]	@ (810207c <main+0x16c>)
 8101ff0:	f005 fae4 	bl	81075bc <HAL_TIM_Encoder_Start>
      bno055_assignI2C(&hi2c1);  // Assegna l'interfaccia I2C all'IMU
 8101ff4:	4822      	ldr	r0, [pc, #136]	@ (8102080 <main+0x170>)
 8101ff6:	f7ff fbbd 	bl	8101774 <bno055_assignI2C>
      bno055_setup();            // Configura l'IMU
 8101ffa:	f7ff fa0b 	bl	8101414 <bno055_setup>
      bno055_setOperationModeNDOF(); // Imposta la modalità NDOF (Fusion Mode)
 8101ffe:	f7ff f9f5 	bl	81013ec <bno055_setOperationModeNDOF>
      printf("Inizializzazione DWM1001...\r\n");
 8102002:	4820      	ldr	r0, [pc, #128]	@ (8102084 <main+0x174>)
 8102004:	f008 fb20 	bl	810a648 <puts>
           if (DWM_Init(&huart2) != HAL_OK) {
 8102008:	481f      	ldr	r0, [pc, #124]	@ (8102088 <main+0x178>)
 810200a:	f7ff fddb 	bl	8101bc4 <DWM_Init>
 810200e:	4603      	mov	r3, r0
 8102010:	2b00      	cmp	r3, #0
 8102012:	d003      	beq.n	810201c <main+0x10c>
                printf("ERRORE: DWM1001 non collegato o inizializzazione fallita!\r\n");
 8102014:	481d      	ldr	r0, [pc, #116]	@ (810208c <main+0x17c>)
 8102016:	f008 fb17 	bl	810a648 <puts>
 810201a:	e002      	b.n	8102022 <main+0x112>
            } else {
                printf("DWM1001 pronto per misurazioni ad alta precisione (1cm)\r\n");
 810201c:	481c      	ldr	r0, [pc, #112]	@ (8102090 <main+0x180>)
 810201e:	f008 fb13 	bl	810a648 <puts>
            }
           printf("Test UART...\r\n");
 8102022:	481c      	ldr	r0, [pc, #112]	@ (8102094 <main+0x184>)
 8102024:	f008 fb10 	bl	810a648 <puts>
               uint8_t test_data[] = {0x55, 0xAA};  // Byte di test (0x55 = 'U', 0xAA = simbolo speciale)
 8102028:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 810202c:	f8a7 31c4 	strh.w	r3, [r7, #452]	@ 0x1c4
               HAL_UART_Transmit(&huart2, test_data, sizeof(test_data), 100);
 8102030:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 8102034:	2364      	movs	r3, #100	@ 0x64
 8102036:	2202      	movs	r2, #2
 8102038:	4813      	ldr	r0, [pc, #76]	@ (8102088 <main+0x178>)
 810203a:	f006 f95f 	bl	81082fc <HAL_UART_Transmit>

               // Opzionale: Verifica ricezione (se il DWM1001 dovrebbe rispondere)
               uint8_t rx_data;
               if(HAL_UART_Receive(&huart2, &rx_data, 1, 100) == HAL_OK) {
 810203e:	f207 11c3 	addw	r1, r7, #451	@ 0x1c3
 8102042:	2364      	movs	r3, #100	@ 0x64
 8102044:	2201      	movs	r2, #1
 8102046:	4810      	ldr	r0, [pc, #64]	@ (8102088 <main+0x178>)
 8102048:	f006 f9e6 	bl	8108418 <HAL_UART_Receive>
 810204c:	4603      	mov	r3, r0
 810204e:	2b00      	cmp	r3, #0
 8102050:	d124      	bne.n	810209c <main+0x18c>
                   printf("Ricevuto byte: 0x%02X\r\n", rx_data);
 8102052:	f897 31c3 	ldrb.w	r3, [r7, #451]	@ 0x1c3
 8102056:	4619      	mov	r1, r3
 8102058:	480f      	ldr	r0, [pc, #60]	@ (8102098 <main+0x188>)
 810205a:	f008 fa8d 	bl	810a578 <iprintf>
 810205e:	e020      	b.n	81020a2 <main+0x192>
 8102060:	100008c4 	.word	0x100008c4
 8102064:	58024400 	.word	0x58024400
 8102068:	e000ed00 	.word	0xe000ed00
 810206c:	58026400 	.word	0x58026400
 8102070:	1000026c 	.word	0x1000026c
 8102074:	40010000 	.word	0x40010000
 8102078:	10000304 	.word	0x10000304
 810207c:	100002b8 	.word	0x100002b8
 8102080:	10000218 	.word	0x10000218
 8102084:	0810e6c4 	.word	0x0810e6c4
 8102088:	10000350 	.word	0x10000350
 810208c:	0810e6e4 	.word	0x0810e6e4
 8102090:	0810e720 	.word	0x0810e720
 8102094:	0810e75c 	.word	0x0810e75c
 8102098:	0810e76c 	.word	0x0810e76c
               } else {
                   printf("Nessun dato ricevuto dal DWM1001!\r\n");
 810209c:	48a8      	ldr	r0, [pc, #672]	@ (8102340 <main+0x430>)
 810209e:	f008 fad3 	bl	810a648 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Fase di predizione
	  kalman_predict_x(&kf);
 81020a2:	48a8      	ldr	r0, [pc, #672]	@ (8102344 <main+0x434>)
 81020a4:	f7ff fe7c 	bl	8101da0 <kalman_predict_x>
	  kalman_predict_Q(&kf);
 81020a8:	48a6      	ldr	r0, [pc, #664]	@ (8102344 <main+0x434>)
 81020aa:	f7ff fe90 	bl	8101dce <kalman_predict_Q>
	  // Riempimento di z_data
	        z_data[0] = pitch;
 81020ae:	4aa6      	ldr	r2, [pc, #664]	@ (8102348 <main+0x438>)
 81020b0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 81020b4:	6013      	str	r3, [r2, #0]
	        z_data[1] = roll;
 81020b6:	4aa4      	ldr	r2, [pc, #656]	@ (8102348 <main+0x438>)
 81020b8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 81020bc:	6053      	str	r3, [r2, #4]
	        z_data[2] = yaw;
 81020be:	4aa2      	ldr	r2, [pc, #648]	@ (8102348 <main+0x438>)
 81020c0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 81020c4:	6093      	str	r3, [r2, #8]
	        z_data[3] = vel_filtrata;
 81020c6:	4aa0      	ldr	r2, [pc, #640]	@ (8102348 <main+0x438>)
 81020c8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 81020cc:	60d3      	str	r3, [r2, #12]
	        z_data[4] = pos_x;
 81020ce:	4a9e      	ldr	r2, [pc, #632]	@ (8102348 <main+0x438>)
 81020d0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 81020d4:	6113      	str	r3, [r2, #16]
	        z_data[5] = pos_y;
 81020d6:	4a9c      	ldr	r2, [pc, #624]	@ (8102348 <main+0x438>)
 81020d8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 81020dc:	6153      	str	r3, [r2, #20]
	        matrix_data_t H_data[6][6] = {
 81020de:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 81020e2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 81020e6:	4618      	mov	r0, r3
 81020e8:	2390      	movs	r3, #144	@ 0x90
 81020ea:	461a      	mov	r2, r3
 81020ec:	2100      	movs	r1, #0
 81020ee:	f008 fbdf 	bl	810a8b0 <memset>
 81020f2:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 81020f6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 81020fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 81020fe:	601a      	str	r2, [r3, #0]
 8102100:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8102104:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8102108:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 810210c:	61da      	str	r2, [r3, #28]
 810210e:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8102112:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8102116:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 810211a:	639a      	str	r2, [r3, #56]	@ 0x38
 810211c:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8102120:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8102124:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8102128:	655a      	str	r2, [r3, #84]	@ 0x54
 810212a:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 810212e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8102132:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8102136:	671a      	str	r2, [r3, #112]	@ 0x70
 8102138:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 810213c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8102140:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8102144:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	            		  {0, 0, 1, 0, 0, 0},
	            		  {0, 0, 0, 1, 0, 0},
	            		  {0, 0, 0, 0, 1, 0},
	            		  {0, 0, 0, 0, 0, 1}
	              };
	        matrix_data_t R_data[6][6] = {
 8102148:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 810214c:	2290      	movs	r2, #144	@ 0x90
 810214e:	2100      	movs	r1, #0
 8102150:	4618      	mov	r0, r3
 8102152:	f008 fbad 	bl	810a8b0 <memset>
 8102156:	4b7d      	ldr	r3, [pc, #500]	@ (810234c <main+0x43c>)
 8102158:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 810215c:	4b7b      	ldr	r3, [pc, #492]	@ (810234c <main+0x43c>)
 810215e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8102162:	4b7a      	ldr	r3, [pc, #488]	@ (810234c <main+0x43c>)
 8102164:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8102168:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 810216c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8102170:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8102174:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8102178:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 810217c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	                    {0,   0,   0.1, 0,   0,   0},  // Rumore posizione Z
	                    {0,   0,   0,   0.5, 0,   0},  // Rumore velocità X
	                    {0,   0,   0,   0,   0.5, 0},  // Rumore velocità Y
	                    {0,   0,   0,   0,   0,   0.5} // Rumore velocità Z
	                };
	        matrix_data_t z_data[NUM_MEASUREMENTS] = {0};
 8102180:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8102184:	2200      	movs	r2, #0
 8102186:	601a      	str	r2, [r3, #0]
 8102188:	605a      	str	r2, [r3, #4]
 810218a:	609a      	str	r2, [r3, #8]
 810218c:	60da      	str	r2, [r3, #12]
 810218e:	611a      	str	r2, [r3, #16]
 8102190:	615a      	str	r2, [r3, #20]
	              // Correzione
	              kalman_measurement_t kfm;
	              kalman_measurement_initialize(
 8102192:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8102196:	f107 0008 	add.w	r0, r7, #8
 810219a:	4b6d      	ldr	r3, [pc, #436]	@ (8102350 <main+0x440>)
 810219c:	9309      	str	r3, [sp, #36]	@ 0x24
 810219e:	4b6d      	ldr	r3, [pc, #436]	@ (8102354 <main+0x444>)
 81021a0:	9308      	str	r3, [sp, #32]
 81021a2:	4b6d      	ldr	r3, [pc, #436]	@ (8102358 <main+0x448>)
 81021a4:	9307      	str	r3, [sp, #28]
 81021a6:	4b6d      	ldr	r3, [pc, #436]	@ (810235c <main+0x44c>)
 81021a8:	9306      	str	r3, [sp, #24]
 81021aa:	4b6d      	ldr	r3, [pc, #436]	@ (8102360 <main+0x450>)
 81021ac:	9305      	str	r3, [sp, #20]
 81021ae:	4b6d      	ldr	r3, [pc, #436]	@ (8102364 <main+0x454>)
 81021b0:	9304      	str	r3, [sp, #16]
 81021b2:	4b6d      	ldr	r3, [pc, #436]	@ (8102368 <main+0x458>)
 81021b4:	9303      	str	r3, [sp, #12]
 81021b6:	4b6d      	ldr	r3, [pc, #436]	@ (810236c <main+0x45c>)
 81021b8:	9302      	str	r3, [sp, #8]
 81021ba:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 81021be:	9301      	str	r3, [sp, #4]
 81021c0:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 81021c4:	9300      	str	r3, [sp, #0]
 81021c6:	4613      	mov	r3, r2
 81021c8:	2206      	movs	r2, #6
 81021ca:	2106      	movs	r1, #6
 81021cc:	f7ff fd8c 	bl	8101ce8 <kalman_measurement_initialize>
	                  (matrix_data_t*)S_inv_data,
	                  (matrix_data_t*)temp_HP_data,
	                  (matrix_data_t*)temp_PHt_data,
	                  (matrix_data_t*)temp_KHP_data
	              );
	              kalman_correct(&kf, &kfm);
 81021d0:	f107 0308 	add.w	r3, r7, #8
 81021d4:	4619      	mov	r1, r3
 81021d6:	485b      	ldr	r0, [pc, #364]	@ (8102344 <main+0x434>)
 81021d8:	f7ff fe2c 	bl	8101e34 <kalman_correct>
	              // Stampa lo stato ogni 10 cicli
	                    static uint8_t counter = 0;
	                    if(++counter >= 10) {
 81021dc:	4b64      	ldr	r3, [pc, #400]	@ (8102370 <main+0x460>)
 81021de:	781b      	ldrb	r3, [r3, #0]
 81021e0:	3301      	adds	r3, #1
 81021e2:	b2da      	uxtb	r2, r3
 81021e4:	4b62      	ldr	r3, [pc, #392]	@ (8102370 <main+0x460>)
 81021e6:	701a      	strb	r2, [r3, #0]
 81021e8:	4b61      	ldr	r3, [pc, #388]	@ (8102370 <main+0x460>)
 81021ea:	781b      	ldrb	r3, [r3, #0]
 81021ec:	2b09      	cmp	r3, #9
 81021ee:	d905      	bls.n	81021fc <main+0x2ec>
	                        print_state(&kf);
 81021f0:	4854      	ldr	r0, [pc, #336]	@ (8102344 <main+0x434>)
 81021f2:	f000 fce7 	bl	8102bc4 <print_state>
	                        counter = 0;
 81021f6:	4b5e      	ldr	r3, [pc, #376]	@ (8102370 <main+0x460>)
 81021f8:	2200      	movs	r2, #0
 81021fa:	701a      	strb	r2, [r3, #0]
	                    }

	                    HAL_Delay(10); // 10ms loop
 81021fc:	200a      	movs	r0, #10
 81021fe:	f001 fd7b 	bl	8103cf8 <HAL_Delay>

	  readImu();
 8102202:	f000 fc2f 	bl	8102a64 <readImu>
	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 8102206:	2120      	movs	r1, #32
 8102208:	485a      	ldr	r0, [pc, #360]	@ (8102374 <main+0x464>)
 810220a:	f002 f841 	bl	8104290 <HAL_GPIO_TogglePin>
	  	  	  HAL_Delay(300);
 810220e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8102212:	f001 fd71 	bl	8103cf8 <HAL_Delay>
	  	  	if (1) {
	  	  	    flag_100ms = 0;
 8102216:	4b58      	ldr	r3, [pc, #352]	@ (8102378 <main+0x468>)
 8102218:	2200      	movs	r2, #0
 810221a:	701a      	strb	r2, [r3, #0]
	  	  	    counts = TIM4->CNT;
 810221c:	4b57      	ldr	r3, [pc, #348]	@ (810237c <main+0x46c>)
 810221e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102220:	461a      	mov	r2, r3
 8102222:	4b57      	ldr	r3, [pc, #348]	@ (8102380 <main+0x470>)
 8102224:	601a      	str	r2, [r3, #0]
	  	  	    dir = (TIM4->CR1 & TIM_CR1_DIR) ? 1 : 0;
 8102226:	4b55      	ldr	r3, [pc, #340]	@ (810237c <main+0x46c>)
 8102228:	681b      	ldr	r3, [r3, #0]
 810222a:	f003 0310 	and.w	r3, r3, #16
 810222e:	2b00      	cmp	r3, #0
 8102230:	bf14      	ite	ne
 8102232:	2301      	movne	r3, #1
 8102234:	2300      	moveq	r3, #0
 8102236:	b2db      	uxtb	r3, r3
 8102238:	461a      	mov	r2, r3
 810223a:	4b52      	ldr	r3, [pc, #328]	@ (8102384 <main+0x474>)
 810223c:	701a      	strb	r2, [r3, #0]
	  	  	    delta_angle = (double)counts * 360 / 2651;
 810223e:	4b50      	ldr	r3, [pc, #320]	@ (8102380 <main+0x470>)
 8102240:	681b      	ldr	r3, [r3, #0]
 8102242:	4618      	mov	r0, r3
 8102244:	f7fe f9f6 	bl	8100634 <__aeabi_i2d>
 8102248:	f04f 0200 	mov.w	r2, #0
 810224c:	4b4e      	ldr	r3, [pc, #312]	@ (8102388 <main+0x478>)
 810224e:	f7fe fa5b 	bl	8100708 <__aeabi_dmul>
 8102252:	4602      	mov	r2, r0
 8102254:	460b      	mov	r3, r1
 8102256:	4610      	mov	r0, r2
 8102258:	4619      	mov	r1, r3
 810225a:	a335      	add	r3, pc, #212	@ (adr r3, 8102330 <main+0x420>)
 810225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102260:	f7fe fb7c 	bl	810095c <__aeabi_ddiv>
 8102264:	4602      	mov	r2, r0
 8102266:	460b      	mov	r3, r1
 8102268:	4948      	ldr	r1, [pc, #288]	@ (810238c <main+0x47c>)
 810226a:	e9c1 2300 	strd	r2, r3, [r1]

	  	  	    // Calcolo differenza angolo con correzione wrap-around
	  	  	    diff_angle = -(delta_angle - old_delta_angle);
 810226e:	4b47      	ldr	r3, [pc, #284]	@ (810238c <main+0x47c>)
 8102270:	e9d3 0100 	ldrd	r0, r1, [r3]
 8102274:	4b46      	ldr	r3, [pc, #280]	@ (8102390 <main+0x480>)
 8102276:	e9d3 2300 	ldrd	r2, r3, [r3]
 810227a:	f7fe f88d 	bl	8100398 <__aeabi_dsub>
 810227e:	4602      	mov	r2, r0
 8102280:	460b      	mov	r3, r1
 8102282:	4614      	mov	r4, r2
 8102284:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8102288:	4b42      	ldr	r3, [pc, #264]	@ (8102394 <main+0x484>)
 810228a:	e9c3 4500 	strd	r4, r5, [r3]
	  	  	    if(fabs(diff_angle) > 180) {
 810228e:	4b41      	ldr	r3, [pc, #260]	@ (8102394 <main+0x484>)
 8102290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102294:	4690      	mov	r8, r2
 8102296:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 810229a:	f04f 0200 	mov.w	r2, #0
 810229e:	4b3e      	ldr	r3, [pc, #248]	@ (8102398 <main+0x488>)
 81022a0:	4640      	mov	r0, r8
 81022a2:	4649      	mov	r1, r9
 81022a4:	f7fe fcc0 	bl	8100c28 <__aeabi_dcmpgt>
 81022a8:	4603      	mov	r3, r0
 81022aa:	2b00      	cmp	r3, #0
 81022ac:	d01a      	beq.n	81022e4 <main+0x3d4>
	  	  	        diff_angle = diff_angle - copysign(360.0, diff_angle);
 81022ae:	4b39      	ldr	r3, [pc, #228]	@ (8102394 <main+0x484>)
 81022b0:	ed93 7b00 	vldr	d7, [r3]
 81022b4:	ed87 7b00 	vstr	d7, [r7]
 81022b8:	4b36      	ldr	r3, [pc, #216]	@ (8102394 <main+0x484>)
 81022ba:	ed93 7b00 	vldr	d7, [r3]
 81022be:	eeb0 1a47 	vmov.f32	s2, s14
 81022c2:	eef0 1a67 	vmov.f32	s3, s15
 81022c6:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 8102338 <main+0x428>
 81022ca:	f008 fb85 	bl	810a9d8 <copysign>
 81022ce:	ec53 2b10 	vmov	r2, r3, d0
 81022d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 81022d6:	f7fe f85f 	bl	8100398 <__aeabi_dsub>
 81022da:	4602      	mov	r2, r0
 81022dc:	460b      	mov	r3, r1
 81022de:	492d      	ldr	r1, [pc, #180]	@ (8102394 <main+0x484>)
 81022e0:	e9c1 2300 	strd	r2, r3, [r1]
	  	  	    }

	  	  	    // Gestione cambio direzione
	  	  	    if(dir != old_dir) {
 81022e4:	4b27      	ldr	r3, [pc, #156]	@ (8102384 <main+0x474>)
 81022e6:	781a      	ldrb	r2, [r3, #0]
 81022e8:	4b2c      	ldr	r3, [pc, #176]	@ (810239c <main+0x48c>)
 81022ea:	781b      	ldrb	r3, [r3, #0]
 81022ec:	429a      	cmp	r2, r3
 81022ee:	d074      	beq.n	81023da <main+0x4ca>
	  	  	        if(dir == 1 && diff_angle > 0) {
 81022f0:	4b24      	ldr	r3, [pc, #144]	@ (8102384 <main+0x474>)
 81022f2:	781b      	ldrb	r3, [r3, #0]
 81022f4:	2b01      	cmp	r3, #1
 81022f6:	d153      	bne.n	81023a0 <main+0x490>
 81022f8:	4b26      	ldr	r3, [pc, #152]	@ (8102394 <main+0x484>)
 81022fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 81022fe:	f04f 0200 	mov.w	r2, #0
 8102302:	f04f 0300 	mov.w	r3, #0
 8102306:	f7fe fc8f 	bl	8100c28 <__aeabi_dcmpgt>
 810230a:	4603      	mov	r3, r0
 810230c:	2b00      	cmp	r3, #0
 810230e:	d047      	beq.n	81023a0 <main+0x490>
	  	  	            diff_angle -= 360.0;
 8102310:	4b20      	ldr	r3, [pc, #128]	@ (8102394 <main+0x484>)
 8102312:	e9d3 0100 	ldrd	r0, r1, [r3]
 8102316:	f04f 0200 	mov.w	r2, #0
 810231a:	4b1b      	ldr	r3, [pc, #108]	@ (8102388 <main+0x478>)
 810231c:	f7fe f83c 	bl	8100398 <__aeabi_dsub>
 8102320:	4602      	mov	r2, r0
 8102322:	460b      	mov	r3, r1
 8102324:	491b      	ldr	r1, [pc, #108]	@ (8102394 <main+0x484>)
 8102326:	e9c1 2300 	strd	r2, r3, [r1]
 810232a:	e056      	b.n	81023da <main+0x4ca>
 810232c:	f3af 8000 	nop.w
 8102330:	00000000 	.word	0x00000000
 8102334:	40a4b600 	.word	0x40a4b600
 8102338:	00000000 	.word	0x00000000
 810233c:	40768000 	.word	0x40768000
 8102340:	0810e784 	.word	0x0810e784
 8102344:	100008dc 	.word	0x100008dc
 8102348:	100008c4 	.word	0x100008c4
 810234c:	3dcccccd 	.word	0x3dcccccd
 8102350:	1000081c 	.word	0x1000081c
 8102354:	1000078c 	.word	0x1000078c
 8102358:	100006fc 	.word	0x100006fc
 810235c:	1000066c 	.word	0x1000066c
 8102360:	100008ac 	.word	0x100008ac
 8102364:	100005dc 	.word	0x100005dc
 8102368:	1000054c 	.word	0x1000054c
 810236c:	10000534 	.word	0x10000534
 8102370:	1000094c 	.word	0x1000094c
 8102374:	58020000 	.word	0x58020000
 8102378:	10000478 	.word	0x10000478
 810237c:	40000800 	.word	0x40000800
 8102380:	1000047c 	.word	0x1000047c
 8102384:	100004a8 	.word	0x100004a8
 8102388:	40768000 	.word	0x40768000
 810238c:	10000480 	.word	0x10000480
 8102390:	10000488 	.word	0x10000488
 8102394:	10000490 	.word	0x10000490
 8102398:	40668000 	.word	0x40668000
 810239c:	100004a9 	.word	0x100004a9
	  	  	        } else if(dir == 0 && diff_angle < 0) {
 81023a0:	4b61      	ldr	r3, [pc, #388]	@ (8102528 <main+0x618>)
 81023a2:	781b      	ldrb	r3, [r3, #0]
 81023a4:	2b00      	cmp	r3, #0
 81023a6:	d118      	bne.n	81023da <main+0x4ca>
 81023a8:	4b60      	ldr	r3, [pc, #384]	@ (810252c <main+0x61c>)
 81023aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 81023ae:	f04f 0200 	mov.w	r2, #0
 81023b2:	f04f 0300 	mov.w	r3, #0
 81023b6:	f7fe fc19 	bl	8100bec <__aeabi_dcmplt>
 81023ba:	4603      	mov	r3, r0
 81023bc:	2b00      	cmp	r3, #0
 81023be:	d00c      	beq.n	81023da <main+0x4ca>
	  	  	            diff_angle += 360.0;
 81023c0:	4b5a      	ldr	r3, [pc, #360]	@ (810252c <main+0x61c>)
 81023c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 81023c6:	f04f 0200 	mov.w	r2, #0
 81023ca:	4b59      	ldr	r3, [pc, #356]	@ (8102530 <main+0x620>)
 81023cc:	f7fd ffe6 	bl	810039c <__adddf3>
 81023d0:	4602      	mov	r2, r0
 81023d2:	460b      	mov	r3, r1
 81023d4:	4955      	ldr	r1, [pc, #340]	@ (810252c <main+0x61c>)
 81023d6:	e9c1 2300 	strd	r2, r3, [r1]
	  	  	        }
	  	  	    }

	  	  	    // Calcolo velocità
	  	  	    speed_degsec = diff_angle / dt;
 81023da:	4b54      	ldr	r3, [pc, #336]	@ (810252c <main+0x61c>)
 81023dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 81023e0:	a34b      	add	r3, pc, #300	@ (adr r3, 8102510 <main+0x600>)
 81023e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81023e6:	f7fe fab9 	bl	810095c <__aeabi_ddiv>
 81023ea:	4602      	mov	r2, r0
 81023ec:	460b      	mov	r3, r1
 81023ee:	4951      	ldr	r1, [pc, #324]	@ (8102534 <main+0x624>)
 81023f0:	e9c1 2300 	strd	r2, r3, [r1]
	  	  	    speed = speed_degsec / 6.0;
 81023f4:	4b4f      	ldr	r3, [pc, #316]	@ (8102534 <main+0x624>)
 81023f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 81023fa:	f04f 0200 	mov.w	r2, #0
 81023fe:	4b4e      	ldr	r3, [pc, #312]	@ (8102538 <main+0x628>)
 8102400:	f7fe faac 	bl	810095c <__aeabi_ddiv>
 8102404:	4602      	mov	r2, r0
 8102406:	460b      	mov	r3, r1
 8102408:	494c      	ldr	r1, [pc, #304]	@ (810253c <main+0x62c>)
 810240a:	e9c1 2300 	strd	r2, r3, [r1]

	  	  	    // Filtraggio e validazione velocità
	  	  	    if(fabs(speed) < MAX_EXPECTED_RPM) {
 810240e:	4b4b      	ldr	r3, [pc, #300]	@ (810253c <main+0x62c>)
 8102410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102414:	4692      	mov	sl, r2
 8102416:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 810241a:	f04f 0200 	mov.w	r2, #0
 810241e:	4b48      	ldr	r3, [pc, #288]	@ (8102540 <main+0x630>)
 8102420:	4650      	mov	r0, sl
 8102422:	4659      	mov	r1, fp
 8102424:	f7fe fbe2 	bl	8100bec <__aeabi_dcmplt>
 8102428:	4603      	mov	r3, r0
 810242a:	2b00      	cmp	r3, #0
 810242c:	d01f      	beq.n	810246e <main+0x55e>
	  	  	        filtered_speed = ALPHA * speed + (1-ALPHA) * filtered_speed;
 810242e:	4b43      	ldr	r3, [pc, #268]	@ (810253c <main+0x62c>)
 8102430:	e9d3 0100 	ldrd	r0, r1, [r3]
 8102434:	a338      	add	r3, pc, #224	@ (adr r3, 8102518 <main+0x608>)
 8102436:	e9d3 2300 	ldrd	r2, r3, [r3]
 810243a:	f7fe f965 	bl	8100708 <__aeabi_dmul>
 810243e:	4602      	mov	r2, r0
 8102440:	460b      	mov	r3, r1
 8102442:	e9c7 2300 	strd	r2, r3, [r7]
 8102446:	4b3f      	ldr	r3, [pc, #252]	@ (8102544 <main+0x634>)
 8102448:	e9d3 0100 	ldrd	r0, r1, [r3]
 810244c:	a334      	add	r3, pc, #208	@ (adr r3, 8102520 <main+0x610>)
 810244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102452:	f7fe f959 	bl	8100708 <__aeabi_dmul>
 8102456:	4602      	mov	r2, r0
 8102458:	460b      	mov	r3, r1
 810245a:	e9d7 0100 	ldrd	r0, r1, [r7]
 810245e:	f7fd ff9d 	bl	810039c <__adddf3>
 8102462:	4602      	mov	r2, r0
 8102464:	460b      	mov	r3, r1
 8102466:	4937      	ldr	r1, [pc, #220]	@ (8102544 <main+0x634>)
 8102468:	e9c1 2300 	strd	r2, r3, [r1]
 810246c:	e005      	b.n	810247a <main+0x56a>
	  	  	    } else {
	  	  	        // Usa l'ultimo valore valido se supera la soglia
	  	  	        speed = filtered_speed;
 810246e:	4b35      	ldr	r3, [pc, #212]	@ (8102544 <main+0x634>)
 8102470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102474:	4931      	ldr	r1, [pc, #196]	@ (810253c <main+0x62c>)
 8102476:	e9c1 2300 	strd	r2, r3, [r1]
	  	  	    }

	  	  	    old_delta_angle = delta_angle;
 810247a:	4b33      	ldr	r3, [pc, #204]	@ (8102548 <main+0x638>)
 810247c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102480:	4932      	ldr	r1, [pc, #200]	@ (810254c <main+0x63c>)
 8102482:	e9c1 2300 	strd	r2, r3, [r1]
	  	  	    old_dir = dir;
 8102486:	4b28      	ldr	r3, [pc, #160]	@ (8102528 <main+0x618>)
 8102488:	781a      	ldrb	r2, [r3, #0]
 810248a:	4b31      	ldr	r3, [pc, #196]	@ (8102550 <main+0x640>)
 810248c:	701a      	strb	r2, [r3, #0]

	  	  	    // Stampa dati
	  	  	    printf("Angolo: %.2f° | Velocità: %.2f RPM | Velocità filtrata: %.2f RPM \r\n",
 810248e:	4b2e      	ldr	r3, [pc, #184]	@ (8102548 <main+0x638>)
 8102490:	ed93 7b00 	vldr	d7, [r3]
 8102494:	ed87 7b00 	vstr	d7, [r7]
 8102498:	4b28      	ldr	r3, [pc, #160]	@ (810253c <main+0x62c>)
 810249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810249e:	4929      	ldr	r1, [pc, #164]	@ (8102544 <main+0x634>)
 81024a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 81024a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81024a8:	e9cd 2300 	strd	r2, r3, [sp]
 81024ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 81024b0:	4828      	ldr	r0, [pc, #160]	@ (8102554 <main+0x644>)
 81024b2:	f008 f861 	bl	810a578 <iprintf>
	  	  	           delta_angle, speed, filtered_speed);
	  	  	}
	  	  HAL_StatusTypeDef status = DWM_GetDistances(measurements, &anchor_count);
 81024b6:	4928      	ldr	r1, [pc, #160]	@ (8102558 <main+0x648>)
 81024b8:	4828      	ldr	r0, [pc, #160]	@ (810255c <main+0x64c>)
 81024ba:	f7ff fbad 	bl	8101c18 <DWM_GetDistances>
 81024be:	4603      	mov	r3, r0
 81024c0:	f887 31cf 	strb.w	r3, [r7, #463]	@ 0x1cf
	  	  	  	     printf("Stato: %d (HAL_OK=0)\r\n", status);  // Debug
 81024c4:	f897 31cf 	ldrb.w	r3, [r7, #463]	@ 0x1cf
 81024c8:	4619      	mov	r1, r3
 81024ca:	4825      	ldr	r0, [pc, #148]	@ (8102560 <main+0x650>)
 81024cc:	f008 f854 	bl	810a578 <iprintf>

	  	  	  	     if (status == HAL_OK) {
 81024d0:	f897 31cf 	ldrb.w	r3, [r7, #463]	@ 0x1cf
 81024d4:	2b00      	cmp	r3, #0
 81024d6:	d110      	bne.n	81024fa <main+0x5ea>
	  	  	  	         if (anchor_count == 0) {
 81024d8:	4b1f      	ldr	r3, [pc, #124]	@ (8102558 <main+0x648>)
 81024da:	781b      	ldrb	r3, [r3, #0]
 81024dc:	2b00      	cmp	r3, #0
 81024de:	d103      	bne.n	81024e8 <main+0x5d8>
	  	  	  	             printf("DWM1001 connesso, ma nessun anchor rilevato!\r\n");
 81024e0:	4820      	ldr	r0, [pc, #128]	@ (8102564 <main+0x654>)
 81024e2:	f008 f8b1 	bl	810a648 <puts>
 81024e6:	e00e      	b.n	8102506 <main+0x5f6>
	  	  	  	         } else {
	  	  	  	             printf("DWM1001 risponde correttamente. Anchor rilevati: %d\r\n", anchor_count);
 81024e8:	4b1b      	ldr	r3, [pc, #108]	@ (8102558 <main+0x648>)
 81024ea:	781b      	ldrb	r3, [r3, #0]
 81024ec:	4619      	mov	r1, r3
 81024ee:	481e      	ldr	r0, [pc, #120]	@ (8102568 <main+0x658>)
 81024f0:	f008 f842 	bl	810a578 <iprintf>
	  	  	  	             Print_Distances();
 81024f4:	f000 fb0c 	bl	8102b10 <Print_Distances>
 81024f8:	e005      	b.n	8102506 <main+0x5f6>
	  	  	  	         }
	  	  	  	     } else {
	  	  	  	         printf("ERRORE: Comunicazione UART fallita (codice: %d)!\r\n", status);
 81024fa:	f897 31cf 	ldrb.w	r3, [r7, #463]	@ 0x1cf
 81024fe:	4619      	mov	r1, r3
 8102500:	481a      	ldr	r0, [pc, #104]	@ (810256c <main+0x65c>)
 8102502:	f008 f839 	bl	810a578 <iprintf>
	  	  	  	     }

	  	  	  	     HAL_Delay(500);  // Misurazioni ogni 500ms
 8102506:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 810250a:	f001 fbf5 	bl	8103cf8 <HAL_Delay>
  {
 810250e:	e5c8      	b.n	81020a2 <main+0x192>
 8102510:	9999999a 	.word	0x9999999a
 8102514:	3fb99999 	.word	0x3fb99999
 8102518:	33333333 	.word	0x33333333
 810251c:	3fd33333 	.word	0x3fd33333
 8102520:	66666666 	.word	0x66666666
 8102524:	3fe66666 	.word	0x3fe66666
 8102528:	100004a8 	.word	0x100004a8
 810252c:	10000490 	.word	0x10000490
 8102530:	40768000 	.word	0x40768000
 8102534:	100004a0 	.word	0x100004a0
 8102538:	40180000 	.word	0x40180000
 810253c:	10000498 	.word	0x10000498
 8102540:	402e0000 	.word	0x402e0000
 8102544:	100004b0 	.word	0x100004b0
 8102548:	10000480 	.word	0x10000480
 810254c:	10000488 	.word	0x10000488
 8102550:	100004a9 	.word	0x100004a9
 8102554:	0810e7a8 	.word	0x0810e7a8
 8102558:	10000530 	.word	0x10000530
 810255c:	100004b8 	.word	0x100004b8
 8102560:	0810e7f0 	.word	0x0810e7f0
 8102564:	0810e808 	.word	0x0810e808
 8102568:	0810e838 	.word	0x0810e838
 810256c:	0810e870 	.word	0x0810e870

08102570 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8102570:	b580      	push	{r7, lr}
 8102572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8102574:	4b1b      	ldr	r3, [pc, #108]	@ (81025e4 <MX_I2C1_Init+0x74>)
 8102576:	4a1c      	ldr	r2, [pc, #112]	@ (81025e8 <MX_I2C1_Init+0x78>)
 8102578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 810257a:	4b1a      	ldr	r3, [pc, #104]	@ (81025e4 <MX_I2C1_Init+0x74>)
 810257c:	4a1b      	ldr	r2, [pc, #108]	@ (81025ec <MX_I2C1_Init+0x7c>)
 810257e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8102580:	4b18      	ldr	r3, [pc, #96]	@ (81025e4 <MX_I2C1_Init+0x74>)
 8102582:	2200      	movs	r2, #0
 8102584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8102586:	4b17      	ldr	r3, [pc, #92]	@ (81025e4 <MX_I2C1_Init+0x74>)
 8102588:	2201      	movs	r2, #1
 810258a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810258c:	4b15      	ldr	r3, [pc, #84]	@ (81025e4 <MX_I2C1_Init+0x74>)
 810258e:	2200      	movs	r2, #0
 8102590:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8102592:	4b14      	ldr	r3, [pc, #80]	@ (81025e4 <MX_I2C1_Init+0x74>)
 8102594:	2200      	movs	r2, #0
 8102596:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8102598:	4b12      	ldr	r3, [pc, #72]	@ (81025e4 <MX_I2C1_Init+0x74>)
 810259a:	2200      	movs	r2, #0
 810259c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810259e:	4b11      	ldr	r3, [pc, #68]	@ (81025e4 <MX_I2C1_Init+0x74>)
 81025a0:	2200      	movs	r2, #0
 81025a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81025a4:	4b0f      	ldr	r3, [pc, #60]	@ (81025e4 <MX_I2C1_Init+0x74>)
 81025a6:	2200      	movs	r2, #0
 81025a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81025aa:	480e      	ldr	r0, [pc, #56]	@ (81025e4 <MX_I2C1_Init+0x74>)
 81025ac:	f001 fe9c 	bl	81042e8 <HAL_I2C_Init>
 81025b0:	4603      	mov	r3, r0
 81025b2:	2b00      	cmp	r3, #0
 81025b4:	d001      	beq.n	81025ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 81025b6:	f000 fb67 	bl	8102c88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81025ba:	2100      	movs	r1, #0
 81025bc:	4809      	ldr	r0, [pc, #36]	@ (81025e4 <MX_I2C1_Init+0x74>)
 81025be:	f002 fbfd 	bl	8104dbc <HAL_I2CEx_ConfigAnalogFilter>
 81025c2:	4603      	mov	r3, r0
 81025c4:	2b00      	cmp	r3, #0
 81025c6:	d001      	beq.n	81025cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 81025c8:	f000 fb5e 	bl	8102c88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 81025cc:	2100      	movs	r1, #0
 81025ce:	4805      	ldr	r0, [pc, #20]	@ (81025e4 <MX_I2C1_Init+0x74>)
 81025d0:	f002 fc3f 	bl	8104e52 <HAL_I2CEx_ConfigDigitalFilter>
 81025d4:	4603      	mov	r3, r0
 81025d6:	2b00      	cmp	r3, #0
 81025d8:	d001      	beq.n	81025de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 81025da:	f000 fb55 	bl	8102c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 81025de:	bf00      	nop
 81025e0:	bd80      	pop	{r7, pc}
 81025e2:	bf00      	nop
 81025e4:	10000218 	.word	0x10000218
 81025e8:	40005400 	.word	0x40005400
 81025ec:	00707cbb 	.word	0x00707cbb

081025f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 81025f0:	b580      	push	{r7, lr}
 81025f2:	b096      	sub	sp, #88	@ 0x58
 81025f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81025f6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 81025fa:	2200      	movs	r2, #0
 81025fc:	601a      	str	r2, [r3, #0]
 81025fe:	605a      	str	r2, [r3, #4]
 8102600:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8102602:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102606:	2200      	movs	r2, #0
 8102608:	601a      	str	r2, [r3, #0]
 810260a:	605a      	str	r2, [r3, #4]
 810260c:	609a      	str	r2, [r3, #8]
 810260e:	60da      	str	r2, [r3, #12]
 8102610:	611a      	str	r2, [r3, #16]
 8102612:	615a      	str	r2, [r3, #20]
 8102614:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8102616:	1d3b      	adds	r3, r7, #4
 8102618:	222c      	movs	r2, #44	@ 0x2c
 810261a:	2100      	movs	r1, #0
 810261c:	4618      	mov	r0, r3
 810261e:	f008 f947 	bl	810a8b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8102622:	4b38      	ldr	r3, [pc, #224]	@ (8102704 <MX_TIM1_Init+0x114>)
 8102624:	4a38      	ldr	r2, [pc, #224]	@ (8102708 <MX_TIM1_Init+0x118>)
 8102626:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8102628:	4b36      	ldr	r3, [pc, #216]	@ (8102704 <MX_TIM1_Init+0x114>)
 810262a:	223f      	movs	r2, #63	@ 0x3f
 810262c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 810262e:	4b35      	ldr	r3, [pc, #212]	@ (8102704 <MX_TIM1_Init+0x114>)
 8102630:	2200      	movs	r2, #0
 8102632:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8102634:	4b33      	ldr	r3, [pc, #204]	@ (8102704 <MX_TIM1_Init+0x114>)
 8102636:	2264      	movs	r2, #100	@ 0x64
 8102638:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810263a:	4b32      	ldr	r3, [pc, #200]	@ (8102704 <MX_TIM1_Init+0x114>)
 810263c:	2200      	movs	r2, #0
 810263e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8102640:	4b30      	ldr	r3, [pc, #192]	@ (8102704 <MX_TIM1_Init+0x114>)
 8102642:	2200      	movs	r2, #0
 8102644:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102646:	4b2f      	ldr	r3, [pc, #188]	@ (8102704 <MX_TIM1_Init+0x114>)
 8102648:	2200      	movs	r2, #0
 810264a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 810264c:	482d      	ldr	r0, [pc, #180]	@ (8102704 <MX_TIM1_Init+0x114>)
 810264e:	f004 fda9 	bl	81071a4 <HAL_TIM_PWM_Init>
 8102652:	4603      	mov	r3, r0
 8102654:	2b00      	cmp	r3, #0
 8102656:	d001      	beq.n	810265c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8102658:	f000 fb16 	bl	8102c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810265c:	2300      	movs	r3, #0
 810265e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8102660:	2300      	movs	r3, #0
 8102662:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102664:	2300      	movs	r3, #0
 8102666:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8102668:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 810266c:	4619      	mov	r1, r3
 810266e:	4825      	ldr	r0, [pc, #148]	@ (8102704 <MX_TIM1_Init+0x114>)
 8102670:	f005 fce8 	bl	8108044 <HAL_TIMEx_MasterConfigSynchronization>
 8102674:	4603      	mov	r3, r0
 8102676:	2b00      	cmp	r3, #0
 8102678:	d001      	beq.n	810267e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 810267a:	f000 fb05 	bl	8102c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 810267e:	2360      	movs	r3, #96	@ 0x60
 8102680:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8102682:	2300      	movs	r3, #0
 8102684:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102686:	2300      	movs	r3, #0
 8102688:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 810268a:	2300      	movs	r3, #0
 810268c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810268e:	2300      	movs	r3, #0
 8102690:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8102692:	2300      	movs	r3, #0
 8102694:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8102696:	2300      	movs	r3, #0
 8102698:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810269a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 810269e:	2200      	movs	r2, #0
 81026a0:	4619      	mov	r1, r3
 81026a2:	4818      	ldr	r0, [pc, #96]	@ (8102704 <MX_TIM1_Init+0x114>)
 81026a4:	f005 f818 	bl	81076d8 <HAL_TIM_PWM_ConfigChannel>
 81026a8:	4603      	mov	r3, r0
 81026aa:	2b00      	cmp	r3, #0
 81026ac:	d001      	beq.n	81026b2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 81026ae:	f000 faeb 	bl	8102c88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 81026b2:	2300      	movs	r3, #0
 81026b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 81026b6:	2300      	movs	r3, #0
 81026b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 81026ba:	2300      	movs	r3, #0
 81026bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 81026be:	2300      	movs	r3, #0
 81026c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 81026c2:	2300      	movs	r3, #0
 81026c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 81026c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81026ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81026cc:	2300      	movs	r3, #0
 81026ce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81026d0:	2300      	movs	r3, #0
 81026d2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81026d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81026d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 81026da:	2300      	movs	r3, #0
 81026dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81026de:	2300      	movs	r3, #0
 81026e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 81026e2:	1d3b      	adds	r3, r7, #4
 81026e4:	4619      	mov	r1, r3
 81026e6:	4807      	ldr	r0, [pc, #28]	@ (8102704 <MX_TIM1_Init+0x114>)
 81026e8:	f005 fd3a 	bl	8108160 <HAL_TIMEx_ConfigBreakDeadTime>
 81026ec:	4603      	mov	r3, r0
 81026ee:	2b00      	cmp	r3, #0
 81026f0:	d001      	beq.n	81026f6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 81026f2:	f000 fac9 	bl	8102c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 81026f6:	4803      	ldr	r0, [pc, #12]	@ (8102704 <MX_TIM1_Init+0x114>)
 81026f8:	f001 f80e 	bl	8103718 <HAL_TIM_MspPostInit>

}
 81026fc:	bf00      	nop
 81026fe:	3758      	adds	r7, #88	@ 0x58
 8102700:	46bd      	mov	sp, r7
 8102702:	bd80      	pop	{r7, pc}
 8102704:	1000026c 	.word	0x1000026c
 8102708:	40010000 	.word	0x40010000

0810270c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 810270c:	b580      	push	{r7, lr}
 810270e:	b08c      	sub	sp, #48	@ 0x30
 8102710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8102712:	f107 030c 	add.w	r3, r7, #12
 8102716:	2224      	movs	r2, #36	@ 0x24
 8102718:	2100      	movs	r1, #0
 810271a:	4618      	mov	r0, r3
 810271c:	f008 f8c8 	bl	810a8b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102720:	463b      	mov	r3, r7
 8102722:	2200      	movs	r2, #0
 8102724:	601a      	str	r2, [r3, #0]
 8102726:	605a      	str	r2, [r3, #4]
 8102728:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 810272a:	4b21      	ldr	r3, [pc, #132]	@ (81027b0 <MX_TIM4_Init+0xa4>)
 810272c:	4a21      	ldr	r2, [pc, #132]	@ (81027b4 <MX_TIM4_Init+0xa8>)
 810272e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1001-1;
 8102730:	4b1f      	ldr	r3, [pc, #124]	@ (81027b0 <MX_TIM4_Init+0xa4>)
 8102732:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8102736:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102738:	4b1d      	ldr	r3, [pc, #116]	@ (81027b0 <MX_TIM4_Init+0xa4>)
 810273a:	2200      	movs	r2, #0
 810273c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2652-1;
 810273e:	4b1c      	ldr	r3, [pc, #112]	@ (81027b0 <MX_TIM4_Init+0xa4>)
 8102740:	f640 225b 	movw	r2, #2651	@ 0xa5b
 8102744:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102746:	4b1a      	ldr	r3, [pc, #104]	@ (81027b0 <MX_TIM4_Init+0xa4>)
 8102748:	2200      	movs	r2, #0
 810274a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810274c:	4b18      	ldr	r3, [pc, #96]	@ (81027b0 <MX_TIM4_Init+0xa4>)
 810274e:	2200      	movs	r2, #0
 8102750:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8102752:	2303      	movs	r3, #3
 8102754:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8102756:	2300      	movs	r3, #0
 8102758:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 810275a:	2301      	movs	r3, #1
 810275c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 810275e:	2300      	movs	r3, #0
 8102760:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8102762:	2300      	movs	r3, #0
 8102764:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8102766:	2300      	movs	r3, #0
 8102768:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 810276a:	2301      	movs	r3, #1
 810276c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 810276e:	2300      	movs	r3, #0
 8102770:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8102772:	2300      	movs	r3, #0
 8102774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8102776:	f107 030c 	add.w	r3, r7, #12
 810277a:	4619      	mov	r1, r3
 810277c:	480c      	ldr	r0, [pc, #48]	@ (81027b0 <MX_TIM4_Init+0xa4>)
 810277e:	f004 fe77 	bl	8107470 <HAL_TIM_Encoder_Init>
 8102782:	4603      	mov	r3, r0
 8102784:	2b00      	cmp	r3, #0
 8102786:	d001      	beq.n	810278c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8102788:	f000 fa7e 	bl	8102c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810278c:	2300      	movs	r3, #0
 810278e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102790:	2300      	movs	r3, #0
 8102792:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8102794:	463b      	mov	r3, r7
 8102796:	4619      	mov	r1, r3
 8102798:	4805      	ldr	r0, [pc, #20]	@ (81027b0 <MX_TIM4_Init+0xa4>)
 810279a:	f005 fc53 	bl	8108044 <HAL_TIMEx_MasterConfigSynchronization>
 810279e:	4603      	mov	r3, r0
 81027a0:	2b00      	cmp	r3, #0
 81027a2:	d001      	beq.n	81027a8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 81027a4:	f000 fa70 	bl	8102c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 81027a8:	bf00      	nop
 81027aa:	3730      	adds	r7, #48	@ 0x30
 81027ac:	46bd      	mov	sp, r7
 81027ae:	bd80      	pop	{r7, pc}
 81027b0:	100002b8 	.word	0x100002b8
 81027b4:	40000800 	.word	0x40000800

081027b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 81027b8:	b580      	push	{r7, lr}
 81027ba:	b084      	sub	sp, #16
 81027bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81027be:	1d3b      	adds	r3, r7, #4
 81027c0:	2200      	movs	r2, #0
 81027c2:	601a      	str	r2, [r3, #0]
 81027c4:	605a      	str	r2, [r3, #4]
 81027c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 81027c8:	4b14      	ldr	r3, [pc, #80]	@ (810281c <MX_TIM6_Init+0x64>)
 81027ca:	4a15      	ldr	r2, [pc, #84]	@ (8102820 <MX_TIM6_Init+0x68>)
 81027cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64-1;
 81027ce:	4b13      	ldr	r3, [pc, #76]	@ (810281c <MX_TIM6_Init+0x64>)
 81027d0:	223f      	movs	r2, #63	@ 0x3f
 81027d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 81027d4:	4b11      	ldr	r3, [pc, #68]	@ (810281c <MX_TIM6_Init+0x64>)
 81027d6:	2200      	movs	r2, #0
 81027d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 81027da:	4b10      	ldr	r3, [pc, #64]	@ (810281c <MX_TIM6_Init+0x64>)
 81027dc:	2264      	movs	r2, #100	@ 0x64
 81027de:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81027e0:	4b0e      	ldr	r3, [pc, #56]	@ (810281c <MX_TIM6_Init+0x64>)
 81027e2:	2200      	movs	r2, #0
 81027e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 81027e6:	480d      	ldr	r0, [pc, #52]	@ (810281c <MX_TIM6_Init+0x64>)
 81027e8:	f004 fc0c 	bl	8107004 <HAL_TIM_Base_Init>
 81027ec:	4603      	mov	r3, r0
 81027ee:	2b00      	cmp	r3, #0
 81027f0:	d001      	beq.n	81027f6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 81027f2:	f000 fa49 	bl	8102c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81027f6:	2300      	movs	r3, #0
 81027f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81027fa:	2300      	movs	r3, #0
 81027fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 81027fe:	1d3b      	adds	r3, r7, #4
 8102800:	4619      	mov	r1, r3
 8102802:	4806      	ldr	r0, [pc, #24]	@ (810281c <MX_TIM6_Init+0x64>)
 8102804:	f005 fc1e 	bl	8108044 <HAL_TIMEx_MasterConfigSynchronization>
 8102808:	4603      	mov	r3, r0
 810280a:	2b00      	cmp	r3, #0
 810280c:	d001      	beq.n	8102812 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 810280e:	f000 fa3b 	bl	8102c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8102812:	bf00      	nop
 8102814:	3710      	adds	r7, #16
 8102816:	46bd      	mov	sp, r7
 8102818:	bd80      	pop	{r7, pc}
 810281a:	bf00      	nop
 810281c:	10000304 	.word	0x10000304
 8102820:	40001000 	.word	0x40001000

08102824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8102824:	b580      	push	{r7, lr}
 8102826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8102828:	4b22      	ldr	r3, [pc, #136]	@ (81028b4 <MX_USART2_UART_Init+0x90>)
 810282a:	4a23      	ldr	r2, [pc, #140]	@ (81028b8 <MX_USART2_UART_Init+0x94>)
 810282c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 810282e:	4b21      	ldr	r3, [pc, #132]	@ (81028b4 <MX_USART2_UART_Init+0x90>)
 8102830:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8102834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8102836:	4b1f      	ldr	r3, [pc, #124]	@ (81028b4 <MX_USART2_UART_Init+0x90>)
 8102838:	2200      	movs	r2, #0
 810283a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 810283c:	4b1d      	ldr	r3, [pc, #116]	@ (81028b4 <MX_USART2_UART_Init+0x90>)
 810283e:	2200      	movs	r2, #0
 8102840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8102842:	4b1c      	ldr	r3, [pc, #112]	@ (81028b4 <MX_USART2_UART_Init+0x90>)
 8102844:	2200      	movs	r2, #0
 8102846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8102848:	4b1a      	ldr	r3, [pc, #104]	@ (81028b4 <MX_USART2_UART_Init+0x90>)
 810284a:	220c      	movs	r2, #12
 810284c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810284e:	4b19      	ldr	r3, [pc, #100]	@ (81028b4 <MX_USART2_UART_Init+0x90>)
 8102850:	2200      	movs	r2, #0
 8102852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8102854:	4b17      	ldr	r3, [pc, #92]	@ (81028b4 <MX_USART2_UART_Init+0x90>)
 8102856:	2200      	movs	r2, #0
 8102858:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810285a:	4b16      	ldr	r3, [pc, #88]	@ (81028b4 <MX_USART2_UART_Init+0x90>)
 810285c:	2200      	movs	r2, #0
 810285e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102860:	4b14      	ldr	r3, [pc, #80]	@ (81028b4 <MX_USART2_UART_Init+0x90>)
 8102862:	2200      	movs	r2, #0
 8102864:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8102866:	4b13      	ldr	r3, [pc, #76]	@ (81028b4 <MX_USART2_UART_Init+0x90>)
 8102868:	2200      	movs	r2, #0
 810286a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 810286c:	4811      	ldr	r0, [pc, #68]	@ (81028b4 <MX_USART2_UART_Init+0x90>)
 810286e:	f005 fcf5 	bl	810825c <HAL_UART_Init>
 8102872:	4603      	mov	r3, r0
 8102874:	2b00      	cmp	r3, #0
 8102876:	d001      	beq.n	810287c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8102878:	f000 fa06 	bl	8102c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810287c:	2100      	movs	r1, #0
 810287e:	480d      	ldr	r0, [pc, #52]	@ (81028b4 <MX_USART2_UART_Init+0x90>)
 8102880:	f006 fe52 	bl	8109528 <HAL_UARTEx_SetTxFifoThreshold>
 8102884:	4603      	mov	r3, r0
 8102886:	2b00      	cmp	r3, #0
 8102888:	d001      	beq.n	810288e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 810288a:	f000 f9fd 	bl	8102c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810288e:	2100      	movs	r1, #0
 8102890:	4808      	ldr	r0, [pc, #32]	@ (81028b4 <MX_USART2_UART_Init+0x90>)
 8102892:	f006 fe87 	bl	81095a4 <HAL_UARTEx_SetRxFifoThreshold>
 8102896:	4603      	mov	r3, r0
 8102898:	2b00      	cmp	r3, #0
 810289a:	d001      	beq.n	81028a0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 810289c:	f000 f9f4 	bl	8102c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 81028a0:	4804      	ldr	r0, [pc, #16]	@ (81028b4 <MX_USART2_UART_Init+0x90>)
 81028a2:	f006 fe08 	bl	81094b6 <HAL_UARTEx_DisableFifoMode>
 81028a6:	4603      	mov	r3, r0
 81028a8:	2b00      	cmp	r3, #0
 81028aa:	d001      	beq.n	81028b0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 81028ac:	f000 f9ec 	bl	8102c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 81028b0:	bf00      	nop
 81028b2:	bd80      	pop	{r7, pc}
 81028b4:	10000350 	.word	0x10000350
 81028b8:	40004400 	.word	0x40004400

081028bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 81028bc:	b580      	push	{r7, lr}
 81028be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81028c0:	4b22      	ldr	r3, [pc, #136]	@ (810294c <MX_USART3_UART_Init+0x90>)
 81028c2:	4a23      	ldr	r2, [pc, #140]	@ (8102950 <MX_USART3_UART_Init+0x94>)
 81028c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 81028c6:	4b21      	ldr	r3, [pc, #132]	@ (810294c <MX_USART3_UART_Init+0x90>)
 81028c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81028cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81028ce:	4b1f      	ldr	r3, [pc, #124]	@ (810294c <MX_USART3_UART_Init+0x90>)
 81028d0:	2200      	movs	r2, #0
 81028d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 81028d4:	4b1d      	ldr	r3, [pc, #116]	@ (810294c <MX_USART3_UART_Init+0x90>)
 81028d6:	2200      	movs	r2, #0
 81028d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 81028da:	4b1c      	ldr	r3, [pc, #112]	@ (810294c <MX_USART3_UART_Init+0x90>)
 81028dc:	2200      	movs	r2, #0
 81028de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81028e0:	4b1a      	ldr	r3, [pc, #104]	@ (810294c <MX_USART3_UART_Init+0x90>)
 81028e2:	220c      	movs	r2, #12
 81028e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81028e6:	4b19      	ldr	r3, [pc, #100]	@ (810294c <MX_USART3_UART_Init+0x90>)
 81028e8:	2200      	movs	r2, #0
 81028ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81028ec:	4b17      	ldr	r3, [pc, #92]	@ (810294c <MX_USART3_UART_Init+0x90>)
 81028ee:	2200      	movs	r2, #0
 81028f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81028f2:	4b16      	ldr	r3, [pc, #88]	@ (810294c <MX_USART3_UART_Init+0x90>)
 81028f4:	2200      	movs	r2, #0
 81028f6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81028f8:	4b14      	ldr	r3, [pc, #80]	@ (810294c <MX_USART3_UART_Init+0x90>)
 81028fa:	2200      	movs	r2, #0
 81028fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81028fe:	4b13      	ldr	r3, [pc, #76]	@ (810294c <MX_USART3_UART_Init+0x90>)
 8102900:	2200      	movs	r2, #0
 8102902:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102904:	4811      	ldr	r0, [pc, #68]	@ (810294c <MX_USART3_UART_Init+0x90>)
 8102906:	f005 fca9 	bl	810825c <HAL_UART_Init>
 810290a:	4603      	mov	r3, r0
 810290c:	2b00      	cmp	r3, #0
 810290e:	d001      	beq.n	8102914 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8102910:	f000 f9ba 	bl	8102c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102914:	2100      	movs	r1, #0
 8102916:	480d      	ldr	r0, [pc, #52]	@ (810294c <MX_USART3_UART_Init+0x90>)
 8102918:	f006 fe06 	bl	8109528 <HAL_UARTEx_SetTxFifoThreshold>
 810291c:	4603      	mov	r3, r0
 810291e:	2b00      	cmp	r3, #0
 8102920:	d001      	beq.n	8102926 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8102922:	f000 f9b1 	bl	8102c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102926:	2100      	movs	r1, #0
 8102928:	4808      	ldr	r0, [pc, #32]	@ (810294c <MX_USART3_UART_Init+0x90>)
 810292a:	f006 fe3b 	bl	81095a4 <HAL_UARTEx_SetRxFifoThreshold>
 810292e:	4603      	mov	r3, r0
 8102930:	2b00      	cmp	r3, #0
 8102932:	d001      	beq.n	8102938 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8102934:	f000 f9a8 	bl	8102c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102938:	4804      	ldr	r0, [pc, #16]	@ (810294c <MX_USART3_UART_Init+0x90>)
 810293a:	f006 fdbc 	bl	81094b6 <HAL_UARTEx_DisableFifoMode>
 810293e:	4603      	mov	r3, r0
 8102940:	2b00      	cmp	r3, #0
 8102942:	d001      	beq.n	8102948 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8102944:	f000 f9a0 	bl	8102c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102948:	bf00      	nop
 810294a:	bd80      	pop	{r7, pc}
 810294c:	100003e4 	.word	0x100003e4
 8102950:	40004800 	.word	0x40004800

08102954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8102954:	b580      	push	{r7, lr}
 8102956:	b08a      	sub	sp, #40	@ 0x28
 8102958:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 810295a:	f107 0314 	add.w	r3, r7, #20
 810295e:	2200      	movs	r2, #0
 8102960:	601a      	str	r2, [r3, #0]
 8102962:	605a      	str	r2, [r3, #4]
 8102964:	609a      	str	r2, [r3, #8]
 8102966:	60da      	str	r2, [r3, #12]
 8102968:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810296a:	4b2d      	ldr	r3, [pc, #180]	@ (8102a20 <MX_GPIO_Init+0xcc>)
 810296c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102970:	4a2b      	ldr	r2, [pc, #172]	@ (8102a20 <MX_GPIO_Init+0xcc>)
 8102972:	f043 0301 	orr.w	r3, r3, #1
 8102976:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810297a:	4b29      	ldr	r3, [pc, #164]	@ (8102a20 <MX_GPIO_Init+0xcc>)
 810297c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102980:	f003 0301 	and.w	r3, r3, #1
 8102984:	613b      	str	r3, [r7, #16]
 8102986:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8102988:	4b25      	ldr	r3, [pc, #148]	@ (8102a20 <MX_GPIO_Init+0xcc>)
 810298a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810298e:	4a24      	ldr	r2, [pc, #144]	@ (8102a20 <MX_GPIO_Init+0xcc>)
 8102990:	f043 0310 	orr.w	r3, r3, #16
 8102994:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102998:	4b21      	ldr	r3, [pc, #132]	@ (8102a20 <MX_GPIO_Init+0xcc>)
 810299a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810299e:	f003 0310 	and.w	r3, r3, #16
 81029a2:	60fb      	str	r3, [r7, #12]
 81029a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81029a6:	4b1e      	ldr	r3, [pc, #120]	@ (8102a20 <MX_GPIO_Init+0xcc>)
 81029a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81029ac:	4a1c      	ldr	r2, [pc, #112]	@ (8102a20 <MX_GPIO_Init+0xcc>)
 81029ae:	f043 0308 	orr.w	r3, r3, #8
 81029b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81029b6:	4b1a      	ldr	r3, [pc, #104]	@ (8102a20 <MX_GPIO_Init+0xcc>)
 81029b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81029bc:	f003 0308 	and.w	r3, r3, #8
 81029c0:	60bb      	str	r3, [r7, #8]
 81029c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81029c4:	4b16      	ldr	r3, [pc, #88]	@ (8102a20 <MX_GPIO_Init+0xcc>)
 81029c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81029ca:	4a15      	ldr	r2, [pc, #84]	@ (8102a20 <MX_GPIO_Init+0xcc>)
 81029cc:	f043 0302 	orr.w	r3, r3, #2
 81029d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81029d4:	4b12      	ldr	r3, [pc, #72]	@ (8102a20 <MX_GPIO_Init+0xcc>)
 81029d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81029da:	f003 0302 	and.w	r3, r3, #2
 81029de:	607b      	str	r3, [r7, #4]
 81029e0:	687b      	ldr	r3, [r7, #4]

  //configurazione pin
    // PA3 -> USART2_RX
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 81029e2:	2308      	movs	r3, #8
 81029e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81029e6:	2302      	movs	r3, #2
 81029e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81029ea:	2300      	movs	r3, #0
 81029ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81029ee:	2300      	movs	r3, #0
 81029f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 81029f2:	2307      	movs	r3, #7
 81029f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81029f6:	f107 0314 	add.w	r3, r7, #20
 81029fa:	4619      	mov	r1, r3
 81029fc:	4809      	ldr	r0, [pc, #36]	@ (8102a24 <MX_GPIO_Init+0xd0>)
 81029fe:	f001 fa97 	bl	8103f30 <HAL_GPIO_Init>
    // PD5 -> USART2_TX
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8102a02:	2320      	movs	r3, #32
 8102a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8102a06:	2307      	movs	r3, #7
 8102a08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102a0a:	f107 0314 	add.w	r3, r7, #20
 8102a0e:	4619      	mov	r1, r3
 8102a10:	4805      	ldr	r0, [pc, #20]	@ (8102a28 <MX_GPIO_Init+0xd4>)
 8102a12:	f001 fa8d 	bl	8103f30 <HAL_GPIO_Init>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8102a16:	bf00      	nop
 8102a18:	3728      	adds	r7, #40	@ 0x28
 8102a1a:	46bd      	mov	sp, r7
 8102a1c:	bd80      	pop	{r7, pc}
 8102a1e:	bf00      	nop
 8102a20:	58024400 	.word	0x58024400
 8102a24:	58020000 	.word	0x58020000
 8102a28:	58020c00 	.word	0x58020c00

08102a2c <__io_putchar>:

/* USER CODE BEGIN 4 */
// Funzione per calcolare il segno (usata da copysign)

int __io_putchar(int ch){
 8102a2c:	b580      	push	{r7, lr}
 8102a2e:	b082      	sub	sp, #8
 8102a30:	af00      	add	r7, sp, #0
 8102a32:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t*)&ch,1,0xFFFF);
 8102a34:	1d39      	adds	r1, r7, #4
 8102a36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8102a3a:	2201      	movs	r2, #1
 8102a3c:	4807      	ldr	r0, [pc, #28]	@ (8102a5c <__io_putchar+0x30>)
 8102a3e:	f005 fc5d 	bl	81082fc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8102a42:	1d39      	adds	r1, r7, #4
 8102a44:	f04f 33ff 	mov.w	r3, #4294967295
 8102a48:	2201      	movs	r2, #1
 8102a4a:	4805      	ldr	r0, [pc, #20]	@ (8102a60 <__io_putchar+0x34>)
 8102a4c:	f005 fc56 	bl	81082fc <HAL_UART_Transmit>
	return ch;
 8102a50:	687b      	ldr	r3, [r7, #4]
}
 8102a52:	4618      	mov	r0, r3
 8102a54:	3708      	adds	r7, #8
 8102a56:	46bd      	mov	sp, r7
 8102a58:	bd80      	pop	{r7, pc}
 8102a5a:	bf00      	nop
 8102a5c:	100003e4 	.word	0x100003e4
 8102a60:	10000350 	.word	0x10000350

08102a64 <readImu>:
    }
}
static inline double custom_copysign(double x, double y) {
    return (y < 0) ? -fabs(x) : fabs(x);
}
void readImu() {
 8102a64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8102a68:	b090      	sub	sp, #64	@ 0x40
 8102a6a:	af04      	add	r7, sp, #16
    bno055_vector_t v = bno055_getVectorEuler();  // Legge i dati di orientamento (roll, pitch, yaw)
 8102a6c:	f7fe fe3e 	bl	81016ec <bno055_getVectorEuler>
 8102a70:	eeb0 4a40 	vmov.f32	s8, s0
 8102a74:	eef0 4a60 	vmov.f32	s9, s1
 8102a78:	eeb0 5a41 	vmov.f32	s10, s2
 8102a7c:	eef0 5a61 	vmov.f32	s11, s3
 8102a80:	eeb0 6a42 	vmov.f32	s12, s4
 8102a84:	eef0 6a62 	vmov.f32	s13, s5
 8102a88:	eeb0 7a43 	vmov.f32	s14, s6
 8102a8c:	eef0 7a63 	vmov.f32	s15, s7
 8102a90:	ed87 4b00 	vstr	d4, [r7]
 8102a94:	ed87 5b02 	vstr	d5, [r7, #8]
 8102a98:	ed87 6b04 	vstr	d6, [r7, #16]
 8102a9c:	ed87 7b06 	vstr	d7, [r7, #24]
    float roll = v.y;  // Roll (rotazione sull'asse X)
 8102aa0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8102aa4:	4610      	mov	r0, r2
 8102aa6:	4619      	mov	r1, r3
 8102aa8:	f7fe f926 	bl	8100cf8 <__aeabi_d2f>
 8102aac:	4603      	mov	r3, r0
 8102aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float pitch = +v.z; //Pitch (rotazione sull'assey)
 8102ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8102ab4:	4610      	mov	r0, r2
 8102ab6:	4619      	mov	r1, r3
 8102ab8:	f7fe f91e 	bl	8100cf8 <__aeabi_d2f>
 8102abc:	4603      	mov	r3, r0
 8102abe:	62bb      	str	r3, [r7, #40]	@ 0x28
    float yaw = v.x;  // Yaw (rotazione sull'asse Z)
 8102ac0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8102ac4:	4610      	mov	r0, r2
 8102ac6:	4619      	mov	r1, r3
 8102ac8:	f7fe f916 	bl	8100cf8 <__aeabi_d2f>
 8102acc:	4603      	mov	r3, r0
 8102ace:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("Roll: %.2f, Pitch: %.2f, Yaw: %.2f\r\n", roll, pitch, yaw);
 8102ad0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8102ad2:	f7fd fdc1 	bl	8100658 <__aeabi_f2d>
 8102ad6:	4680      	mov	r8, r0
 8102ad8:	4689      	mov	r9, r1
 8102ada:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102adc:	f7fd fdbc 	bl	8100658 <__aeabi_f2d>
 8102ae0:	4604      	mov	r4, r0
 8102ae2:	460d      	mov	r5, r1
 8102ae4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8102ae6:	f7fd fdb7 	bl	8100658 <__aeabi_f2d>
 8102aea:	4602      	mov	r2, r0
 8102aec:	460b      	mov	r3, r1
 8102aee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8102af2:	e9cd 4500 	strd	r4, r5, [sp]
 8102af6:	4642      	mov	r2, r8
 8102af8:	464b      	mov	r3, r9
 8102afa:	4804      	ldr	r0, [pc, #16]	@ (8102b0c <readImu+0xa8>)
 8102afc:	f007 fd3c 	bl	810a578 <iprintf>
    }
 8102b00:	bf00      	nop
 8102b02:	3730      	adds	r7, #48	@ 0x30
 8102b04:	46bd      	mov	sp, r7
 8102b06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8102b0a:	bf00      	nop
 8102b0c:	0810e8a4 	.word	0x0810e8a4

08102b10 <Print_Distances>:
void Print_Distances(void) {
 8102b10:	b5b0      	push	{r4, r5, r7, lr}
 8102b12:	b0a6      	sub	sp, #152	@ 0x98
 8102b14:	af04      	add	r7, sp, #16
    char buffer[128];
    printf("--- Distanze rilevate ---\r\n");
 8102b16:	4826      	ldr	r0, [pc, #152]	@ (8102bb0 <Print_Distances+0xa0>)
 8102b18:	f007 fd96 	bl	810a648 <puts>
    for(uint8_t i = 0; i < anchor_count; i++) {
 8102b1c:	2300      	movs	r3, #0
 8102b1e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8102b22:	e03a      	b.n	8102b9a <Print_Distances+0x8a>
        // Formattazione con 2 decimali (precisione cm)
        snprintf(buffer, sizeof(buffer),
                "Anchor %04X: %.2f m (QF: %d)\r\n",
                measurements[i].anchor_id,
 8102b24:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8102b28:	4922      	ldr	r1, [pc, #136]	@ (8102bb4 <Print_Distances+0xa4>)
 8102b2a:	4613      	mov	r3, r2
 8102b2c:	005b      	lsls	r3, r3, #1
 8102b2e:	4413      	add	r3, r2
 8102b30:	009b      	lsls	r3, r3, #2
 8102b32:	440b      	add	r3, r1
 8102b34:	881b      	ldrh	r3, [r3, #0]
        snprintf(buffer, sizeof(buffer),
 8102b36:	461d      	mov	r5, r3
                measurements[i].distance_m,
 8102b38:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8102b3c:	491d      	ldr	r1, [pc, #116]	@ (8102bb4 <Print_Distances+0xa4>)
 8102b3e:	4613      	mov	r3, r2
 8102b40:	005b      	lsls	r3, r3, #1
 8102b42:	4413      	add	r3, r2
 8102b44:	009b      	lsls	r3, r3, #2
 8102b46:	440b      	add	r3, r1
 8102b48:	3304      	adds	r3, #4
 8102b4a:	681b      	ldr	r3, [r3, #0]
        snprintf(buffer, sizeof(buffer),
 8102b4c:	4618      	mov	r0, r3
 8102b4e:	f7fd fd83 	bl	8100658 <__aeabi_f2d>
                measurements[i].quality);
 8102b52:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8102b56:	4c17      	ldr	r4, [pc, #92]	@ (8102bb4 <Print_Distances+0xa4>)
 8102b58:	4613      	mov	r3, r2
 8102b5a:	005b      	lsls	r3, r3, #1
 8102b5c:	4413      	add	r3, r2
 8102b5e:	009b      	lsls	r3, r3, #2
 8102b60:	4423      	add	r3, r4
 8102b62:	3308      	adds	r3, #8
 8102b64:	781b      	ldrb	r3, [r3, #0]
        snprintf(buffer, sizeof(buffer),
 8102b66:	1d3c      	adds	r4, r7, #4
 8102b68:	9302      	str	r3, [sp, #8]
 8102b6a:	e9cd 0100 	strd	r0, r1, [sp]
 8102b6e:	462b      	mov	r3, r5
 8102b70:	4a11      	ldr	r2, [pc, #68]	@ (8102bb8 <Print_Distances+0xa8>)
 8102b72:	2180      	movs	r1, #128	@ 0x80
 8102b74:	4620      	mov	r0, r4
 8102b76:	f007 fd6f 	bl	810a658 <sniprintf>

        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8102b7a:	1d3b      	adds	r3, r7, #4
 8102b7c:	4618      	mov	r0, r3
 8102b7e:	f7fd fbff 	bl	8100380 <strlen>
 8102b82:	4603      	mov	r3, r0
 8102b84:	b29a      	uxth	r2, r3
 8102b86:	1d39      	adds	r1, r7, #4
 8102b88:	2364      	movs	r3, #100	@ 0x64
 8102b8a:	480c      	ldr	r0, [pc, #48]	@ (8102bbc <Print_Distances+0xac>)
 8102b8c:	f005 fbb6 	bl	81082fc <HAL_UART_Transmit>
    for(uint8_t i = 0; i < anchor_count; i++) {
 8102b90:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8102b94:	3301      	adds	r3, #1
 8102b96:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8102b9a:	4b09      	ldr	r3, [pc, #36]	@ (8102bc0 <Print_Distances+0xb0>)
 8102b9c:	781b      	ldrb	r3, [r3, #0]
 8102b9e:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8102ba2:	429a      	cmp	r2, r3
 8102ba4:	d3be      	bcc.n	8102b24 <Print_Distances+0x14>
    }

}
 8102ba6:	bf00      	nop
 8102ba8:	bf00      	nop
 8102baa:	3788      	adds	r7, #136	@ 0x88
 8102bac:	46bd      	mov	sp, r7
 8102bae:	bdb0      	pop	{r4, r5, r7, pc}
 8102bb0:	0810e8cc 	.word	0x0810e8cc
 8102bb4:	100004b8 	.word	0x100004b8
 8102bb8:	0810e8e8 	.word	0x0810e8e8
 8102bbc:	10000350 	.word	0x10000350
 8102bc0:	10000530 	.word	0x10000530

08102bc4 <print_state>:
void print_state(const kalman_t *kf) {
 8102bc4:	b5b0      	push	{r4, r5, r7, lr}
 8102bc6:	b084      	sub	sp, #16
 8102bc8:	af02      	add	r7, sp, #8
 8102bca:	6078      	str	r0, [r7, #4]
    printf("Stato stimato:\n");
 8102bcc:	4829      	ldr	r0, [pc, #164]	@ (8102c74 <print_state+0xb0>)
 8102bce:	f007 fd3b 	bl	810a648 <puts>
    printf("PosX: %7.3f  VelX: %7.3f\n", kf->x.data[0], kf->x.data[3]);
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	689b      	ldr	r3, [r3, #8]
 8102bd6:	681b      	ldr	r3, [r3, #0]
 8102bd8:	4618      	mov	r0, r3
 8102bda:	f7fd fd3d 	bl	8100658 <__aeabi_f2d>
 8102bde:	4604      	mov	r4, r0
 8102be0:	460d      	mov	r5, r1
 8102be2:	687b      	ldr	r3, [r7, #4]
 8102be4:	689b      	ldr	r3, [r3, #8]
 8102be6:	330c      	adds	r3, #12
 8102be8:	681b      	ldr	r3, [r3, #0]
 8102bea:	4618      	mov	r0, r3
 8102bec:	f7fd fd34 	bl	8100658 <__aeabi_f2d>
 8102bf0:	4602      	mov	r2, r0
 8102bf2:	460b      	mov	r3, r1
 8102bf4:	e9cd 2300 	strd	r2, r3, [sp]
 8102bf8:	4622      	mov	r2, r4
 8102bfa:	462b      	mov	r3, r5
 8102bfc:	481e      	ldr	r0, [pc, #120]	@ (8102c78 <print_state+0xb4>)
 8102bfe:	f007 fcbb 	bl	810a578 <iprintf>
    printf("PosY: %7.3f  VelY: %7.3f\n", kf->x.data[1], kf->x.data[4]);
 8102c02:	687b      	ldr	r3, [r7, #4]
 8102c04:	689b      	ldr	r3, [r3, #8]
 8102c06:	3304      	adds	r3, #4
 8102c08:	681b      	ldr	r3, [r3, #0]
 8102c0a:	4618      	mov	r0, r3
 8102c0c:	f7fd fd24 	bl	8100658 <__aeabi_f2d>
 8102c10:	4604      	mov	r4, r0
 8102c12:	460d      	mov	r5, r1
 8102c14:	687b      	ldr	r3, [r7, #4]
 8102c16:	689b      	ldr	r3, [r3, #8]
 8102c18:	3310      	adds	r3, #16
 8102c1a:	681b      	ldr	r3, [r3, #0]
 8102c1c:	4618      	mov	r0, r3
 8102c1e:	f7fd fd1b 	bl	8100658 <__aeabi_f2d>
 8102c22:	4602      	mov	r2, r0
 8102c24:	460b      	mov	r3, r1
 8102c26:	e9cd 2300 	strd	r2, r3, [sp]
 8102c2a:	4622      	mov	r2, r4
 8102c2c:	462b      	mov	r3, r5
 8102c2e:	4813      	ldr	r0, [pc, #76]	@ (8102c7c <print_state+0xb8>)
 8102c30:	f007 fca2 	bl	810a578 <iprintf>
    printf("PosZ: %7.3f  VelZ: %7.3f\n", kf->x.data[2], kf->x.data[5]);
 8102c34:	687b      	ldr	r3, [r7, #4]
 8102c36:	689b      	ldr	r3, [r3, #8]
 8102c38:	3308      	adds	r3, #8
 8102c3a:	681b      	ldr	r3, [r3, #0]
 8102c3c:	4618      	mov	r0, r3
 8102c3e:	f7fd fd0b 	bl	8100658 <__aeabi_f2d>
 8102c42:	4604      	mov	r4, r0
 8102c44:	460d      	mov	r5, r1
 8102c46:	687b      	ldr	r3, [r7, #4]
 8102c48:	689b      	ldr	r3, [r3, #8]
 8102c4a:	3314      	adds	r3, #20
 8102c4c:	681b      	ldr	r3, [r3, #0]
 8102c4e:	4618      	mov	r0, r3
 8102c50:	f7fd fd02 	bl	8100658 <__aeabi_f2d>
 8102c54:	4602      	mov	r2, r0
 8102c56:	460b      	mov	r3, r1
 8102c58:	e9cd 2300 	strd	r2, r3, [sp]
 8102c5c:	4622      	mov	r2, r4
 8102c5e:	462b      	mov	r3, r5
 8102c60:	4807      	ldr	r0, [pc, #28]	@ (8102c80 <print_state+0xbc>)
 8102c62:	f007 fc89 	bl	810a578 <iprintf>
    printf("----------------------------\n");
 8102c66:	4807      	ldr	r0, [pc, #28]	@ (8102c84 <print_state+0xc0>)
 8102c68:	f007 fcee 	bl	810a648 <puts>
}
 8102c6c:	bf00      	nop
 8102c6e:	3708      	adds	r7, #8
 8102c70:	46bd      	mov	sp, r7
 8102c72:	bdb0      	pop	{r4, r5, r7, pc}
 8102c74:	0810e908 	.word	0x0810e908
 8102c78:	0810e918 	.word	0x0810e918
 8102c7c:	0810e934 	.word	0x0810e934
 8102c80:	0810e950 	.word	0x0810e950
 8102c84:	0810e96c 	.word	0x0810e96c

08102c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102c88:	b480      	push	{r7}
 8102c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102c8c:	b672      	cpsid	i
}
 8102c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102c90:	bf00      	nop
 8102c92:	e7fd      	b.n	8102c90 <Error_Handler+0x8>

08102c94 <matrix_init>:
* \param[in] rows The number of rows
* \param[in] cols The number of columns
* \param[in] buffer The data buffer (of size {\see rows} x {\see cols}).
*/
void matrix_init(matrix_t * mat, uint_fast8_t rows, uint_fast8_t cols, matrix_data_t * buffer)
{
 8102c94:	b480      	push	{r7}
 8102c96:	b085      	sub	sp, #20
 8102c98:	af00      	add	r7, sp, #0
 8102c9a:	60f8      	str	r0, [r7, #12]
 8102c9c:	60b9      	str	r1, [r7, #8]
 8102c9e:	607a      	str	r2, [r7, #4]
 8102ca0:	603b      	str	r3, [r7, #0]
    mat->cols = cols;
 8102ca2:	68fb      	ldr	r3, [r7, #12]
 8102ca4:	687a      	ldr	r2, [r7, #4]
 8102ca6:	605a      	str	r2, [r3, #4]
    mat->rows = rows;
 8102ca8:	68fb      	ldr	r3, [r7, #12]
 8102caa:	68ba      	ldr	r2, [r7, #8]
 8102cac:	601a      	str	r2, [r3, #0]
    mat->data = buffer;
 8102cae:	68fb      	ldr	r3, [r7, #12]
 8102cb0:	683a      	ldr	r2, [r7, #0]
 8102cb2:	609a      	str	r2, [r3, #8]
}
 8102cb4:	bf00      	nop
 8102cb6:	3714      	adds	r7, #20
 8102cb8:	46bd      	mov	sp, r7
 8102cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cbe:	4770      	bx	lr

08102cc0 <matrix_invert_lower>:
* \param[out] inverse The inverse of the lower triangular matrix.
*
* Kudos: https://code.google.com/p/efficient-java-matrix-library
*/
void matrix_invert_lower(const matrix_t *RESTRICT const lower, matrix_t *RESTRICT inverse)
{
 8102cc0:	b480      	push	{r7}
 8102cc2:	b08d      	sub	sp, #52	@ 0x34
 8102cc4:	af00      	add	r7, sp, #0
 8102cc6:	6078      	str	r0, [r7, #4]
 8102cc8:	6039      	str	r1, [r7, #0]
    int_fast8_t i, j, k;
    const uint_fast8_t n = lower->rows;
 8102cca:	687b      	ldr	r3, [r7, #4]
 8102ccc:	681b      	ldr	r3, [r3, #0]
 8102cce:	61bb      	str	r3, [r7, #24]
    const matrix_data_t *const  t = lower->data;
 8102cd0:	687b      	ldr	r3, [r7, #4]
 8102cd2:	689b      	ldr	r3, [r3, #8]
 8102cd4:	617b      	str	r3, [r7, #20]
    matrix_data_t *a = inverse->data;
 8102cd6:	683b      	ldr	r3, [r7, #0]
 8102cd8:	689b      	ldr	r3, [r3, #8]
 8102cda:	613b      	str	r3, [r7, #16]

    // TODO reorder these operations to avoid cache misses

    // inverts the lower triangular system and saves the result
    // in the upper triangle to minimize cache misses
    for(i =0; i < n; ++i )
 8102cdc:	2300      	movs	r3, #0
 8102cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8102ce0:	e05a      	b.n	8102d98 <matrix_invert_lower+0xd8>
    {
        const matrix_data_t el_ii = t[i*n+i];
 8102ce2:	69bb      	ldr	r3, [r7, #24]
 8102ce4:	3301      	adds	r3, #1
 8102ce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8102ce8:	fb02 f303 	mul.w	r3, r2, r3
 8102cec:	009b      	lsls	r3, r3, #2
 8102cee:	697a      	ldr	r2, [r7, #20]
 8102cf0:	4413      	add	r3, r2
 8102cf2:	681b      	ldr	r3, [r3, #0]
 8102cf4:	60bb      	str	r3, [r7, #8]
        for(j = 0; j <= i; ++j )
 8102cf6:	2300      	movs	r3, #0
 8102cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8102cfa:	e046      	b.n	8102d8a <matrix_invert_lower+0xca>
        {
            matrix_data_t sum = (i==j) ? (matrix_data_t)1.0 : (matrix_data_t)0;
 8102cfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8102cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102d00:	429a      	cmp	r2, r3
 8102d02:	d102      	bne.n	8102d0a <matrix_invert_lower+0x4a>
 8102d04:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8102d08:	e001      	b.n	8102d0e <matrix_invert_lower+0x4e>
 8102d0a:	f04f 0300 	mov.w	r3, #0
 8102d0e:	623b      	str	r3, [r7, #32]
            for(k=i-1; k >=j; --k )
 8102d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102d12:	3b01      	subs	r3, #1
 8102d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8102d16:	e020      	b.n	8102d5a <matrix_invert_lower+0x9a>
            {
                sum -= t[i*n+k]*a[j*n+k];
 8102d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102d1a:	69ba      	ldr	r2, [r7, #24]
 8102d1c:	fb03 f202 	mul.w	r2, r3, r2
 8102d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102d22:	4413      	add	r3, r2
 8102d24:	009b      	lsls	r3, r3, #2
 8102d26:	697a      	ldr	r2, [r7, #20]
 8102d28:	4413      	add	r3, r2
 8102d2a:	ed93 7a00 	vldr	s14, [r3]
 8102d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102d30:	69ba      	ldr	r2, [r7, #24]
 8102d32:	fb03 f202 	mul.w	r2, r3, r2
 8102d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102d38:	4413      	add	r3, r2
 8102d3a:	009b      	lsls	r3, r3, #2
 8102d3c:	693a      	ldr	r2, [r7, #16]
 8102d3e:	4413      	add	r3, r2
 8102d40:	edd3 7a00 	vldr	s15, [r3]
 8102d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d48:	ed97 7a08 	vldr	s14, [r7, #32]
 8102d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8102d50:	edc7 7a08 	vstr	s15, [r7, #32]
            for(k=i-1; k >=j; --k )
 8102d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102d56:	3b01      	subs	r3, #1
 8102d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8102d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8102d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102d5e:	429a      	cmp	r2, r3
 8102d60:	dada      	bge.n	8102d18 <matrix_invert_lower+0x58>
            }
            a[j*n+i] = sum / el_ii;
 8102d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102d64:	69ba      	ldr	r2, [r7, #24]
 8102d66:	fb03 f202 	mul.w	r2, r3, r2
 8102d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102d6c:	4413      	add	r3, r2
 8102d6e:	009b      	lsls	r3, r3, #2
 8102d70:	693a      	ldr	r2, [r7, #16]
 8102d72:	4413      	add	r3, r2
 8102d74:	edd7 6a08 	vldr	s13, [r7, #32]
 8102d78:	ed97 7a02 	vldr	s14, [r7, #8]
 8102d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102d80:	edc3 7a00 	vstr	s15, [r3]
        for(j = 0; j <= i; ++j )
 8102d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102d86:	3301      	adds	r3, #1
 8102d88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8102d8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8102d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102d8e:	429a      	cmp	r2, r3
 8102d90:	ddb4      	ble.n	8102cfc <matrix_invert_lower+0x3c>
    for(i =0; i < n; ++i )
 8102d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102d94:	3301      	adds	r3, #1
 8102d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8102d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102d9a:	69ba      	ldr	r2, [r7, #24]
 8102d9c:	429a      	cmp	r2, r3
 8102d9e:	d8a0      	bhi.n	8102ce2 <matrix_invert_lower+0x22>
        }
    }
    // solve the system and handle the previous solution being in the upper triangle
    // takes advantage of symmetry
    for(i=n-1; i>=0; --i )
 8102da0:	69bb      	ldr	r3, [r7, #24]
 8102da2:	3b01      	subs	r3, #1
 8102da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8102da6:	e06d      	b.n	8102e84 <matrix_invert_lower+0x1c4>
    {
        const matrix_data_t el_ii = t[i*n+i];
 8102da8:	69bb      	ldr	r3, [r7, #24]
 8102daa:	3301      	adds	r3, #1
 8102dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8102dae:	fb02 f303 	mul.w	r3, r2, r3
 8102db2:	009b      	lsls	r3, r3, #2
 8102db4:	697a      	ldr	r2, [r7, #20]
 8102db6:	4413      	add	r3, r2
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	60fb      	str	r3, [r7, #12]
        for(j = 0; j <= i; ++j )
 8102dbc:	2300      	movs	r3, #0
 8102dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8102dc0:	e059      	b.n	8102e76 <matrix_invert_lower+0x1b6>
        {
            matrix_data_t sum = (i<j) ? 0 : a[j*n+i];
 8102dc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8102dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102dc6:	429a      	cmp	r2, r3
 8102dc8:	db0a      	blt.n	8102de0 <matrix_invert_lower+0x120>
 8102dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102dcc:	69ba      	ldr	r2, [r7, #24]
 8102dce:	fb03 f202 	mul.w	r2, r3, r2
 8102dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102dd4:	4413      	add	r3, r2
 8102dd6:	009b      	lsls	r3, r3, #2
 8102dd8:	693a      	ldr	r2, [r7, #16]
 8102dda:	4413      	add	r3, r2
 8102ddc:	681b      	ldr	r3, [r3, #0]
 8102dde:	e001      	b.n	8102de4 <matrix_invert_lower+0x124>
 8102de0:	f04f 0300 	mov.w	r3, #0
 8102de4:	61fb      	str	r3, [r7, #28]
            for(k=i+1; k<n; ++k)
 8102de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102de8:	3301      	adds	r3, #1
 8102dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8102dec:	e020      	b.n	8102e30 <matrix_invert_lower+0x170>
            {
                sum -= t[k*n+i]*a[j*n+k];
 8102dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102df0:	69ba      	ldr	r2, [r7, #24]
 8102df2:	fb03 f202 	mul.w	r2, r3, r2
 8102df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102df8:	4413      	add	r3, r2
 8102dfa:	009b      	lsls	r3, r3, #2
 8102dfc:	697a      	ldr	r2, [r7, #20]
 8102dfe:	4413      	add	r3, r2
 8102e00:	ed93 7a00 	vldr	s14, [r3]
 8102e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102e06:	69ba      	ldr	r2, [r7, #24]
 8102e08:	fb03 f202 	mul.w	r2, r3, r2
 8102e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102e0e:	4413      	add	r3, r2
 8102e10:	009b      	lsls	r3, r3, #2
 8102e12:	693a      	ldr	r2, [r7, #16]
 8102e14:	4413      	add	r3, r2
 8102e16:	edd3 7a00 	vldr	s15, [r3]
 8102e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e1e:	ed97 7a07 	vldr	s14, [r7, #28]
 8102e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8102e26:	edc7 7a07 	vstr	s15, [r7, #28]
            for(k=i+1; k<n; ++k)
 8102e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102e2c:	3301      	adds	r3, #1
 8102e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8102e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102e32:	69ba      	ldr	r2, [r7, #24]
 8102e34:	429a      	cmp	r2, r3
 8102e36:	d8da      	bhi.n	8102dee <matrix_invert_lower+0x12e>
            }
            a[i*n+j] = a[j*n+i] = sum / el_ii;
 8102e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102e3a:	69ba      	ldr	r2, [r7, #24]
 8102e3c:	fb03 f202 	mul.w	r2, r3, r2
 8102e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102e42:	4413      	add	r3, r2
 8102e44:	009b      	lsls	r3, r3, #2
 8102e46:	693a      	ldr	r2, [r7, #16]
 8102e48:	4413      	add	r3, r2
 8102e4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8102e4e:	ed97 7a03 	vldr	s14, [r7, #12]
 8102e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102e56:	edc3 7a00 	vstr	s15, [r3]
 8102e5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8102e5c:	69b9      	ldr	r1, [r7, #24]
 8102e5e:	fb02 f101 	mul.w	r1, r2, r1
 8102e62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8102e64:	440a      	add	r2, r1
 8102e66:	0092      	lsls	r2, r2, #2
 8102e68:	6939      	ldr	r1, [r7, #16]
 8102e6a:	440a      	add	r2, r1
 8102e6c:	681b      	ldr	r3, [r3, #0]
 8102e6e:	6013      	str	r3, [r2, #0]
        for(j = 0; j <= i; ++j )
 8102e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102e72:	3301      	adds	r3, #1
 8102e74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8102e76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8102e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102e7a:	429a      	cmp	r2, r3
 8102e7c:	dda1      	ble.n	8102dc2 <matrix_invert_lower+0x102>
    for(i=n-1; i>=0; --i )
 8102e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102e80:	3b01      	subs	r3, #1
 8102e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8102e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102e86:	2b00      	cmp	r3, #0
 8102e88:	da8e      	bge.n	8102da8 <matrix_invert_lower+0xe8>
        }
    }
}
 8102e8a:	bf00      	nop
 8102e8c:	bf00      	nop
 8102e8e:	3734      	adds	r7, #52	@ 0x34
 8102e90:	46bd      	mov	sp, r7
 8102e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e96:	4770      	bx	lr

08102e98 <matrix_mult>:
* \param[in] aux Auxiliary vector that can hold a column of {\ref b}
*
* Kudos: https://code.google.com/p/efficient-java-matrix-library
*/
void matrix_mult(const matrix_t *const a, const matrix_t *const b, const matrix_t *RESTRICT c, matrix_data_t *const baux)
{
 8102e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8102e9a:	b08d      	sub	sp, #52	@ 0x34
 8102e9c:	af00      	add	r7, sp, #0
 8102e9e:	60f8      	str	r0, [r7, #12]
 8102ea0:	60b9      	str	r1, [r7, #8]
 8102ea2:	607a      	str	r2, [r7, #4]
 8102ea4:	603b      	str	r3, [r7, #0]
    register int_fast16_t i, j, k;
    const uint_fast8_t bcols = b->cols;
 8102ea6:	68bb      	ldr	r3, [r7, #8]
 8102ea8:	685b      	ldr	r3, [r3, #4]
 8102eaa:	627b      	str	r3, [r7, #36]	@ 0x24
    const uint_fast8_t ccols = c->cols;
 8102eac:	687b      	ldr	r3, [r7, #4]
 8102eae:	685b      	ldr	r3, [r3, #4]
 8102eb0:	623b      	str	r3, [r7, #32]
    const uint_fast8_t brows = b->rows;
 8102eb2:	68bb      	ldr	r3, [r7, #8]
 8102eb4:	681b      	ldr	r3, [r3, #0]
 8102eb6:	61fb      	str	r3, [r7, #28]
    const uint_fast8_t arows = a->rows;
 8102eb8:	68fb      	ldr	r3, [r7, #12]
 8102eba:	681b      	ldr	r3, [r3, #0]
 8102ebc:	61bb      	str	r3, [r7, #24]

    matrix_data_t *RESTRICT const adata = a->data;
 8102ebe:	68fb      	ldr	r3, [r7, #12]
 8102ec0:	689b      	ldr	r3, [r3, #8]
 8102ec2:	617b      	str	r3, [r7, #20]
    matrix_data_t *RESTRICT const cdata = c->data;
 8102ec4:	687b      	ldr	r3, [r7, #4]
 8102ec6:	689b      	ldr	r3, [r3, #8]
 8102ec8:	613b      	str	r3, [r7, #16]

    // assert pointer validity
    assert(a != (matrix_t*)0);
 8102eca:	68fb      	ldr	r3, [r7, #12]
 8102ecc:	2b00      	cmp	r3, #0
 8102ece:	d105      	bne.n	8102edc <matrix_mult+0x44>
 8102ed0:	4b45      	ldr	r3, [pc, #276]	@ (8102fe8 <matrix_mult+0x150>)
 8102ed2:	4a46      	ldr	r2, [pc, #280]	@ (8102fec <matrix_mult+0x154>)
 8102ed4:	2161      	movs	r1, #97	@ 0x61
 8102ed6:	4846      	ldr	r0, [pc, #280]	@ (8102ff0 <matrix_mult+0x158>)
 8102ed8:	f006 fbf0 	bl	81096bc <__assert_func>
    assert(b != (matrix_t*)0);
 8102edc:	68bb      	ldr	r3, [r7, #8]
 8102ede:	2b00      	cmp	r3, #0
 8102ee0:	d105      	bne.n	8102eee <matrix_mult+0x56>
 8102ee2:	4b44      	ldr	r3, [pc, #272]	@ (8102ff4 <matrix_mult+0x15c>)
 8102ee4:	4a41      	ldr	r2, [pc, #260]	@ (8102fec <matrix_mult+0x154>)
 8102ee6:	2162      	movs	r1, #98	@ 0x62
 8102ee8:	4841      	ldr	r0, [pc, #260]	@ (8102ff0 <matrix_mult+0x158>)
 8102eea:	f006 fbe7 	bl	81096bc <__assert_func>
    assert(c != (matrix_t*)0);
 8102eee:	687b      	ldr	r3, [r7, #4]
 8102ef0:	2b00      	cmp	r3, #0
 8102ef2:	d105      	bne.n	8102f00 <matrix_mult+0x68>
 8102ef4:	4b40      	ldr	r3, [pc, #256]	@ (8102ff8 <matrix_mult+0x160>)
 8102ef6:	4a3d      	ldr	r2, [pc, #244]	@ (8102fec <matrix_mult+0x154>)
 8102ef8:	2163      	movs	r1, #99	@ 0x63
 8102efa:	483d      	ldr	r0, [pc, #244]	@ (8102ff0 <matrix_mult+0x158>)
 8102efc:	f006 fbde 	bl	81096bc <__assert_func>
    assert(baux != (matrix_data_t*)0);
 8102f00:	683b      	ldr	r3, [r7, #0]
 8102f02:	2b00      	cmp	r3, #0
 8102f04:	d105      	bne.n	8102f12 <matrix_mult+0x7a>
 8102f06:	4b3d      	ldr	r3, [pc, #244]	@ (8102ffc <matrix_mult+0x164>)
 8102f08:	4a38      	ldr	r2, [pc, #224]	@ (8102fec <matrix_mult+0x154>)
 8102f0a:	2164      	movs	r1, #100	@ 0x64
 8102f0c:	4838      	ldr	r0, [pc, #224]	@ (8102ff0 <matrix_mult+0x158>)
 8102f0e:	f006 fbd5 	bl	81096bc <__assert_func>

    // test dimensions of a and b
    assert(a->cols == b->rows);
 8102f12:	68fb      	ldr	r3, [r7, #12]
 8102f14:	685a      	ldr	r2, [r3, #4]
 8102f16:	68bb      	ldr	r3, [r7, #8]
 8102f18:	681b      	ldr	r3, [r3, #0]
 8102f1a:	429a      	cmp	r2, r3
 8102f1c:	d005      	beq.n	8102f2a <matrix_mult+0x92>
 8102f1e:	4b38      	ldr	r3, [pc, #224]	@ (8103000 <matrix_mult+0x168>)
 8102f20:	4a32      	ldr	r2, [pc, #200]	@ (8102fec <matrix_mult+0x154>)
 8102f22:	2167      	movs	r1, #103	@ 0x67
 8102f24:	4832      	ldr	r0, [pc, #200]	@ (8102ff0 <matrix_mult+0x158>)
 8102f26:	f006 fbc9 	bl	81096bc <__assert_func>

    // test dimension of c
    assert(a->rows == c->rows);
 8102f2a:	68fb      	ldr	r3, [r7, #12]
 8102f2c:	681a      	ldr	r2, [r3, #0]
 8102f2e:	687b      	ldr	r3, [r7, #4]
 8102f30:	681b      	ldr	r3, [r3, #0]
 8102f32:	429a      	cmp	r2, r3
 8102f34:	d005      	beq.n	8102f42 <matrix_mult+0xaa>
 8102f36:	4b33      	ldr	r3, [pc, #204]	@ (8103004 <matrix_mult+0x16c>)
 8102f38:	4a2c      	ldr	r2, [pc, #176]	@ (8102fec <matrix_mult+0x154>)
 8102f3a:	216a      	movs	r1, #106	@ 0x6a
 8102f3c:	482c      	ldr	r0, [pc, #176]	@ (8102ff0 <matrix_mult+0x158>)
 8102f3e:	f006 fbbd 	bl	81096bc <__assert_func>
    assert(b->cols == c->cols);
 8102f42:	68bb      	ldr	r3, [r7, #8]
 8102f44:	685a      	ldr	r2, [r3, #4]
 8102f46:	687b      	ldr	r3, [r7, #4]
 8102f48:	685b      	ldr	r3, [r3, #4]
 8102f4a:	429a      	cmp	r2, r3
 8102f4c:	d005      	beq.n	8102f5a <matrix_mult+0xc2>
 8102f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8103008 <matrix_mult+0x170>)
 8102f50:	4a26      	ldr	r2, [pc, #152]	@ (8102fec <matrix_mult+0x154>)
 8102f52:	216b      	movs	r1, #107	@ 0x6b
 8102f54:	4826      	ldr	r0, [pc, #152]	@ (8102ff0 <matrix_mult+0x158>)
 8102f56:	f006 fbb1 	bl	81096bc <__assert_func>

    //for (j = 0; j < bcols; ++j)
    for (j = bcols-1; j >= 0; --j)
 8102f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102f5c:	3b01      	subs	r3, #1
 8102f5e:	461c      	mov	r4, r3
 8102f60:	e03a      	b.n	8102fd8 <matrix_mult+0x140>
    {
        // create a copy of the column in B to avoid cache issues
        matrix_get_column_copy(b, j, baux);
 8102f62:	4623      	mov	r3, r4
 8102f64:	683a      	ldr	r2, [r7, #0]
 8102f66:	4619      	mov	r1, r3
 8102f68:	68b8      	ldr	r0, [r7, #8]
 8102f6a:	f000 fa9b 	bl	81034a4 <matrix_get_column_copy>

        uint_fast16_t indexA = 0;
 8102f6e:	2300      	movs	r3, #0
 8102f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (i = 0; i < arows; ++i)
 8102f72:	2500      	movs	r5, #0
 8102f74:	e02b      	b.n	8102fce <matrix_mult+0x136>
        {
            matrix_data_t total = (matrix_data_t)0;
 8102f76:	f04f 0300 	mov.w	r3, #0
 8102f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
            for (k = 0; k < brows;)
 8102f7c:	2600      	movs	r6, #0
 8102f7e:	e016      	b.n	8102fae <matrix_mult+0x116>
            {
                total += adata[indexA++]*baux[k++];
 8102f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102f82:	1c5a      	adds	r2, r3, #1
 8102f84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8102f86:	009b      	lsls	r3, r3, #2
 8102f88:	697a      	ldr	r2, [r7, #20]
 8102f8a:	4413      	add	r3, r2
 8102f8c:	ed93 7a00 	vldr	s14, [r3]
 8102f90:	4633      	mov	r3, r6
 8102f92:	1c5e      	adds	r6, r3, #1
 8102f94:	009b      	lsls	r3, r3, #2
 8102f96:	683a      	ldr	r2, [r7, #0]
 8102f98:	4413      	add	r3, r2
 8102f9a:	edd3 7a00 	vldr	s15, [r3]
 8102f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102fa2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8102fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102faa:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            for (k = 0; k < brows;)
 8102fae:	4632      	mov	r2, r6
 8102fb0:	69fb      	ldr	r3, [r7, #28]
 8102fb2:	4293      	cmp	r3, r2
 8102fb4:	d8e4      	bhi.n	8102f80 <matrix_mult+0xe8>
            }
            cdata[i*ccols + j] = total;
 8102fb6:	462a      	mov	r2, r5
 8102fb8:	6a3b      	ldr	r3, [r7, #32]
 8102fba:	fb02 f303 	mul.w	r3, r2, r3
 8102fbe:	4622      	mov	r2, r4
 8102fc0:	4413      	add	r3, r2
 8102fc2:	009b      	lsls	r3, r3, #2
 8102fc4:	693a      	ldr	r2, [r7, #16]
 8102fc6:	4413      	add	r3, r2
 8102fc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8102fca:	601a      	str	r2, [r3, #0]
        for (i = 0; i < arows; ++i)
 8102fcc:	3501      	adds	r5, #1
 8102fce:	462a      	mov	r2, r5
 8102fd0:	69bb      	ldr	r3, [r7, #24]
 8102fd2:	4293      	cmp	r3, r2
 8102fd4:	d8cf      	bhi.n	8102f76 <matrix_mult+0xde>
    for (j = bcols-1; j >= 0; --j)
 8102fd6:	3c01      	subs	r4, #1
 8102fd8:	2c00      	cmp	r4, #0
 8102fda:	dac2      	bge.n	8102f62 <matrix_mult+0xca>
        }
    }
}
 8102fdc:	bf00      	nop
 8102fde:	bf00      	nop
 8102fe0:	3734      	adds	r7, #52	@ 0x34
 8102fe2:	46bd      	mov	sp, r7
 8102fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8102fe6:	bf00      	nop
 8102fe8:	0810e98c 	.word	0x0810e98c
 8102fec:	0810ea64 	.word	0x0810ea64
 8102ff0:	0810e9a0 	.word	0x0810e9a0
 8102ff4:	0810e9b8 	.word	0x0810e9b8
 8102ff8:	0810e9cc 	.word	0x0810e9cc
 8102ffc:	0810e9e0 	.word	0x0810e9e0
 8103000:	0810e9fc 	.word	0x0810e9fc
 8103004:	0810ea10 	.word	0x0810ea10
 8103008:	0810ea24 	.word	0x0810ea24

0810300c <matrix_mult_transb>:
* \param[in] aux Auxiliary vector that can hold a column of {\ref b}
*
* Kudos: https://code.google.com/p/efficient-java-matrix-library
*/
void matrix_mult_transb(const matrix_t *const a, const matrix_t *const b, const matrix_t *RESTRICT c)
{
 810300c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8103010:	b08e      	sub	sp, #56	@ 0x38
 8103012:	af00      	add	r7, sp, #0
 8103014:	60f8      	str	r0, [r7, #12]
 8103016:	60b9      	str	r1, [r7, #8]
 8103018:	607a      	str	r2, [r7, #4]
    register uint_fast16_t xA, xB, indexA, indexB, end;
    const uint_fast8_t bcols = b->cols;
 810301a:	68bb      	ldr	r3, [r7, #8]
 810301c:	685b      	ldr	r3, [r3, #4]
 810301e:	62bb      	str	r3, [r7, #40]	@ 0x28
    const uint_fast8_t brows = b->rows;
 8103020:	68bb      	ldr	r3, [r7, #8]
 8103022:	681b      	ldr	r3, [r3, #0]
 8103024:	627b      	str	r3, [r7, #36]	@ 0x24
    const uint_fast8_t arows = a->rows;
 8103026:	68fb      	ldr	r3, [r7, #12]
 8103028:	681b      	ldr	r3, [r3, #0]
 810302a:	623b      	str	r3, [r7, #32]
    const uint_fast8_t acols = a->cols;
 810302c:	68fb      	ldr	r3, [r7, #12]
 810302e:	685b      	ldr	r3, [r3, #4]
 8103030:	61fb      	str	r3, [r7, #28]

    matrix_data_t *const adata = a->data;
 8103032:	68fb      	ldr	r3, [r7, #12]
 8103034:	689b      	ldr	r3, [r3, #8]
 8103036:	61bb      	str	r3, [r7, #24]
    matrix_data_t *const bdata = b->data;
 8103038:	68bb      	ldr	r3, [r7, #8]
 810303a:	689b      	ldr	r3, [r3, #8]
 810303c:	617b      	str	r3, [r7, #20]
    matrix_data_t *RESTRICT const cdata = c->data;
 810303e:	687b      	ldr	r3, [r7, #4]
 8103040:	689b      	ldr	r3, [r3, #8]
 8103042:	613b      	str	r3, [r7, #16]

    uint_fast16_t cIndex = 0;
 8103044:	2300      	movs	r3, #0
 8103046:	637b      	str	r3, [r7, #52]	@ 0x34
    uint_fast16_t aIndexStart = 0;
 8103048:	2300      	movs	r3, #0
 810304a:	633b      	str	r3, [r7, #48]	@ 0x30

    for (xA = 0; xA < arows; ++xA)
 810304c:	2400      	movs	r4, #0
 810304e:	e036      	b.n	81030be <matrix_mult_transb+0xb2>
    {
        end = aIndexStart + bcols;
 8103050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8103052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103054:	eb02 0803 	add.w	r8, r2, r3
        indexB = 0;
 8103058:	f04f 0900 	mov.w	r9, #0
        for (xB = 0; xB < brows; ++xB)
 810305c:	2500      	movs	r5, #0
 810305e:	e026      	b.n	81030ae <matrix_mult_transb+0xa2>
        {
            indexA = aIndexStart;
 8103060:	6b3e      	ldr	r6, [r7, #48]	@ 0x30
            matrix_data_t total = 0;
 8103062:	f04f 0300 	mov.w	r3, #0
 8103066:	62fb      	str	r3, [r7, #44]	@ 0x2c

            while (indexA < end)
 8103068:	e016      	b.n	8103098 <matrix_mult_transb+0x8c>
            {
                total += adata[indexA++] * bdata[indexB++];
 810306a:	4633      	mov	r3, r6
 810306c:	1c5e      	adds	r6, r3, #1
 810306e:	009b      	lsls	r3, r3, #2
 8103070:	69ba      	ldr	r2, [r7, #24]
 8103072:	4413      	add	r3, r2
 8103074:	ed93 7a00 	vldr	s14, [r3]
 8103078:	464b      	mov	r3, r9
 810307a:	f103 0901 	add.w	r9, r3, #1
 810307e:	009b      	lsls	r3, r3, #2
 8103080:	697a      	ldr	r2, [r7, #20]
 8103082:	4413      	add	r3, r2
 8103084:	edd3 7a00 	vldr	s15, [r3]
 8103088:	ee67 7a27 	vmul.f32	s15, s14, s15
 810308c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8103090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8103094:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            while (indexA < end)
 8103098:	4546      	cmp	r6, r8
 810309a:	d3e6      	bcc.n	810306a <matrix_mult_transb+0x5e>
            }

            cdata[cIndex++] = total;
 810309c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810309e:	1c5a      	adds	r2, r3, #1
 81030a0:	637a      	str	r2, [r7, #52]	@ 0x34
 81030a2:	009b      	lsls	r3, r3, #2
 81030a4:	693a      	ldr	r2, [r7, #16]
 81030a6:	4413      	add	r3, r2
 81030a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81030aa:	601a      	str	r2, [r3, #0]
        for (xB = 0; xB < brows; ++xB)
 81030ac:	3501      	adds	r5, #1
 81030ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81030b0:	429d      	cmp	r5, r3
 81030b2:	d3d5      	bcc.n	8103060 <matrix_mult_transb+0x54>
        }
        aIndexStart += acols;
 81030b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81030b6:	69fb      	ldr	r3, [r7, #28]
 81030b8:	4413      	add	r3, r2
 81030ba:	633b      	str	r3, [r7, #48]	@ 0x30
    for (xA = 0; xA < arows; ++xA)
 81030bc:	3401      	adds	r4, #1
 81030be:	6a3b      	ldr	r3, [r7, #32]
 81030c0:	429c      	cmp	r4, r3
 81030c2:	d3c5      	bcc.n	8103050 <matrix_mult_transb+0x44>
    }
}
 81030c4:	bf00      	nop
 81030c6:	bf00      	nop
 81030c8:	3738      	adds	r7, #56	@ 0x38
 81030ca:	46bd      	mov	sp, r7
 81030cc:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 81030d0:	4770      	bx	lr

081030d2 <matrix_multadd_transb>:
* \param[in] aux Auxiliary vector that can hold a column of {\ref b}
*
* Kudos: https://code.google.com/p/efficient-java-matrix-library
*/
void matrix_multadd_transb(const matrix_t *const a, const matrix_t *const b, const matrix_t *RESTRICT c)
{
 81030d2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 81030d6:	b08e      	sub	sp, #56	@ 0x38
 81030d8:	af00      	add	r7, sp, #0
 81030da:	60f8      	str	r0, [r7, #12]
 81030dc:	60b9      	str	r1, [r7, #8]
 81030de:	607a      	str	r2, [r7, #4]
    register uint_fast16_t xA, xB, indexA, indexB, end;
    const uint_fast8_t bcols = b->cols;
 81030e0:	68bb      	ldr	r3, [r7, #8]
 81030e2:	685b      	ldr	r3, [r3, #4]
 81030e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    const uint_fast8_t brows = b->rows;
 81030e6:	68bb      	ldr	r3, [r7, #8]
 81030e8:	681b      	ldr	r3, [r3, #0]
 81030ea:	627b      	str	r3, [r7, #36]	@ 0x24
    const uint_fast8_t arows = a->rows;
 81030ec:	68fb      	ldr	r3, [r7, #12]
 81030ee:	681b      	ldr	r3, [r3, #0]
 81030f0:	623b      	str	r3, [r7, #32]
    const uint_fast8_t acols = a->cols;
 81030f2:	68fb      	ldr	r3, [r7, #12]
 81030f4:	685b      	ldr	r3, [r3, #4]
 81030f6:	61fb      	str	r3, [r7, #28]

    matrix_data_t *const adata = a->data;
 81030f8:	68fb      	ldr	r3, [r7, #12]
 81030fa:	689b      	ldr	r3, [r3, #8]
 81030fc:	61bb      	str	r3, [r7, #24]
    matrix_data_t *const bdata = b->data;
 81030fe:	68bb      	ldr	r3, [r7, #8]
 8103100:	689b      	ldr	r3, [r3, #8]
 8103102:	617b      	str	r3, [r7, #20]
    matrix_data_t *RESTRICT const cdata = c->data;
 8103104:	687b      	ldr	r3, [r7, #4]
 8103106:	689b      	ldr	r3, [r3, #8]
 8103108:	613b      	str	r3, [r7, #16]

    uint_fast16_t cIndex = 0;
 810310a:	2300      	movs	r3, #0
 810310c:	637b      	str	r3, [r7, #52]	@ 0x34
    uint_fast16_t aIndexStart = 0;
 810310e:	2300      	movs	r3, #0
 8103110:	633b      	str	r3, [r7, #48]	@ 0x30

    for (xA = 0; xA < arows; ++xA)
 8103112:	2400      	movs	r4, #0
 8103114:	e03f      	b.n	8103196 <matrix_multadd_transb+0xc4>
    {
        end = aIndexStart + bcols;
 8103116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8103118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810311a:	eb02 0803 	add.w	r8, r2, r3
        indexB = 0;
 810311e:	f04f 0900 	mov.w	r9, #0
        for (xB = 0; xB < brows; ++xB)
 8103122:	2500      	movs	r5, #0
 8103124:	e02f      	b.n	8103186 <matrix_multadd_transb+0xb4>
        {
            indexA = aIndexStart;
 8103126:	6b3e      	ldr	r6, [r7, #48]	@ 0x30
            matrix_data_t total = 0;
 8103128:	f04f 0300 	mov.w	r3, #0
 810312c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            while (indexA < end)
 810312e:	e016      	b.n	810315e <matrix_multadd_transb+0x8c>
            {
                total += adata[indexA++] * bdata[indexB++];
 8103130:	4633      	mov	r3, r6
 8103132:	1c5e      	adds	r6, r3, #1
 8103134:	009b      	lsls	r3, r3, #2
 8103136:	69ba      	ldr	r2, [r7, #24]
 8103138:	4413      	add	r3, r2
 810313a:	ed93 7a00 	vldr	s14, [r3]
 810313e:	464b      	mov	r3, r9
 8103140:	f103 0901 	add.w	r9, r3, #1
 8103144:	009b      	lsls	r3, r3, #2
 8103146:	697a      	ldr	r2, [r7, #20]
 8103148:	4413      	add	r3, r2
 810314a:	edd3 7a00 	vldr	s15, [r3]
 810314e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103152:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8103156:	ee77 7a27 	vadd.f32	s15, s14, s15
 810315a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            while (indexA < end)
 810315e:	4546      	cmp	r6, r8
 8103160:	d3e6      	bcc.n	8103130 <matrix_multadd_transb+0x5e>
            }

            cdata[cIndex++] += total;
 8103162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103164:	1c5a      	adds	r2, r3, #1
 8103166:	637a      	str	r2, [r7, #52]	@ 0x34
 8103168:	009a      	lsls	r2, r3, #2
 810316a:	6939      	ldr	r1, [r7, #16]
 810316c:	440a      	add	r2, r1
 810316e:	ed92 7a00 	vldr	s14, [r2]
 8103172:	009b      	lsls	r3, r3, #2
 8103174:	693a      	ldr	r2, [r7, #16]
 8103176:	4413      	add	r3, r2
 8103178:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 810317c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8103180:	edc3 7a00 	vstr	s15, [r3]
        for (xB = 0; xB < brows; ++xB)
 8103184:	3501      	adds	r5, #1
 8103186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103188:	429d      	cmp	r5, r3
 810318a:	d3cc      	bcc.n	8103126 <matrix_multadd_transb+0x54>
        }
        aIndexStart += acols;
 810318c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810318e:	69fb      	ldr	r3, [r7, #28]
 8103190:	4413      	add	r3, r2
 8103192:	633b      	str	r3, [r7, #48]	@ 0x30
    for (xA = 0; xA < arows; ++xA)
 8103194:	3401      	adds	r4, #1
 8103196:	6a3b      	ldr	r3, [r7, #32]
 8103198:	429c      	cmp	r4, r3
 810319a:	d3bc      	bcc.n	8103116 <matrix_multadd_transb+0x44>
    }
}
 810319c:	bf00      	nop
 810319e:	bf00      	nop
 81031a0:	3738      	adds	r7, #56	@ 0x38
 81031a2:	46bd      	mov	sp, r7
 81031a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 81031a8:	4770      	bx	lr

081031aa <matrix_mult_rowvector>:
* \param[in] c Resulting vector C (will be overwritten)
*
* Kudos: https://code.google.com/p/efficient-java-matrix-library
*/
void matrix_mult_rowvector(const matrix_t *RESTRICT const a, const matrix_t *RESTRICT const x, matrix_t *RESTRICT const c)
{
 81031aa:	b480      	push	{r7}
 81031ac:	b091      	sub	sp, #68	@ 0x44
 81031ae:	af00      	add	r7, sp, #0
 81031b0:	60f8      	str	r0, [r7, #12]
 81031b2:	60b9      	str	r1, [r7, #8]
 81031b4:	607a      	str	r2, [r7, #4]
    uint_fast16_t i, j;
    const uint_fast8_t arows = a->rows;
 81031b6:	68fb      	ldr	r3, [r7, #12]
 81031b8:	681b      	ldr	r3, [r3, #0]
 81031ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    const uint_fast8_t acols = a->cols;
 81031bc:	68fb      	ldr	r3, [r7, #12]
 81031be:	685b      	ldr	r3, [r3, #4]
 81031c0:	627b      	str	r3, [r7, #36]	@ 0x24

    const matrix_data_t *RESTRICT const adata = a->data;
 81031c2:	68fb      	ldr	r3, [r7, #12]
 81031c4:	689b      	ldr	r3, [r3, #8]
 81031c6:	623b      	str	r3, [r7, #32]
    const matrix_data_t *RESTRICT const xdata = x->data;
 81031c8:	68bb      	ldr	r3, [r7, #8]
 81031ca:	689b      	ldr	r3, [r3, #8]
 81031cc:	61fb      	str	r3, [r7, #28]
    matrix_data_t *RESTRICT const cdata = c->data;
 81031ce:	687b      	ldr	r3, [r7, #4]
 81031d0:	689b      	ldr	r3, [r3, #8]
 81031d2:	61bb      	str	r3, [r7, #24]

    uint_fast16_t indexA = 0;
 81031d4:	2300      	movs	r3, #0
 81031d6:	637b      	str	r3, [r7, #52]	@ 0x34
    uint_fast16_t cIndex = 0;
 81031d8:	2300      	movs	r3, #0
 81031da:	633b      	str	r3, [r7, #48]	@ 0x30
    matrix_data_t b0 = xdata[0];
 81031dc:	69fb      	ldr	r3, [r7, #28]
 81031de:	681b      	ldr	r3, [r3, #0]
 81031e0:	617b      	str	r3, [r7, #20]

    for (i = 0; i < arows; ++i)
 81031e2:	2300      	movs	r3, #0
 81031e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81031e6:	e038      	b.n	810325a <matrix_mult_rowvector+0xb0>
    {
        matrix_data_t total = adata[indexA++] * b0;
 81031e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81031ea:	1c5a      	adds	r2, r3, #1
 81031ec:	637a      	str	r2, [r7, #52]	@ 0x34
 81031ee:	009b      	lsls	r3, r3, #2
 81031f0:	6a3a      	ldr	r2, [r7, #32]
 81031f2:	4413      	add	r3, r2
 81031f4:	edd3 7a00 	vldr	s15, [r3]
 81031f8:	ed97 7a05 	vldr	s14, [r7, #20]
 81031fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103200:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        for (j = 1; j < acols; ++j)
 8103204:	2301      	movs	r3, #1
 8103206:	63bb      	str	r3, [r7, #56]	@ 0x38
 8103208:	e018      	b.n	810323c <matrix_mult_rowvector+0x92>
        {
            total += adata[indexA++] * xdata[j];
 810320a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810320c:	1c5a      	adds	r2, r3, #1
 810320e:	637a      	str	r2, [r7, #52]	@ 0x34
 8103210:	009b      	lsls	r3, r3, #2
 8103212:	6a3a      	ldr	r2, [r7, #32]
 8103214:	4413      	add	r3, r2
 8103216:	ed93 7a00 	vldr	s14, [r3]
 810321a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810321c:	009b      	lsls	r3, r3, #2
 810321e:	69fa      	ldr	r2, [r7, #28]
 8103220:	4413      	add	r3, r2
 8103222:	edd3 7a00 	vldr	s15, [r3]
 8103226:	ee67 7a27 	vmul.f32	s15, s14, s15
 810322a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 810322e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8103232:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        for (j = 1; j < acols; ++j)
 8103236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103238:	3301      	adds	r3, #1
 810323a:	63bb      	str	r3, [r7, #56]	@ 0x38
 810323c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103240:	429a      	cmp	r2, r3
 8103242:	d3e2      	bcc.n	810320a <matrix_mult_rowvector+0x60>
        }

        cdata[cIndex++] = total;
 8103244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103246:	1c5a      	adds	r2, r3, #1
 8103248:	633a      	str	r2, [r7, #48]	@ 0x30
 810324a:	009b      	lsls	r3, r3, #2
 810324c:	69ba      	ldr	r2, [r7, #24]
 810324e:	4413      	add	r3, r2
 8103250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8103252:	601a      	str	r2, [r3, #0]
    for (i = 0; i < arows; ++i)
 8103254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103256:	3301      	adds	r3, #1
 8103258:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810325a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810325c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810325e:	429a      	cmp	r2, r3
 8103260:	d3c2      	bcc.n	81031e8 <matrix_mult_rowvector+0x3e>
    }
}
 8103262:	bf00      	nop
 8103264:	bf00      	nop
 8103266:	3744      	adds	r7, #68	@ 0x44
 8103268:	46bd      	mov	sp, r7
 810326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810326e:	4770      	bx	lr

08103270 <matrix_multadd_rowvector>:
* \param[in] aux Auxiliary vector that can hold a column of {\ref b}
*
* Kudos: https://code.google.com/p/efficient-java-matrix-library
*/
void matrix_multadd_rowvector(const matrix_t *RESTRICT const a, const matrix_t *RESTRICT const x, matrix_t *RESTRICT const c)
{
 8103270:	b480      	push	{r7}
 8103272:	b091      	sub	sp, #68	@ 0x44
 8103274:	af00      	add	r7, sp, #0
 8103276:	60f8      	str	r0, [r7, #12]
 8103278:	60b9      	str	r1, [r7, #8]
 810327a:	607a      	str	r2, [r7, #4]
    uint_fast16_t i, j;
    const uint_fast8_t arows = a->rows;
 810327c:	68fb      	ldr	r3, [r7, #12]
 810327e:	681b      	ldr	r3, [r3, #0]
 8103280:	62bb      	str	r3, [r7, #40]	@ 0x28
    const uint_fast8_t acols = a->cols;
 8103282:	68fb      	ldr	r3, [r7, #12]
 8103284:	685b      	ldr	r3, [r3, #4]
 8103286:	627b      	str	r3, [r7, #36]	@ 0x24

    const matrix_data_t *RESTRICT const adata = a->data;
 8103288:	68fb      	ldr	r3, [r7, #12]
 810328a:	689b      	ldr	r3, [r3, #8]
 810328c:	623b      	str	r3, [r7, #32]
    const matrix_data_t *RESTRICT const xdata = x->data;
 810328e:	68bb      	ldr	r3, [r7, #8]
 8103290:	689b      	ldr	r3, [r3, #8]
 8103292:	61fb      	str	r3, [r7, #28]
    matrix_data_t *RESTRICT const cdata = c->data;
 8103294:	687b      	ldr	r3, [r7, #4]
 8103296:	689b      	ldr	r3, [r3, #8]
 8103298:	61bb      	str	r3, [r7, #24]

    uint_fast16_t indexA = 0;
 810329a:	2300      	movs	r3, #0
 810329c:	637b      	str	r3, [r7, #52]	@ 0x34
    uint_fast16_t cIndex = 0;
 810329e:	2300      	movs	r3, #0
 81032a0:	633b      	str	r3, [r7, #48]	@ 0x30
    matrix_data_t b0 = xdata[0];
 81032a2:	69fb      	ldr	r3, [r7, #28]
 81032a4:	681b      	ldr	r3, [r3, #0]
 81032a6:	617b      	str	r3, [r7, #20]

    for (i = 0; i < arows; ++i)
 81032a8:	2300      	movs	r3, #0
 81032aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81032ac:	e041      	b.n	8103332 <matrix_multadd_rowvector+0xc2>
    {
        matrix_data_t total = adata[indexA++] * b0;
 81032ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81032b0:	1c5a      	adds	r2, r3, #1
 81032b2:	637a      	str	r2, [r7, #52]	@ 0x34
 81032b4:	009b      	lsls	r3, r3, #2
 81032b6:	6a3a      	ldr	r2, [r7, #32]
 81032b8:	4413      	add	r3, r2
 81032ba:	edd3 7a00 	vldr	s15, [r3]
 81032be:	ed97 7a05 	vldr	s14, [r7, #20]
 81032c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81032c6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        for (j = 1; j < acols; ++j)
 81032ca:	2301      	movs	r3, #1
 81032cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 81032ce:	e018      	b.n	8103302 <matrix_multadd_rowvector+0x92>
        {
            total += adata[indexA++] * xdata[j];
 81032d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81032d2:	1c5a      	adds	r2, r3, #1
 81032d4:	637a      	str	r2, [r7, #52]	@ 0x34
 81032d6:	009b      	lsls	r3, r3, #2
 81032d8:	6a3a      	ldr	r2, [r7, #32]
 81032da:	4413      	add	r3, r2
 81032dc:	ed93 7a00 	vldr	s14, [r3]
 81032e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81032e2:	009b      	lsls	r3, r3, #2
 81032e4:	69fa      	ldr	r2, [r7, #28]
 81032e6:	4413      	add	r3, r2
 81032e8:	edd3 7a00 	vldr	s15, [r3]
 81032ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 81032f0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 81032f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 81032f8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        for (j = 1; j < acols; ++j)
 81032fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81032fe:	3301      	adds	r3, #1
 8103300:	63bb      	str	r3, [r7, #56]	@ 0x38
 8103302:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8103304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103306:	429a      	cmp	r2, r3
 8103308:	d3e2      	bcc.n	81032d0 <matrix_multadd_rowvector+0x60>
        }

        cdata[cIndex++] += total;
 810330a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810330c:	1c5a      	adds	r2, r3, #1
 810330e:	633a      	str	r2, [r7, #48]	@ 0x30
 8103310:	009a      	lsls	r2, r3, #2
 8103312:	69b9      	ldr	r1, [r7, #24]
 8103314:	440a      	add	r2, r1
 8103316:	ed92 7a00 	vldr	s14, [r2]
 810331a:	009b      	lsls	r3, r3, #2
 810331c:	69ba      	ldr	r2, [r7, #24]
 810331e:	4413      	add	r3, r2
 8103320:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8103324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8103328:	edc3 7a00 	vstr	s15, [r3]
    for (i = 0; i < arows; ++i)
 810332c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810332e:	3301      	adds	r3, #1
 8103330:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103332:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8103334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103336:	429a      	cmp	r2, r3
 8103338:	d3b9      	bcc.n	81032ae <matrix_multadd_rowvector+0x3e>
    }
}
 810333a:	bf00      	nop
 810333c:	bf00      	nop
 810333e:	3744      	adds	r7, #68	@ 0x44
 8103340:	46bd      	mov	sp, r7
 8103342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103346:	4770      	bx	lr

08103348 <matrix_copy>:
//RIGHE NUOVE
void matrix_copy(const matrix_t *src, matrix_t *dst) {
 8103348:	b580      	push	{r7, lr}
 810334a:	b082      	sub	sp, #8
 810334c:	af00      	add	r7, sp, #0
 810334e:	6078      	str	r0, [r7, #4]
 8103350:	6039      	str	r1, [r7, #0]
    memcpy(dst->data, src->data, src->rows * src->cols * sizeof(matrix_data_t));
 8103352:	683b      	ldr	r3, [r7, #0]
 8103354:	6898      	ldr	r0, [r3, #8]
 8103356:	687b      	ldr	r3, [r7, #4]
 8103358:	6899      	ldr	r1, [r3, #8]
 810335a:	687b      	ldr	r3, [r7, #4]
 810335c:	681b      	ldr	r3, [r3, #0]
 810335e:	687a      	ldr	r2, [r7, #4]
 8103360:	6852      	ldr	r2, [r2, #4]
 8103362:	fb02 f303 	mul.w	r3, r2, r3
 8103366:	009b      	lsls	r3, r3, #2
 8103368:	461a      	mov	r2, r3
 810336a:	f007 fb20 	bl	810a9ae <memcpy>
}
 810336e:	bf00      	nop
 8103370:	3708      	adds	r7, #8
 8103372:	46bd      	mov	sp, r7
 8103374:	bd80      	pop	{r7, pc}

08103376 <matrix_sub_inplace_b>:

void matrix_sub_inplace_b(const matrix_t *a, matrix_t *b) {
 8103376:	b480      	push	{r7}
 8103378:	b085      	sub	sp, #20
 810337a:	af00      	add	r7, sp, #0
 810337c:	6078      	str	r0, [r7, #4]
 810337e:	6039      	str	r1, [r7, #0]
    for (uint_fast8_t i = 0; i < a->rows * a->cols; i++) {
 8103380:	2300      	movs	r3, #0
 8103382:	60fb      	str	r3, [r7, #12]
 8103384:	e019      	b.n	81033ba <matrix_sub_inplace_b+0x44>
        b->data[i] = a->data[i] - b->data[i];
 8103386:	687b      	ldr	r3, [r7, #4]
 8103388:	689a      	ldr	r2, [r3, #8]
 810338a:	68fb      	ldr	r3, [r7, #12]
 810338c:	009b      	lsls	r3, r3, #2
 810338e:	4413      	add	r3, r2
 8103390:	ed93 7a00 	vldr	s14, [r3]
 8103394:	683b      	ldr	r3, [r7, #0]
 8103396:	689a      	ldr	r2, [r3, #8]
 8103398:	68fb      	ldr	r3, [r7, #12]
 810339a:	009b      	lsls	r3, r3, #2
 810339c:	4413      	add	r3, r2
 810339e:	edd3 7a00 	vldr	s15, [r3]
 81033a2:	683b      	ldr	r3, [r7, #0]
 81033a4:	689a      	ldr	r2, [r3, #8]
 81033a6:	68fb      	ldr	r3, [r7, #12]
 81033a8:	009b      	lsls	r3, r3, #2
 81033aa:	4413      	add	r3, r2
 81033ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 81033b0:	edc3 7a00 	vstr	s15, [r3]
    for (uint_fast8_t i = 0; i < a->rows * a->cols; i++) {
 81033b4:	68fb      	ldr	r3, [r7, #12]
 81033b6:	3301      	adds	r3, #1
 81033b8:	60fb      	str	r3, [r7, #12]
 81033ba:	687b      	ldr	r3, [r7, #4]
 81033bc:	681b      	ldr	r3, [r3, #0]
 81033be:	687a      	ldr	r2, [r7, #4]
 81033c0:	6852      	ldr	r2, [r2, #4]
 81033c2:	fb02 f303 	mul.w	r3, r2, r3
 81033c6:	68fa      	ldr	r2, [r7, #12]
 81033c8:	429a      	cmp	r2, r3
 81033ca:	d3dc      	bcc.n	8103386 <matrix_sub_inplace_b+0x10>
    }
}
 81033cc:	bf00      	nop
 81033ce:	bf00      	nop
 81033d0:	3714      	adds	r7, #20
 81033d2:	46bd      	mov	sp, r7
 81033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033d8:	4770      	bx	lr

081033da <matrix_add_inplace>:

void matrix_add_inplace(matrix_t *a, const matrix_t *b) {
 81033da:	b480      	push	{r7}
 81033dc:	b085      	sub	sp, #20
 81033de:	af00      	add	r7, sp, #0
 81033e0:	6078      	str	r0, [r7, #4]
 81033e2:	6039      	str	r1, [r7, #0]
    for (uint_fast8_t i = 0; i < a->rows * a->cols; i++) {
 81033e4:	2300      	movs	r3, #0
 81033e6:	60fb      	str	r3, [r7, #12]
 81033e8:	e019      	b.n	810341e <matrix_add_inplace+0x44>
        a->data[i] += b->data[i];
 81033ea:	687b      	ldr	r3, [r7, #4]
 81033ec:	689a      	ldr	r2, [r3, #8]
 81033ee:	68fb      	ldr	r3, [r7, #12]
 81033f0:	009b      	lsls	r3, r3, #2
 81033f2:	4413      	add	r3, r2
 81033f4:	ed93 7a00 	vldr	s14, [r3]
 81033f8:	683b      	ldr	r3, [r7, #0]
 81033fa:	689a      	ldr	r2, [r3, #8]
 81033fc:	68fb      	ldr	r3, [r7, #12]
 81033fe:	009b      	lsls	r3, r3, #2
 8103400:	4413      	add	r3, r2
 8103402:	edd3 7a00 	vldr	s15, [r3]
 8103406:	687b      	ldr	r3, [r7, #4]
 8103408:	689a      	ldr	r2, [r3, #8]
 810340a:	68fb      	ldr	r3, [r7, #12]
 810340c:	009b      	lsls	r3, r3, #2
 810340e:	4413      	add	r3, r2
 8103410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8103414:	edc3 7a00 	vstr	s15, [r3]
    for (uint_fast8_t i = 0; i < a->rows * a->cols; i++) {
 8103418:	68fb      	ldr	r3, [r7, #12]
 810341a:	3301      	adds	r3, #1
 810341c:	60fb      	str	r3, [r7, #12]
 810341e:	687b      	ldr	r3, [r7, #4]
 8103420:	681b      	ldr	r3, [r3, #0]
 8103422:	687a      	ldr	r2, [r7, #4]
 8103424:	6852      	ldr	r2, [r2, #4]
 8103426:	fb02 f303 	mul.w	r3, r2, r3
 810342a:	68fa      	ldr	r2, [r7, #12]
 810342c:	429a      	cmp	r2, r3
 810342e:	d3dc      	bcc.n	81033ea <matrix_add_inplace+0x10>
    }
}
 8103430:	bf00      	nop
 8103432:	bf00      	nop
 8103434:	3714      	adds	r7, #20
 8103436:	46bd      	mov	sp, r7
 8103438:	f85d 7b04 	ldr.w	r7, [sp], #4
 810343c:	4770      	bx	lr

0810343e <matrix_sub>:

void matrix_sub(matrix_t *a, const matrix_t *b, matrix_t *c) {
 810343e:	b480      	push	{r7}
 8103440:	b087      	sub	sp, #28
 8103442:	af00      	add	r7, sp, #0
 8103444:	60f8      	str	r0, [r7, #12]
 8103446:	60b9      	str	r1, [r7, #8]
 8103448:	607a      	str	r2, [r7, #4]
    for (uint_fast8_t i = 0; i < a->rows * a->cols; i++) {
 810344a:	2300      	movs	r3, #0
 810344c:	617b      	str	r3, [r7, #20]
 810344e:	e019      	b.n	8103484 <matrix_sub+0x46>
        c->data[i] = a->data[i] - b->data[i];
 8103450:	68fb      	ldr	r3, [r7, #12]
 8103452:	689a      	ldr	r2, [r3, #8]
 8103454:	697b      	ldr	r3, [r7, #20]
 8103456:	009b      	lsls	r3, r3, #2
 8103458:	4413      	add	r3, r2
 810345a:	ed93 7a00 	vldr	s14, [r3]
 810345e:	68bb      	ldr	r3, [r7, #8]
 8103460:	689a      	ldr	r2, [r3, #8]
 8103462:	697b      	ldr	r3, [r7, #20]
 8103464:	009b      	lsls	r3, r3, #2
 8103466:	4413      	add	r3, r2
 8103468:	edd3 7a00 	vldr	s15, [r3]
 810346c:	687b      	ldr	r3, [r7, #4]
 810346e:	689a      	ldr	r2, [r3, #8]
 8103470:	697b      	ldr	r3, [r7, #20]
 8103472:	009b      	lsls	r3, r3, #2
 8103474:	4413      	add	r3, r2
 8103476:	ee77 7a67 	vsub.f32	s15, s14, s15
 810347a:	edc3 7a00 	vstr	s15, [r3]
    for (uint_fast8_t i = 0; i < a->rows * a->cols; i++) {
 810347e:	697b      	ldr	r3, [r7, #20]
 8103480:	3301      	adds	r3, #1
 8103482:	617b      	str	r3, [r7, #20]
 8103484:	68fb      	ldr	r3, [r7, #12]
 8103486:	681b      	ldr	r3, [r3, #0]
 8103488:	68fa      	ldr	r2, [r7, #12]
 810348a:	6852      	ldr	r2, [r2, #4]
 810348c:	fb02 f303 	mul.w	r3, r2, r3
 8103490:	697a      	ldr	r2, [r7, #20]
 8103492:	429a      	cmp	r2, r3
 8103494:	d3dc      	bcc.n	8103450 <matrix_sub+0x12>
    }
}
 8103496:	bf00      	nop
 8103498:	bf00      	nop
 810349a:	371c      	adds	r7, #28
 810349c:	46bd      	mov	sp, r7
 810349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034a2:	4770      	bx	lr

081034a4 <matrix_get_column_copy>:

void matrix_get_column_copy(const matrix_t *mat, uint_fast8_t col, matrix_data_t *out_col) {
 81034a4:	b480      	push	{r7}
 81034a6:	b087      	sub	sp, #28
 81034a8:	af00      	add	r7, sp, #0
 81034aa:	60f8      	str	r0, [r7, #12]
 81034ac:	60b9      	str	r1, [r7, #8]
 81034ae:	607a      	str	r2, [r7, #4]
    for (uint_fast8_t i = 0; i < mat->rows; i++) {
 81034b0:	2300      	movs	r3, #0
 81034b2:	617b      	str	r3, [r7, #20]
 81034b4:	e013      	b.n	81034de <matrix_get_column_copy+0x3a>
        out_col[i] = mat->data[i * mat->cols + col];
 81034b6:	68fb      	ldr	r3, [r7, #12]
 81034b8:	689a      	ldr	r2, [r3, #8]
 81034ba:	68fb      	ldr	r3, [r7, #12]
 81034bc:	685b      	ldr	r3, [r3, #4]
 81034be:	6979      	ldr	r1, [r7, #20]
 81034c0:	fb03 f101 	mul.w	r1, r3, r1
 81034c4:	68bb      	ldr	r3, [r7, #8]
 81034c6:	440b      	add	r3, r1
 81034c8:	009b      	lsls	r3, r3, #2
 81034ca:	441a      	add	r2, r3
 81034cc:	697b      	ldr	r3, [r7, #20]
 81034ce:	009b      	lsls	r3, r3, #2
 81034d0:	6879      	ldr	r1, [r7, #4]
 81034d2:	440b      	add	r3, r1
 81034d4:	6812      	ldr	r2, [r2, #0]
 81034d6:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t i = 0; i < mat->rows; i++) {
 81034d8:	697b      	ldr	r3, [r7, #20]
 81034da:	3301      	adds	r3, #1
 81034dc:	617b      	str	r3, [r7, #20]
 81034de:	68fb      	ldr	r3, [r7, #12]
 81034e0:	681b      	ldr	r3, [r3, #0]
 81034e2:	697a      	ldr	r2, [r7, #20]
 81034e4:	429a      	cmp	r2, r3
 81034e6:	d3e6      	bcc.n	81034b6 <matrix_get_column_copy+0x12>
    }
}
 81034e8:	bf00      	nop
 81034ea:	bf00      	nop
 81034ec:	371c      	adds	r7, #28
 81034ee:	46bd      	mov	sp, r7
 81034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034f4:	4770      	bx	lr
	...

081034f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81034f8:	b480      	push	{r7}
 81034fa:	b083      	sub	sp, #12
 81034fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81034fe:	4b0a      	ldr	r3, [pc, #40]	@ (8103528 <HAL_MspInit+0x30>)
 8103500:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103504:	4a08      	ldr	r2, [pc, #32]	@ (8103528 <HAL_MspInit+0x30>)
 8103506:	f043 0302 	orr.w	r3, r3, #2
 810350a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810350e:	4b06      	ldr	r3, [pc, #24]	@ (8103528 <HAL_MspInit+0x30>)
 8103510:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103514:	f003 0302 	and.w	r3, r3, #2
 8103518:	607b      	str	r3, [r7, #4]
 810351a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810351c:	bf00      	nop
 810351e:	370c      	adds	r7, #12
 8103520:	46bd      	mov	sp, r7
 8103522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103526:	4770      	bx	lr
 8103528:	58024400 	.word	0x58024400

0810352c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 810352c:	b580      	push	{r7, lr}
 810352e:	b0ba      	sub	sp, #232	@ 0xe8
 8103530:	af00      	add	r7, sp, #0
 8103532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103534:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8103538:	2200      	movs	r2, #0
 810353a:	601a      	str	r2, [r3, #0]
 810353c:	605a      	str	r2, [r3, #4]
 810353e:	609a      	str	r2, [r3, #8]
 8103540:	60da      	str	r2, [r3, #12]
 8103542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103544:	f107 0310 	add.w	r3, r7, #16
 8103548:	22c0      	movs	r2, #192	@ 0xc0
 810354a:	2100      	movs	r1, #0
 810354c:	4618      	mov	r0, r3
 810354e:	f007 f9af 	bl	810a8b0 <memset>
  if(hi2c->Instance==I2C1)
 8103552:	687b      	ldr	r3, [r7, #4]
 8103554:	681b      	ldr	r3, [r3, #0]
 8103556:	4a26      	ldr	r2, [pc, #152]	@ (81035f0 <HAL_I2C_MspInit+0xc4>)
 8103558:	4293      	cmp	r3, r2
 810355a:	d145      	bne.n	81035e8 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 810355c:	f04f 0208 	mov.w	r2, #8
 8103560:	f04f 0300 	mov.w	r3, #0
 8103564:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8103568:	2300      	movs	r3, #0
 810356a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810356e:	f107 0310 	add.w	r3, r7, #16
 8103572:	4618      	mov	r0, r3
 8103574:	f001 ff1a 	bl	81053ac <HAL_RCCEx_PeriphCLKConfig>
 8103578:	4603      	mov	r3, r0
 810357a:	2b00      	cmp	r3, #0
 810357c:	d001      	beq.n	8103582 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 810357e:	f7ff fb83 	bl	8102c88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8103582:	4b1c      	ldr	r3, [pc, #112]	@ (81035f4 <HAL_I2C_MspInit+0xc8>)
 8103584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103588:	4a1a      	ldr	r2, [pc, #104]	@ (81035f4 <HAL_I2C_MspInit+0xc8>)
 810358a:	f043 0302 	orr.w	r3, r3, #2
 810358e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103592:	4b18      	ldr	r3, [pc, #96]	@ (81035f4 <HAL_I2C_MspInit+0xc8>)
 8103594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103598:	f003 0302 	and.w	r3, r3, #2
 810359c:	60fb      	str	r3, [r7, #12]
 810359e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 81035a0:	23c0      	movs	r3, #192	@ 0xc0
 81035a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81035a6:	2312      	movs	r3, #18
 81035a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81035ac:	2300      	movs	r3, #0
 81035ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81035b2:	2300      	movs	r3, #0
 81035b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 81035b8:	2304      	movs	r3, #4
 81035ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81035be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81035c2:	4619      	mov	r1, r3
 81035c4:	480c      	ldr	r0, [pc, #48]	@ (81035f8 <HAL_I2C_MspInit+0xcc>)
 81035c6:	f000 fcb3 	bl	8103f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 81035ca:	4b0a      	ldr	r3, [pc, #40]	@ (81035f4 <HAL_I2C_MspInit+0xc8>)
 81035cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81035d0:	4a08      	ldr	r2, [pc, #32]	@ (81035f4 <HAL_I2C_MspInit+0xc8>)
 81035d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81035d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81035da:	4b06      	ldr	r3, [pc, #24]	@ (81035f4 <HAL_I2C_MspInit+0xc8>)
 81035dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81035e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81035e4:	60bb      	str	r3, [r7, #8]
 81035e6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 81035e8:	bf00      	nop
 81035ea:	37e8      	adds	r7, #232	@ 0xe8
 81035ec:	46bd      	mov	sp, r7
 81035ee:	bd80      	pop	{r7, pc}
 81035f0:	40005400 	.word	0x40005400
 81035f4:	58024400 	.word	0x58024400
 81035f8:	58020400 	.word	0x58020400

081035fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 81035fc:	b480      	push	{r7}
 81035fe:	b085      	sub	sp, #20
 8103600:	af00      	add	r7, sp, #0
 8103602:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8103604:	687b      	ldr	r3, [r7, #4]
 8103606:	681b      	ldr	r3, [r3, #0]
 8103608:	4a0b      	ldr	r2, [pc, #44]	@ (8103638 <HAL_TIM_PWM_MspInit+0x3c>)
 810360a:	4293      	cmp	r3, r2
 810360c:	d10e      	bne.n	810362c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 810360e:	4b0b      	ldr	r3, [pc, #44]	@ (810363c <HAL_TIM_PWM_MspInit+0x40>)
 8103610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103614:	4a09      	ldr	r2, [pc, #36]	@ (810363c <HAL_TIM_PWM_MspInit+0x40>)
 8103616:	f043 0301 	orr.w	r3, r3, #1
 810361a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 810361e:	4b07      	ldr	r3, [pc, #28]	@ (810363c <HAL_TIM_PWM_MspInit+0x40>)
 8103620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103624:	f003 0301 	and.w	r3, r3, #1
 8103628:	60fb      	str	r3, [r7, #12]
 810362a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 810362c:	bf00      	nop
 810362e:	3714      	adds	r7, #20
 8103630:	46bd      	mov	sp, r7
 8103632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103636:	4770      	bx	lr
 8103638:	40010000 	.word	0x40010000
 810363c:	58024400 	.word	0x58024400

08103640 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8103640:	b580      	push	{r7, lr}
 8103642:	b08a      	sub	sp, #40	@ 0x28
 8103644:	af00      	add	r7, sp, #0
 8103646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103648:	f107 0314 	add.w	r3, r7, #20
 810364c:	2200      	movs	r2, #0
 810364e:	601a      	str	r2, [r3, #0]
 8103650:	605a      	str	r2, [r3, #4]
 8103652:	609a      	str	r2, [r3, #8]
 8103654:	60da      	str	r2, [r3, #12]
 8103656:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8103658:	687b      	ldr	r3, [r7, #4]
 810365a:	681b      	ldr	r3, [r3, #0]
 810365c:	4a1a      	ldr	r2, [pc, #104]	@ (81036c8 <HAL_TIM_Encoder_MspInit+0x88>)
 810365e:	4293      	cmp	r3, r2
 8103660:	d12e      	bne.n	81036c0 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8103662:	4b1a      	ldr	r3, [pc, #104]	@ (81036cc <HAL_TIM_Encoder_MspInit+0x8c>)
 8103664:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103668:	4a18      	ldr	r2, [pc, #96]	@ (81036cc <HAL_TIM_Encoder_MspInit+0x8c>)
 810366a:	f043 0304 	orr.w	r3, r3, #4
 810366e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103672:	4b16      	ldr	r3, [pc, #88]	@ (81036cc <HAL_TIM_Encoder_MspInit+0x8c>)
 8103674:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103678:	f003 0304 	and.w	r3, r3, #4
 810367c:	613b      	str	r3, [r7, #16]
 810367e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103680:	4b12      	ldr	r3, [pc, #72]	@ (81036cc <HAL_TIM_Encoder_MspInit+0x8c>)
 8103682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103686:	4a11      	ldr	r2, [pc, #68]	@ (81036cc <HAL_TIM_Encoder_MspInit+0x8c>)
 8103688:	f043 0308 	orr.w	r3, r3, #8
 810368c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103690:	4b0e      	ldr	r3, [pc, #56]	@ (81036cc <HAL_TIM_Encoder_MspInit+0x8c>)
 8103692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103696:	f003 0308 	and.w	r3, r3, #8
 810369a:	60fb      	str	r3, [r7, #12]
 810369c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 810369e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 81036a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81036a4:	2302      	movs	r3, #2
 81036a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81036a8:	2300      	movs	r3, #0
 81036aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81036ac:	2300      	movs	r3, #0
 81036ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 81036b0:	2302      	movs	r3, #2
 81036b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81036b4:	f107 0314 	add.w	r3, r7, #20
 81036b8:	4619      	mov	r1, r3
 81036ba:	4805      	ldr	r0, [pc, #20]	@ (81036d0 <HAL_TIM_Encoder_MspInit+0x90>)
 81036bc:	f000 fc38 	bl	8103f30 <HAL_GPIO_Init>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 81036c0:	bf00      	nop
 81036c2:	3728      	adds	r7, #40	@ 0x28
 81036c4:	46bd      	mov	sp, r7
 81036c6:	bd80      	pop	{r7, pc}
 81036c8:	40000800 	.word	0x40000800
 81036cc:	58024400 	.word	0x58024400
 81036d0:	58020c00 	.word	0x58020c00

081036d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 81036d4:	b480      	push	{r7}
 81036d6:	b085      	sub	sp, #20
 81036d8:	af00      	add	r7, sp, #0
 81036da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 81036dc:	687b      	ldr	r3, [r7, #4]
 81036de:	681b      	ldr	r3, [r3, #0]
 81036e0:	4a0b      	ldr	r2, [pc, #44]	@ (8103710 <HAL_TIM_Base_MspInit+0x3c>)
 81036e2:	4293      	cmp	r3, r2
 81036e4:	d10e      	bne.n	8103704 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 81036e6:	4b0b      	ldr	r3, [pc, #44]	@ (8103714 <HAL_TIM_Base_MspInit+0x40>)
 81036e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81036ec:	4a09      	ldr	r2, [pc, #36]	@ (8103714 <HAL_TIM_Base_MspInit+0x40>)
 81036ee:	f043 0310 	orr.w	r3, r3, #16
 81036f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81036f6:	4b07      	ldr	r3, [pc, #28]	@ (8103714 <HAL_TIM_Base_MspInit+0x40>)
 81036f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81036fc:	f003 0310 	and.w	r3, r3, #16
 8103700:	60fb      	str	r3, [r7, #12]
 8103702:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8103704:	bf00      	nop
 8103706:	3714      	adds	r7, #20
 8103708:	46bd      	mov	sp, r7
 810370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810370e:	4770      	bx	lr
 8103710:	40001000 	.word	0x40001000
 8103714:	58024400 	.word	0x58024400

08103718 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8103718:	b580      	push	{r7, lr}
 810371a:	b088      	sub	sp, #32
 810371c:	af00      	add	r7, sp, #0
 810371e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103720:	f107 030c 	add.w	r3, r7, #12
 8103724:	2200      	movs	r2, #0
 8103726:	601a      	str	r2, [r3, #0]
 8103728:	605a      	str	r2, [r3, #4]
 810372a:	609a      	str	r2, [r3, #8]
 810372c:	60da      	str	r2, [r3, #12]
 810372e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8103730:	687b      	ldr	r3, [r7, #4]
 8103732:	681b      	ldr	r3, [r3, #0]
 8103734:	4a13      	ldr	r2, [pc, #76]	@ (8103784 <HAL_TIM_MspPostInit+0x6c>)
 8103736:	4293      	cmp	r3, r2
 8103738:	d11f      	bne.n	810377a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 810373a:	4b13      	ldr	r3, [pc, #76]	@ (8103788 <HAL_TIM_MspPostInit+0x70>)
 810373c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103740:	4a11      	ldr	r2, [pc, #68]	@ (8103788 <HAL_TIM_MspPostInit+0x70>)
 8103742:	f043 0310 	orr.w	r3, r3, #16
 8103746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810374a:	4b0f      	ldr	r3, [pc, #60]	@ (8103788 <HAL_TIM_MspPostInit+0x70>)
 810374c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103750:	f003 0310 	and.w	r3, r3, #16
 8103754:	60bb      	str	r3, [r7, #8]
 8103756:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8103758:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810375c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810375e:	2302      	movs	r3, #2
 8103760:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103762:	2300      	movs	r3, #0
 8103764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103766:	2300      	movs	r3, #0
 8103768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 810376a:	2301      	movs	r3, #1
 810376c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810376e:	f107 030c 	add.w	r3, r7, #12
 8103772:	4619      	mov	r1, r3
 8103774:	4805      	ldr	r0, [pc, #20]	@ (810378c <HAL_TIM_MspPostInit+0x74>)
 8103776:	f000 fbdb 	bl	8103f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 810377a:	bf00      	nop
 810377c:	3720      	adds	r7, #32
 810377e:	46bd      	mov	sp, r7
 8103780:	bd80      	pop	{r7, pc}
 8103782:	bf00      	nop
 8103784:	40010000 	.word	0x40010000
 8103788:	58024400 	.word	0x58024400
 810378c:	58021000 	.word	0x58021000

08103790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8103790:	b580      	push	{r7, lr}
 8103792:	b0be      	sub	sp, #248	@ 0xf8
 8103794:	af00      	add	r7, sp, #0
 8103796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103798:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810379c:	2200      	movs	r2, #0
 810379e:	601a      	str	r2, [r3, #0]
 81037a0:	605a      	str	r2, [r3, #4]
 81037a2:	609a      	str	r2, [r3, #8]
 81037a4:	60da      	str	r2, [r3, #12]
 81037a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81037a8:	f107 0320 	add.w	r3, r7, #32
 81037ac:	22c0      	movs	r2, #192	@ 0xc0
 81037ae:	2100      	movs	r1, #0
 81037b0:	4618      	mov	r0, r3
 81037b2:	f007 f87d 	bl	810a8b0 <memset>
  if(huart->Instance==USART2)
 81037b6:	687b      	ldr	r3, [r7, #4]
 81037b8:	681b      	ldr	r3, [r3, #0]
 81037ba:	4a5f      	ldr	r2, [pc, #380]	@ (8103938 <HAL_UART_MspInit+0x1a8>)
 81037bc:	4293      	cmp	r3, r2
 81037be:	d16a      	bne.n	8103896 <HAL_UART_MspInit+0x106>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 81037c0:	f04f 0202 	mov.w	r2, #2
 81037c4:	f04f 0300 	mov.w	r3, #0
 81037c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81037cc:	2300      	movs	r3, #0
 81037ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81037d2:	f107 0320 	add.w	r3, r7, #32
 81037d6:	4618      	mov	r0, r3
 81037d8:	f001 fde8 	bl	81053ac <HAL_RCCEx_PeriphCLKConfig>
 81037dc:	4603      	mov	r3, r0
 81037de:	2b00      	cmp	r3, #0
 81037e0:	d001      	beq.n	81037e6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 81037e2:	f7ff fa51 	bl	8102c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 81037e6:	4b55      	ldr	r3, [pc, #340]	@ (810393c <HAL_UART_MspInit+0x1ac>)
 81037e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81037ec:	4a53      	ldr	r2, [pc, #332]	@ (810393c <HAL_UART_MspInit+0x1ac>)
 81037ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81037f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81037f6:	4b51      	ldr	r3, [pc, #324]	@ (810393c <HAL_UART_MspInit+0x1ac>)
 81037f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81037fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103800:	61fb      	str	r3, [r7, #28]
 8103802:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8103804:	4b4d      	ldr	r3, [pc, #308]	@ (810393c <HAL_UART_MspInit+0x1ac>)
 8103806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810380a:	4a4c      	ldr	r2, [pc, #304]	@ (810393c <HAL_UART_MspInit+0x1ac>)
 810380c:	f043 0301 	orr.w	r3, r3, #1
 8103810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103814:	4b49      	ldr	r3, [pc, #292]	@ (810393c <HAL_UART_MspInit+0x1ac>)
 8103816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810381a:	f003 0301 	and.w	r3, r3, #1
 810381e:	61bb      	str	r3, [r7, #24]
 8103820:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103822:	4b46      	ldr	r3, [pc, #280]	@ (810393c <HAL_UART_MspInit+0x1ac>)
 8103824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103828:	4a44      	ldr	r2, [pc, #272]	@ (810393c <HAL_UART_MspInit+0x1ac>)
 810382a:	f043 0308 	orr.w	r3, r3, #8
 810382e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103832:	4b42      	ldr	r3, [pc, #264]	@ (810393c <HAL_UART_MspInit+0x1ac>)
 8103834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103838:	f003 0308 	and.w	r3, r3, #8
 810383c:	617b      	str	r3, [r7, #20]
 810383e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8103840:	2308      	movs	r3, #8
 8103842:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103846:	2302      	movs	r3, #2
 8103848:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810384c:	2300      	movs	r3, #0
 810384e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103852:	2300      	movs	r3, #0
 8103854:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8103858:	2307      	movs	r3, #7
 810385a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810385e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8103862:	4619      	mov	r1, r3
 8103864:	4836      	ldr	r0, [pc, #216]	@ (8103940 <HAL_UART_MspInit+0x1b0>)
 8103866:	f000 fb63 	bl	8103f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 810386a:	2320      	movs	r3, #32
 810386c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103870:	2302      	movs	r3, #2
 8103872:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103876:	2300      	movs	r3, #0
 8103878:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810387c:	2300      	movs	r3, #0
 810387e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8103882:	2307      	movs	r3, #7
 8103884:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103888:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810388c:	4619      	mov	r1, r3
 810388e:	482d      	ldr	r0, [pc, #180]	@ (8103944 <HAL_UART_MspInit+0x1b4>)
 8103890:	f000 fb4e 	bl	8103f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8103894:	e04b      	b.n	810392e <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART3)
 8103896:	687b      	ldr	r3, [r7, #4]
 8103898:	681b      	ldr	r3, [r3, #0]
 810389a:	4a2b      	ldr	r2, [pc, #172]	@ (8103948 <HAL_UART_MspInit+0x1b8>)
 810389c:	4293      	cmp	r3, r2
 810389e:	d146      	bne.n	810392e <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81038a0:	f04f 0202 	mov.w	r2, #2
 81038a4:	f04f 0300 	mov.w	r3, #0
 81038a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81038ac:	2300      	movs	r3, #0
 81038ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81038b2:	f107 0320 	add.w	r3, r7, #32
 81038b6:	4618      	mov	r0, r3
 81038b8:	f001 fd78 	bl	81053ac <HAL_RCCEx_PeriphCLKConfig>
 81038bc:	4603      	mov	r3, r0
 81038be:	2b00      	cmp	r3, #0
 81038c0:	d001      	beq.n	81038c6 <HAL_UART_MspInit+0x136>
      Error_Handler();
 81038c2:	f7ff f9e1 	bl	8102c88 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 81038c6:	4b1d      	ldr	r3, [pc, #116]	@ (810393c <HAL_UART_MspInit+0x1ac>)
 81038c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81038cc:	4a1b      	ldr	r2, [pc, #108]	@ (810393c <HAL_UART_MspInit+0x1ac>)
 81038ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 81038d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81038d6:	4b19      	ldr	r3, [pc, #100]	@ (810393c <HAL_UART_MspInit+0x1ac>)
 81038d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81038dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81038e0:	613b      	str	r3, [r7, #16]
 81038e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81038e4:	4b15      	ldr	r3, [pc, #84]	@ (810393c <HAL_UART_MspInit+0x1ac>)
 81038e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81038ea:	4a14      	ldr	r2, [pc, #80]	@ (810393c <HAL_UART_MspInit+0x1ac>)
 81038ec:	f043 0308 	orr.w	r3, r3, #8
 81038f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81038f4:	4b11      	ldr	r3, [pc, #68]	@ (810393c <HAL_UART_MspInit+0x1ac>)
 81038f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81038fa:	f003 0308 	and.w	r3, r3, #8
 81038fe:	60fb      	str	r3, [r7, #12]
 8103900:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8103902:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8103906:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810390a:	2302      	movs	r3, #2
 810390c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103910:	2300      	movs	r3, #0
 8103912:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103916:	2300      	movs	r3, #0
 8103918:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 810391c:	2307      	movs	r3, #7
 810391e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103922:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8103926:	4619      	mov	r1, r3
 8103928:	4806      	ldr	r0, [pc, #24]	@ (8103944 <HAL_UART_MspInit+0x1b4>)
 810392a:	f000 fb01 	bl	8103f30 <HAL_GPIO_Init>
}
 810392e:	bf00      	nop
 8103930:	37f8      	adds	r7, #248	@ 0xf8
 8103932:	46bd      	mov	sp, r7
 8103934:	bd80      	pop	{r7, pc}
 8103936:	bf00      	nop
 8103938:	40004400 	.word	0x40004400
 810393c:	58024400 	.word	0x58024400
 8103940:	58020000 	.word	0x58020000
 8103944:	58020c00 	.word	0x58020c00
 8103948:	40004800 	.word	0x40004800

0810394c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810394c:	b480      	push	{r7}
 810394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8103950:	bf00      	nop
 8103952:	e7fd      	b.n	8103950 <NMI_Handler+0x4>

08103954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8103954:	b480      	push	{r7}
 8103956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8103958:	bf00      	nop
 810395a:	e7fd      	b.n	8103958 <HardFault_Handler+0x4>

0810395c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810395c:	b480      	push	{r7}
 810395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8103960:	bf00      	nop
 8103962:	e7fd      	b.n	8103960 <MemManage_Handler+0x4>

08103964 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8103964:	b480      	push	{r7}
 8103966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8103968:	bf00      	nop
 810396a:	e7fd      	b.n	8103968 <BusFault_Handler+0x4>

0810396c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810396c:	b480      	push	{r7}
 810396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8103970:	bf00      	nop
 8103972:	e7fd      	b.n	8103970 <UsageFault_Handler+0x4>

08103974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8103974:	b480      	push	{r7}
 8103976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8103978:	bf00      	nop
 810397a:	46bd      	mov	sp, r7
 810397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103980:	4770      	bx	lr

08103982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8103982:	b480      	push	{r7}
 8103984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8103986:	bf00      	nop
 8103988:	46bd      	mov	sp, r7
 810398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810398e:	4770      	bx	lr

08103990 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8103990:	b480      	push	{r7}
 8103992:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8103994:	bf00      	nop
 8103996:	46bd      	mov	sp, r7
 8103998:	f85d 7b04 	ldr.w	r7, [sp], #4
 810399c:	4770      	bx	lr

0810399e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810399e:	b580      	push	{r7, lr}
 81039a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81039a2:	f000 f989 	bl	8103cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81039a6:	bf00      	nop
 81039a8:	bd80      	pop	{r7, pc}

081039aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81039aa:	b480      	push	{r7}
 81039ac:	af00      	add	r7, sp, #0
  return 1;
 81039ae:	2301      	movs	r3, #1
}
 81039b0:	4618      	mov	r0, r3
 81039b2:	46bd      	mov	sp, r7
 81039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039b8:	4770      	bx	lr

081039ba <_kill>:

int _kill(int pid, int sig)
{
 81039ba:	b580      	push	{r7, lr}
 81039bc:	b082      	sub	sp, #8
 81039be:	af00      	add	r7, sp, #0
 81039c0:	6078      	str	r0, [r7, #4]
 81039c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 81039c4:	f006 ffc6 	bl	810a954 <__errno>
 81039c8:	4603      	mov	r3, r0
 81039ca:	2216      	movs	r2, #22
 81039cc:	601a      	str	r2, [r3, #0]
  return -1;
 81039ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 81039d2:	4618      	mov	r0, r3
 81039d4:	3708      	adds	r7, #8
 81039d6:	46bd      	mov	sp, r7
 81039d8:	bd80      	pop	{r7, pc}

081039da <_exit>:

void _exit (int status)
{
 81039da:	b580      	push	{r7, lr}
 81039dc:	b082      	sub	sp, #8
 81039de:	af00      	add	r7, sp, #0
 81039e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 81039e2:	f04f 31ff 	mov.w	r1, #4294967295
 81039e6:	6878      	ldr	r0, [r7, #4]
 81039e8:	f7ff ffe7 	bl	81039ba <_kill>
  while (1) {}    /* Make sure we hang here */
 81039ec:	bf00      	nop
 81039ee:	e7fd      	b.n	81039ec <_exit+0x12>

081039f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81039f0:	b580      	push	{r7, lr}
 81039f2:	b086      	sub	sp, #24
 81039f4:	af00      	add	r7, sp, #0
 81039f6:	60f8      	str	r0, [r7, #12]
 81039f8:	60b9      	str	r1, [r7, #8]
 81039fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;
  len=1;
 81039fc:	2301      	movs	r3, #1
 81039fe:	607b      	str	r3, [r7, #4]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103a00:	2300      	movs	r3, #0
 8103a02:	617b      	str	r3, [r7, #20]
 8103a04:	e00a      	b.n	8103a1c <_read+0x2c>
  {
    *ptr++ = __io_getchar();
 8103a06:	f3af 8000 	nop.w
 8103a0a:	4601      	mov	r1, r0
 8103a0c:	68bb      	ldr	r3, [r7, #8]
 8103a0e:	1c5a      	adds	r2, r3, #1
 8103a10:	60ba      	str	r2, [r7, #8]
 8103a12:	b2ca      	uxtb	r2, r1
 8103a14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103a16:	697b      	ldr	r3, [r7, #20]
 8103a18:	3301      	adds	r3, #1
 8103a1a:	617b      	str	r3, [r7, #20]
 8103a1c:	697a      	ldr	r2, [r7, #20]
 8103a1e:	687b      	ldr	r3, [r7, #4]
 8103a20:	429a      	cmp	r2, r3
 8103a22:	dbf0      	blt.n	8103a06 <_read+0x16>
  }

  return len;
 8103a24:	687b      	ldr	r3, [r7, #4]
}
 8103a26:	4618      	mov	r0, r3
 8103a28:	3718      	adds	r7, #24
 8103a2a:	46bd      	mov	sp, r7
 8103a2c:	bd80      	pop	{r7, pc}

08103a2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8103a2e:	b580      	push	{r7, lr}
 8103a30:	b086      	sub	sp, #24
 8103a32:	af00      	add	r7, sp, #0
 8103a34:	60f8      	str	r0, [r7, #12]
 8103a36:	60b9      	str	r1, [r7, #8]
 8103a38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103a3a:	2300      	movs	r3, #0
 8103a3c:	617b      	str	r3, [r7, #20]
 8103a3e:	e009      	b.n	8103a54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8103a40:	68bb      	ldr	r3, [r7, #8]
 8103a42:	1c5a      	adds	r2, r3, #1
 8103a44:	60ba      	str	r2, [r7, #8]
 8103a46:	781b      	ldrb	r3, [r3, #0]
 8103a48:	4618      	mov	r0, r3
 8103a4a:	f7fe ffef 	bl	8102a2c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103a4e:	697b      	ldr	r3, [r7, #20]
 8103a50:	3301      	adds	r3, #1
 8103a52:	617b      	str	r3, [r7, #20]
 8103a54:	697a      	ldr	r2, [r7, #20]
 8103a56:	687b      	ldr	r3, [r7, #4]
 8103a58:	429a      	cmp	r2, r3
 8103a5a:	dbf1      	blt.n	8103a40 <_write+0x12>
  }
  return len;
 8103a5c:	687b      	ldr	r3, [r7, #4]
}
 8103a5e:	4618      	mov	r0, r3
 8103a60:	3718      	adds	r7, #24
 8103a62:	46bd      	mov	sp, r7
 8103a64:	bd80      	pop	{r7, pc}

08103a66 <_close>:

int _close(int file)
{
 8103a66:	b480      	push	{r7}
 8103a68:	b083      	sub	sp, #12
 8103a6a:	af00      	add	r7, sp, #0
 8103a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8103a6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8103a72:	4618      	mov	r0, r3
 8103a74:	370c      	adds	r7, #12
 8103a76:	46bd      	mov	sp, r7
 8103a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a7c:	4770      	bx	lr

08103a7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8103a7e:	b480      	push	{r7}
 8103a80:	b083      	sub	sp, #12
 8103a82:	af00      	add	r7, sp, #0
 8103a84:	6078      	str	r0, [r7, #4]
 8103a86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8103a88:	683b      	ldr	r3, [r7, #0]
 8103a8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8103a8e:	605a      	str	r2, [r3, #4]
  return 0;
 8103a90:	2300      	movs	r3, #0
}
 8103a92:	4618      	mov	r0, r3
 8103a94:	370c      	adds	r7, #12
 8103a96:	46bd      	mov	sp, r7
 8103a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a9c:	4770      	bx	lr

08103a9e <_isatty>:

int _isatty(int file)
{
 8103a9e:	b480      	push	{r7}
 8103aa0:	b083      	sub	sp, #12
 8103aa2:	af00      	add	r7, sp, #0
 8103aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8103aa6:	2301      	movs	r3, #1
}
 8103aa8:	4618      	mov	r0, r3
 8103aaa:	370c      	adds	r7, #12
 8103aac:	46bd      	mov	sp, r7
 8103aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ab2:	4770      	bx	lr

08103ab4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8103ab4:	b480      	push	{r7}
 8103ab6:	b085      	sub	sp, #20
 8103ab8:	af00      	add	r7, sp, #0
 8103aba:	60f8      	str	r0, [r7, #12]
 8103abc:	60b9      	str	r1, [r7, #8]
 8103abe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8103ac0:	2300      	movs	r3, #0
}
 8103ac2:	4618      	mov	r0, r3
 8103ac4:	3714      	adds	r7, #20
 8103ac6:	46bd      	mov	sp, r7
 8103ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103acc:	4770      	bx	lr
	...

08103ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8103ad0:	b580      	push	{r7, lr}
 8103ad2:	b086      	sub	sp, #24
 8103ad4:	af00      	add	r7, sp, #0
 8103ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8103ad8:	4a14      	ldr	r2, [pc, #80]	@ (8103b2c <_sbrk+0x5c>)
 8103ada:	4b15      	ldr	r3, [pc, #84]	@ (8103b30 <_sbrk+0x60>)
 8103adc:	1ad3      	subs	r3, r2, r3
 8103ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8103ae0:	697b      	ldr	r3, [r7, #20]
 8103ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8103ae4:	4b13      	ldr	r3, [pc, #76]	@ (8103b34 <_sbrk+0x64>)
 8103ae6:	681b      	ldr	r3, [r3, #0]
 8103ae8:	2b00      	cmp	r3, #0
 8103aea:	d102      	bne.n	8103af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8103aec:	4b11      	ldr	r3, [pc, #68]	@ (8103b34 <_sbrk+0x64>)
 8103aee:	4a12      	ldr	r2, [pc, #72]	@ (8103b38 <_sbrk+0x68>)
 8103af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8103af2:	4b10      	ldr	r3, [pc, #64]	@ (8103b34 <_sbrk+0x64>)
 8103af4:	681a      	ldr	r2, [r3, #0]
 8103af6:	687b      	ldr	r3, [r7, #4]
 8103af8:	4413      	add	r3, r2
 8103afa:	693a      	ldr	r2, [r7, #16]
 8103afc:	429a      	cmp	r2, r3
 8103afe:	d207      	bcs.n	8103b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8103b00:	f006 ff28 	bl	810a954 <__errno>
 8103b04:	4603      	mov	r3, r0
 8103b06:	220c      	movs	r2, #12
 8103b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8103b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8103b0e:	e009      	b.n	8103b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8103b10:	4b08      	ldr	r3, [pc, #32]	@ (8103b34 <_sbrk+0x64>)
 8103b12:	681b      	ldr	r3, [r3, #0]
 8103b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8103b16:	4b07      	ldr	r3, [pc, #28]	@ (8103b34 <_sbrk+0x64>)
 8103b18:	681a      	ldr	r2, [r3, #0]
 8103b1a:	687b      	ldr	r3, [r7, #4]
 8103b1c:	4413      	add	r3, r2
 8103b1e:	4a05      	ldr	r2, [pc, #20]	@ (8103b34 <_sbrk+0x64>)
 8103b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8103b22:	68fb      	ldr	r3, [r7, #12]
}
 8103b24:	4618      	mov	r0, r3
 8103b26:	3718      	adds	r7, #24
 8103b28:	46bd      	mov	sp, r7
 8103b2a:	bd80      	pop	{r7, pc}
 8103b2c:	10048000 	.word	0x10048000
 8103b30:	00000400 	.word	0x00000400
 8103b34:	10000950 	.word	0x10000950
 8103b38:	10000aa8 	.word	0x10000aa8

08103b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8103b3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8103b74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8103b40:	f7fd fad8 	bl	81010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8103b44:	480c      	ldr	r0, [pc, #48]	@ (8103b78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8103b46:	490d      	ldr	r1, [pc, #52]	@ (8103b7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8103b48:	4a0d      	ldr	r2, [pc, #52]	@ (8103b80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8103b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8103b4c:	e002      	b.n	8103b54 <LoopCopyDataInit>

08103b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8103b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8103b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8103b52:	3304      	adds	r3, #4

08103b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8103b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8103b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8103b58:	d3f9      	bcc.n	8103b4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8103b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8103b84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8103b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8103b88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8103b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8103b60:	e001      	b.n	8103b66 <LoopFillZerobss>

08103b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8103b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8103b64:	3204      	adds	r2, #4

08103b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8103b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8103b68:	d3fb      	bcc.n	8103b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8103b6a:	f006 fef9 	bl	810a960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8103b6e:	f7fe f9cf 	bl	8101f10 <main>
  bx  lr
 8103b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8103b74:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8103b78:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8103b7c:	100001f8 	.word	0x100001f8
  ldr r2, =_sidata
 8103b80:	0810eed4 	.word	0x0810eed4
  ldr r2, =_sbss
 8103b84:	100001f8 	.word	0x100001f8
  ldr r4, =_ebss
 8103b88:	10000aa4 	.word	0x10000aa4

08103b8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8103b8c:	e7fe      	b.n	8103b8c <ADC3_IRQHandler>
	...

08103b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8103b90:	b580      	push	{r7, lr}
 8103b92:	b082      	sub	sp, #8
 8103b94:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8103b96:	4b28      	ldr	r3, [pc, #160]	@ (8103c38 <HAL_Init+0xa8>)
 8103b98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103b9c:	4a26      	ldr	r2, [pc, #152]	@ (8103c38 <HAL_Init+0xa8>)
 8103b9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8103ba2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8103ba6:	4b24      	ldr	r3, [pc, #144]	@ (8103c38 <HAL_Init+0xa8>)
 8103ba8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103bac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8103bb0:	603b      	str	r3, [r7, #0]
 8103bb2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8103bb4:	4b21      	ldr	r3, [pc, #132]	@ (8103c3c <HAL_Init+0xac>)
 8103bb6:	681b      	ldr	r3, [r3, #0]
 8103bb8:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8103bbc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8103bc0:	4a1e      	ldr	r2, [pc, #120]	@ (8103c3c <HAL_Init+0xac>)
 8103bc2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8103bc6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8103bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8103c3c <HAL_Init+0xac>)
 8103bca:	681b      	ldr	r3, [r3, #0]
 8103bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8103c3c <HAL_Init+0xac>)
 8103bce:	f043 0301 	orr.w	r3, r3, #1
 8103bd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8103bd4:	2003      	movs	r0, #3
 8103bd6:	f000 f965 	bl	8103ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8103bda:	f001 fa0f 	bl	8104ffc <HAL_RCC_GetSysClockFreq>
 8103bde:	4602      	mov	r2, r0
 8103be0:	4b15      	ldr	r3, [pc, #84]	@ (8103c38 <HAL_Init+0xa8>)
 8103be2:	699b      	ldr	r3, [r3, #24]
 8103be4:	0a1b      	lsrs	r3, r3, #8
 8103be6:	f003 030f 	and.w	r3, r3, #15
 8103bea:	4915      	ldr	r1, [pc, #84]	@ (8103c40 <HAL_Init+0xb0>)
 8103bec:	5ccb      	ldrb	r3, [r1, r3]
 8103bee:	f003 031f 	and.w	r3, r3, #31
 8103bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8103bf6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8103c38 <HAL_Init+0xa8>)
 8103bfa:	699b      	ldr	r3, [r3, #24]
 8103bfc:	f003 030f 	and.w	r3, r3, #15
 8103c00:	4a0f      	ldr	r2, [pc, #60]	@ (8103c40 <HAL_Init+0xb0>)
 8103c02:	5cd3      	ldrb	r3, [r2, r3]
 8103c04:	f003 031f 	and.w	r3, r3, #31
 8103c08:	687a      	ldr	r2, [r7, #4]
 8103c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8103c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8103c44 <HAL_Init+0xb4>)
 8103c10:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103c12:	4b0c      	ldr	r3, [pc, #48]	@ (8103c44 <HAL_Init+0xb4>)
 8103c14:	681b      	ldr	r3, [r3, #0]
 8103c16:	4a0c      	ldr	r2, [pc, #48]	@ (8103c48 <HAL_Init+0xb8>)
 8103c18:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8103c1a:	2000      	movs	r0, #0
 8103c1c:	f000 f816 	bl	8103c4c <HAL_InitTick>
 8103c20:	4603      	mov	r3, r0
 8103c22:	2b00      	cmp	r3, #0
 8103c24:	d001      	beq.n	8103c2a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8103c26:	2301      	movs	r3, #1
 8103c28:	e002      	b.n	8103c30 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8103c2a:	f7ff fc65 	bl	81034f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8103c2e:	2300      	movs	r3, #0
}
 8103c30:	4618      	mov	r0, r3
 8103c32:	3708      	adds	r7, #8
 8103c34:	46bd      	mov	sp, r7
 8103c36:	bd80      	pop	{r7, pc}
 8103c38:	58024400 	.word	0x58024400
 8103c3c:	40024400 	.word	0x40024400
 8103c40:	0810ea38 	.word	0x0810ea38
 8103c44:	10000004 	.word	0x10000004
 8103c48:	10000000 	.word	0x10000000

08103c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8103c4c:	b580      	push	{r7, lr}
 8103c4e:	b082      	sub	sp, #8
 8103c50:	af00      	add	r7, sp, #0
 8103c52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8103c54:	4b15      	ldr	r3, [pc, #84]	@ (8103cac <HAL_InitTick+0x60>)
 8103c56:	781b      	ldrb	r3, [r3, #0]
 8103c58:	2b00      	cmp	r3, #0
 8103c5a:	d101      	bne.n	8103c60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8103c5c:	2301      	movs	r3, #1
 8103c5e:	e021      	b.n	8103ca4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8103c60:	4b13      	ldr	r3, [pc, #76]	@ (8103cb0 <HAL_InitTick+0x64>)
 8103c62:	681a      	ldr	r2, [r3, #0]
 8103c64:	4b11      	ldr	r3, [pc, #68]	@ (8103cac <HAL_InitTick+0x60>)
 8103c66:	781b      	ldrb	r3, [r3, #0]
 8103c68:	4619      	mov	r1, r3
 8103c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8103c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8103c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8103c76:	4618      	mov	r0, r3
 8103c78:	f000 f939 	bl	8103eee <HAL_SYSTICK_Config>
 8103c7c:	4603      	mov	r3, r0
 8103c7e:	2b00      	cmp	r3, #0
 8103c80:	d001      	beq.n	8103c86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8103c82:	2301      	movs	r3, #1
 8103c84:	e00e      	b.n	8103ca4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	2b0f      	cmp	r3, #15
 8103c8a:	d80a      	bhi.n	8103ca2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8103c8c:	2200      	movs	r2, #0
 8103c8e:	6879      	ldr	r1, [r7, #4]
 8103c90:	f04f 30ff 	mov.w	r0, #4294967295
 8103c94:	f000 f911 	bl	8103eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8103c98:	4a06      	ldr	r2, [pc, #24]	@ (8103cb4 <HAL_InitTick+0x68>)
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8103c9e:	2300      	movs	r3, #0
 8103ca0:	e000      	b.n	8103ca4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8103ca2:	2301      	movs	r3, #1
}
 8103ca4:	4618      	mov	r0, r3
 8103ca6:	3708      	adds	r7, #8
 8103ca8:	46bd      	mov	sp, r7
 8103caa:	bd80      	pop	{r7, pc}
 8103cac:	1000001c 	.word	0x1000001c
 8103cb0:	10000000 	.word	0x10000000
 8103cb4:	10000018 	.word	0x10000018

08103cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103cb8:	b480      	push	{r7}
 8103cba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103cbc:	4b06      	ldr	r3, [pc, #24]	@ (8103cd8 <HAL_IncTick+0x20>)
 8103cbe:	781b      	ldrb	r3, [r3, #0]
 8103cc0:	461a      	mov	r2, r3
 8103cc2:	4b06      	ldr	r3, [pc, #24]	@ (8103cdc <HAL_IncTick+0x24>)
 8103cc4:	681b      	ldr	r3, [r3, #0]
 8103cc6:	4413      	add	r3, r2
 8103cc8:	4a04      	ldr	r2, [pc, #16]	@ (8103cdc <HAL_IncTick+0x24>)
 8103cca:	6013      	str	r3, [r2, #0]
}
 8103ccc:	bf00      	nop
 8103cce:	46bd      	mov	sp, r7
 8103cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cd4:	4770      	bx	lr
 8103cd6:	bf00      	nop
 8103cd8:	1000001c 	.word	0x1000001c
 8103cdc:	10000954 	.word	0x10000954

08103ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8103ce0:	b480      	push	{r7}
 8103ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8103ce4:	4b03      	ldr	r3, [pc, #12]	@ (8103cf4 <HAL_GetTick+0x14>)
 8103ce6:	681b      	ldr	r3, [r3, #0]
}
 8103ce8:	4618      	mov	r0, r3
 8103cea:	46bd      	mov	sp, r7
 8103cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cf0:	4770      	bx	lr
 8103cf2:	bf00      	nop
 8103cf4:	10000954 	.word	0x10000954

08103cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103cf8:	b580      	push	{r7, lr}
 8103cfa:	b084      	sub	sp, #16
 8103cfc:	af00      	add	r7, sp, #0
 8103cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8103d00:	f7ff ffee 	bl	8103ce0 <HAL_GetTick>
 8103d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8103d06:	687b      	ldr	r3, [r7, #4]
 8103d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8103d0a:	68fb      	ldr	r3, [r7, #12]
 8103d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103d10:	d005      	beq.n	8103d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8103d12:	4b0a      	ldr	r3, [pc, #40]	@ (8103d3c <HAL_Delay+0x44>)
 8103d14:	781b      	ldrb	r3, [r3, #0]
 8103d16:	461a      	mov	r2, r3
 8103d18:	68fb      	ldr	r3, [r7, #12]
 8103d1a:	4413      	add	r3, r2
 8103d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8103d1e:	bf00      	nop
 8103d20:	f7ff ffde 	bl	8103ce0 <HAL_GetTick>
 8103d24:	4602      	mov	r2, r0
 8103d26:	68bb      	ldr	r3, [r7, #8]
 8103d28:	1ad3      	subs	r3, r2, r3
 8103d2a:	68fa      	ldr	r2, [r7, #12]
 8103d2c:	429a      	cmp	r2, r3
 8103d2e:	d8f7      	bhi.n	8103d20 <HAL_Delay+0x28>
  {
  }
}
 8103d30:	bf00      	nop
 8103d32:	bf00      	nop
 8103d34:	3710      	adds	r7, #16
 8103d36:	46bd      	mov	sp, r7
 8103d38:	bd80      	pop	{r7, pc}
 8103d3a:	bf00      	nop
 8103d3c:	1000001c 	.word	0x1000001c

08103d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103d40:	b480      	push	{r7}
 8103d42:	b085      	sub	sp, #20
 8103d44:	af00      	add	r7, sp, #0
 8103d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	f003 0307 	and.w	r3, r3, #7
 8103d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103d50:	4b0c      	ldr	r3, [pc, #48]	@ (8103d84 <__NVIC_SetPriorityGrouping+0x44>)
 8103d52:	68db      	ldr	r3, [r3, #12]
 8103d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103d56:	68ba      	ldr	r2, [r7, #8]
 8103d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8103d5c:	4013      	ands	r3, r2
 8103d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103d60:	68fb      	ldr	r3, [r7, #12]
 8103d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103d64:	68bb      	ldr	r3, [r7, #8]
 8103d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8103d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103d72:	4a04      	ldr	r2, [pc, #16]	@ (8103d84 <__NVIC_SetPriorityGrouping+0x44>)
 8103d74:	68bb      	ldr	r3, [r7, #8]
 8103d76:	60d3      	str	r3, [r2, #12]
}
 8103d78:	bf00      	nop
 8103d7a:	3714      	adds	r7, #20
 8103d7c:	46bd      	mov	sp, r7
 8103d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d82:	4770      	bx	lr
 8103d84:	e000ed00 	.word	0xe000ed00

08103d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103d88:	b480      	push	{r7}
 8103d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103d8c:	4b04      	ldr	r3, [pc, #16]	@ (8103da0 <__NVIC_GetPriorityGrouping+0x18>)
 8103d8e:	68db      	ldr	r3, [r3, #12]
 8103d90:	0a1b      	lsrs	r3, r3, #8
 8103d92:	f003 0307 	and.w	r3, r3, #7
}
 8103d96:	4618      	mov	r0, r3
 8103d98:	46bd      	mov	sp, r7
 8103d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d9e:	4770      	bx	lr
 8103da0:	e000ed00 	.word	0xe000ed00

08103da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103da4:	b480      	push	{r7}
 8103da6:	b083      	sub	sp, #12
 8103da8:	af00      	add	r7, sp, #0
 8103daa:	4603      	mov	r3, r0
 8103dac:	6039      	str	r1, [r7, #0]
 8103dae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103db0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103db4:	2b00      	cmp	r3, #0
 8103db6:	db0a      	blt.n	8103dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103db8:	683b      	ldr	r3, [r7, #0]
 8103dba:	b2da      	uxtb	r2, r3
 8103dbc:	490c      	ldr	r1, [pc, #48]	@ (8103df0 <__NVIC_SetPriority+0x4c>)
 8103dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103dc2:	0112      	lsls	r2, r2, #4
 8103dc4:	b2d2      	uxtb	r2, r2
 8103dc6:	440b      	add	r3, r1
 8103dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103dcc:	e00a      	b.n	8103de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103dce:	683b      	ldr	r3, [r7, #0]
 8103dd0:	b2da      	uxtb	r2, r3
 8103dd2:	4908      	ldr	r1, [pc, #32]	@ (8103df4 <__NVIC_SetPriority+0x50>)
 8103dd4:	88fb      	ldrh	r3, [r7, #6]
 8103dd6:	f003 030f 	and.w	r3, r3, #15
 8103dda:	3b04      	subs	r3, #4
 8103ddc:	0112      	lsls	r2, r2, #4
 8103dde:	b2d2      	uxtb	r2, r2
 8103de0:	440b      	add	r3, r1
 8103de2:	761a      	strb	r2, [r3, #24]
}
 8103de4:	bf00      	nop
 8103de6:	370c      	adds	r7, #12
 8103de8:	46bd      	mov	sp, r7
 8103dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dee:	4770      	bx	lr
 8103df0:	e000e100 	.word	0xe000e100
 8103df4:	e000ed00 	.word	0xe000ed00

08103df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103df8:	b480      	push	{r7}
 8103dfa:	b089      	sub	sp, #36	@ 0x24
 8103dfc:	af00      	add	r7, sp, #0
 8103dfe:	60f8      	str	r0, [r7, #12]
 8103e00:	60b9      	str	r1, [r7, #8]
 8103e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103e04:	68fb      	ldr	r3, [r7, #12]
 8103e06:	f003 0307 	and.w	r3, r3, #7
 8103e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103e0c:	69fb      	ldr	r3, [r7, #28]
 8103e0e:	f1c3 0307 	rsb	r3, r3, #7
 8103e12:	2b04      	cmp	r3, #4
 8103e14:	bf28      	it	cs
 8103e16:	2304      	movcs	r3, #4
 8103e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103e1a:	69fb      	ldr	r3, [r7, #28]
 8103e1c:	3304      	adds	r3, #4
 8103e1e:	2b06      	cmp	r3, #6
 8103e20:	d902      	bls.n	8103e28 <NVIC_EncodePriority+0x30>
 8103e22:	69fb      	ldr	r3, [r7, #28]
 8103e24:	3b03      	subs	r3, #3
 8103e26:	e000      	b.n	8103e2a <NVIC_EncodePriority+0x32>
 8103e28:	2300      	movs	r3, #0
 8103e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8103e30:	69bb      	ldr	r3, [r7, #24]
 8103e32:	fa02 f303 	lsl.w	r3, r2, r3
 8103e36:	43da      	mvns	r2, r3
 8103e38:	68bb      	ldr	r3, [r7, #8]
 8103e3a:	401a      	ands	r2, r3
 8103e3c:	697b      	ldr	r3, [r7, #20]
 8103e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103e40:	f04f 31ff 	mov.w	r1, #4294967295
 8103e44:	697b      	ldr	r3, [r7, #20]
 8103e46:	fa01 f303 	lsl.w	r3, r1, r3
 8103e4a:	43d9      	mvns	r1, r3
 8103e4c:	687b      	ldr	r3, [r7, #4]
 8103e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103e50:	4313      	orrs	r3, r2
         );
}
 8103e52:	4618      	mov	r0, r3
 8103e54:	3724      	adds	r7, #36	@ 0x24
 8103e56:	46bd      	mov	sp, r7
 8103e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e5c:	4770      	bx	lr
	...

08103e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103e60:	b580      	push	{r7, lr}
 8103e62:	b082      	sub	sp, #8
 8103e64:	af00      	add	r7, sp, #0
 8103e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103e68:	687b      	ldr	r3, [r7, #4]
 8103e6a:	3b01      	subs	r3, #1
 8103e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8103e70:	d301      	bcc.n	8103e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8103e72:	2301      	movs	r3, #1
 8103e74:	e00f      	b.n	8103e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8103e76:	4a0a      	ldr	r2, [pc, #40]	@ (8103ea0 <SysTick_Config+0x40>)
 8103e78:	687b      	ldr	r3, [r7, #4]
 8103e7a:	3b01      	subs	r3, #1
 8103e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8103e7e:	210f      	movs	r1, #15
 8103e80:	f04f 30ff 	mov.w	r0, #4294967295
 8103e84:	f7ff ff8e 	bl	8103da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103e88:	4b05      	ldr	r3, [pc, #20]	@ (8103ea0 <SysTick_Config+0x40>)
 8103e8a:	2200      	movs	r2, #0
 8103e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8103e8e:	4b04      	ldr	r3, [pc, #16]	@ (8103ea0 <SysTick_Config+0x40>)
 8103e90:	2207      	movs	r2, #7
 8103e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8103e94:	2300      	movs	r3, #0
}
 8103e96:	4618      	mov	r0, r3
 8103e98:	3708      	adds	r7, #8
 8103e9a:	46bd      	mov	sp, r7
 8103e9c:	bd80      	pop	{r7, pc}
 8103e9e:	bf00      	nop
 8103ea0:	e000e010 	.word	0xe000e010

08103ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103ea4:	b580      	push	{r7, lr}
 8103ea6:	b082      	sub	sp, #8
 8103ea8:	af00      	add	r7, sp, #0
 8103eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103eac:	6878      	ldr	r0, [r7, #4]
 8103eae:	f7ff ff47 	bl	8103d40 <__NVIC_SetPriorityGrouping>
}
 8103eb2:	bf00      	nop
 8103eb4:	3708      	adds	r7, #8
 8103eb6:	46bd      	mov	sp, r7
 8103eb8:	bd80      	pop	{r7, pc}

08103eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103eba:	b580      	push	{r7, lr}
 8103ebc:	b086      	sub	sp, #24
 8103ebe:	af00      	add	r7, sp, #0
 8103ec0:	4603      	mov	r3, r0
 8103ec2:	60b9      	str	r1, [r7, #8]
 8103ec4:	607a      	str	r2, [r7, #4]
 8103ec6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103ec8:	f7ff ff5e 	bl	8103d88 <__NVIC_GetPriorityGrouping>
 8103ecc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103ece:	687a      	ldr	r2, [r7, #4]
 8103ed0:	68b9      	ldr	r1, [r7, #8]
 8103ed2:	6978      	ldr	r0, [r7, #20]
 8103ed4:	f7ff ff90 	bl	8103df8 <NVIC_EncodePriority>
 8103ed8:	4602      	mov	r2, r0
 8103eda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103ede:	4611      	mov	r1, r2
 8103ee0:	4618      	mov	r0, r3
 8103ee2:	f7ff ff5f 	bl	8103da4 <__NVIC_SetPriority>
}
 8103ee6:	bf00      	nop
 8103ee8:	3718      	adds	r7, #24
 8103eea:	46bd      	mov	sp, r7
 8103eec:	bd80      	pop	{r7, pc}

08103eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8103eee:	b580      	push	{r7, lr}
 8103ef0:	b082      	sub	sp, #8
 8103ef2:	af00      	add	r7, sp, #0
 8103ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8103ef6:	6878      	ldr	r0, [r7, #4]
 8103ef8:	f7ff ffb2 	bl	8103e60 <SysTick_Config>
 8103efc:	4603      	mov	r3, r0
}
 8103efe:	4618      	mov	r0, r3
 8103f00:	3708      	adds	r7, #8
 8103f02:	46bd      	mov	sp, r7
 8103f04:	bd80      	pop	{r7, pc}
	...

08103f08 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103f08:	b480      	push	{r7}
 8103f0a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103f0c:	4b07      	ldr	r3, [pc, #28]	@ (8103f2c <HAL_GetCurrentCPUID+0x24>)
 8103f0e:	681b      	ldr	r3, [r3, #0]
 8103f10:	091b      	lsrs	r3, r3, #4
 8103f12:	f003 030f 	and.w	r3, r3, #15
 8103f16:	2b07      	cmp	r3, #7
 8103f18:	d101      	bne.n	8103f1e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103f1a:	2303      	movs	r3, #3
 8103f1c:	e000      	b.n	8103f20 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103f1e:	2301      	movs	r3, #1
  }
}
 8103f20:	4618      	mov	r0, r3
 8103f22:	46bd      	mov	sp, r7
 8103f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f28:	4770      	bx	lr
 8103f2a:	bf00      	nop
 8103f2c:	e000ed00 	.word	0xe000ed00

08103f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103f30:	b480      	push	{r7}
 8103f32:	b089      	sub	sp, #36	@ 0x24
 8103f34:	af00      	add	r7, sp, #0
 8103f36:	6078      	str	r0, [r7, #4]
 8103f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8103f3a:	2300      	movs	r3, #0
 8103f3c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8103f3e:	4b89      	ldr	r3, [pc, #548]	@ (8104164 <HAL_GPIO_Init+0x234>)
 8103f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103f42:	e194      	b.n	810426e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103f44:	683b      	ldr	r3, [r7, #0]
 8103f46:	681a      	ldr	r2, [r3, #0]
 8103f48:	2101      	movs	r1, #1
 8103f4a:	69fb      	ldr	r3, [r7, #28]
 8103f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8103f50:	4013      	ands	r3, r2
 8103f52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103f54:	693b      	ldr	r3, [r7, #16]
 8103f56:	2b00      	cmp	r3, #0
 8103f58:	f000 8186 	beq.w	8104268 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103f5c:	683b      	ldr	r3, [r7, #0]
 8103f5e:	685b      	ldr	r3, [r3, #4]
 8103f60:	f003 0303 	and.w	r3, r3, #3
 8103f64:	2b01      	cmp	r3, #1
 8103f66:	d005      	beq.n	8103f74 <HAL_GPIO_Init+0x44>
 8103f68:	683b      	ldr	r3, [r7, #0]
 8103f6a:	685b      	ldr	r3, [r3, #4]
 8103f6c:	f003 0303 	and.w	r3, r3, #3
 8103f70:	2b02      	cmp	r3, #2
 8103f72:	d130      	bne.n	8103fd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103f74:	687b      	ldr	r3, [r7, #4]
 8103f76:	689b      	ldr	r3, [r3, #8]
 8103f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103f7a:	69fb      	ldr	r3, [r7, #28]
 8103f7c:	005b      	lsls	r3, r3, #1
 8103f7e:	2203      	movs	r2, #3
 8103f80:	fa02 f303 	lsl.w	r3, r2, r3
 8103f84:	43db      	mvns	r3, r3
 8103f86:	69ba      	ldr	r2, [r7, #24]
 8103f88:	4013      	ands	r3, r2
 8103f8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103f8c:	683b      	ldr	r3, [r7, #0]
 8103f8e:	68da      	ldr	r2, [r3, #12]
 8103f90:	69fb      	ldr	r3, [r7, #28]
 8103f92:	005b      	lsls	r3, r3, #1
 8103f94:	fa02 f303 	lsl.w	r3, r2, r3
 8103f98:	69ba      	ldr	r2, [r7, #24]
 8103f9a:	4313      	orrs	r3, r2
 8103f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8103f9e:	687b      	ldr	r3, [r7, #4]
 8103fa0:	69ba      	ldr	r2, [r7, #24]
 8103fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8103fa4:	687b      	ldr	r3, [r7, #4]
 8103fa6:	685b      	ldr	r3, [r3, #4]
 8103fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8103faa:	2201      	movs	r2, #1
 8103fac:	69fb      	ldr	r3, [r7, #28]
 8103fae:	fa02 f303 	lsl.w	r3, r2, r3
 8103fb2:	43db      	mvns	r3, r3
 8103fb4:	69ba      	ldr	r2, [r7, #24]
 8103fb6:	4013      	ands	r3, r2
 8103fb8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8103fba:	683b      	ldr	r3, [r7, #0]
 8103fbc:	685b      	ldr	r3, [r3, #4]
 8103fbe:	091b      	lsrs	r3, r3, #4
 8103fc0:	f003 0201 	and.w	r2, r3, #1
 8103fc4:	69fb      	ldr	r3, [r7, #28]
 8103fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8103fca:	69ba      	ldr	r2, [r7, #24]
 8103fcc:	4313      	orrs	r3, r2
 8103fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8103fd0:	687b      	ldr	r3, [r7, #4]
 8103fd2:	69ba      	ldr	r2, [r7, #24]
 8103fd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8103fd6:	683b      	ldr	r3, [r7, #0]
 8103fd8:	685b      	ldr	r3, [r3, #4]
 8103fda:	f003 0303 	and.w	r3, r3, #3
 8103fde:	2b03      	cmp	r3, #3
 8103fe0:	d017      	beq.n	8104012 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8103fe2:	687b      	ldr	r3, [r7, #4]
 8103fe4:	68db      	ldr	r3, [r3, #12]
 8103fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103fe8:	69fb      	ldr	r3, [r7, #28]
 8103fea:	005b      	lsls	r3, r3, #1
 8103fec:	2203      	movs	r2, #3
 8103fee:	fa02 f303 	lsl.w	r3, r2, r3
 8103ff2:	43db      	mvns	r3, r3
 8103ff4:	69ba      	ldr	r2, [r7, #24]
 8103ff6:	4013      	ands	r3, r2
 8103ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8103ffa:	683b      	ldr	r3, [r7, #0]
 8103ffc:	689a      	ldr	r2, [r3, #8]
 8103ffe:	69fb      	ldr	r3, [r7, #28]
 8104000:	005b      	lsls	r3, r3, #1
 8104002:	fa02 f303 	lsl.w	r3, r2, r3
 8104006:	69ba      	ldr	r2, [r7, #24]
 8104008:	4313      	orrs	r3, r2
 810400a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810400c:	687b      	ldr	r3, [r7, #4]
 810400e:	69ba      	ldr	r2, [r7, #24]
 8104010:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104012:	683b      	ldr	r3, [r7, #0]
 8104014:	685b      	ldr	r3, [r3, #4]
 8104016:	f003 0303 	and.w	r3, r3, #3
 810401a:	2b02      	cmp	r3, #2
 810401c:	d123      	bne.n	8104066 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810401e:	69fb      	ldr	r3, [r7, #28]
 8104020:	08da      	lsrs	r2, r3, #3
 8104022:	687b      	ldr	r3, [r7, #4]
 8104024:	3208      	adds	r2, #8
 8104026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810402a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810402c:	69fb      	ldr	r3, [r7, #28]
 810402e:	f003 0307 	and.w	r3, r3, #7
 8104032:	009b      	lsls	r3, r3, #2
 8104034:	220f      	movs	r2, #15
 8104036:	fa02 f303 	lsl.w	r3, r2, r3
 810403a:	43db      	mvns	r3, r3
 810403c:	69ba      	ldr	r2, [r7, #24]
 810403e:	4013      	ands	r3, r2
 8104040:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104042:	683b      	ldr	r3, [r7, #0]
 8104044:	691a      	ldr	r2, [r3, #16]
 8104046:	69fb      	ldr	r3, [r7, #28]
 8104048:	f003 0307 	and.w	r3, r3, #7
 810404c:	009b      	lsls	r3, r3, #2
 810404e:	fa02 f303 	lsl.w	r3, r2, r3
 8104052:	69ba      	ldr	r2, [r7, #24]
 8104054:	4313      	orrs	r3, r2
 8104056:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8104058:	69fb      	ldr	r3, [r7, #28]
 810405a:	08da      	lsrs	r2, r3, #3
 810405c:	687b      	ldr	r3, [r7, #4]
 810405e:	3208      	adds	r2, #8
 8104060:	69b9      	ldr	r1, [r7, #24]
 8104062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8104066:	687b      	ldr	r3, [r7, #4]
 8104068:	681b      	ldr	r3, [r3, #0]
 810406a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810406c:	69fb      	ldr	r3, [r7, #28]
 810406e:	005b      	lsls	r3, r3, #1
 8104070:	2203      	movs	r2, #3
 8104072:	fa02 f303 	lsl.w	r3, r2, r3
 8104076:	43db      	mvns	r3, r3
 8104078:	69ba      	ldr	r2, [r7, #24]
 810407a:	4013      	ands	r3, r2
 810407c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810407e:	683b      	ldr	r3, [r7, #0]
 8104080:	685b      	ldr	r3, [r3, #4]
 8104082:	f003 0203 	and.w	r2, r3, #3
 8104086:	69fb      	ldr	r3, [r7, #28]
 8104088:	005b      	lsls	r3, r3, #1
 810408a:	fa02 f303 	lsl.w	r3, r2, r3
 810408e:	69ba      	ldr	r2, [r7, #24]
 8104090:	4313      	orrs	r3, r2
 8104092:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104094:	687b      	ldr	r3, [r7, #4]
 8104096:	69ba      	ldr	r2, [r7, #24]
 8104098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810409a:	683b      	ldr	r3, [r7, #0]
 810409c:	685b      	ldr	r3, [r3, #4]
 810409e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81040a2:	2b00      	cmp	r3, #0
 81040a4:	f000 80e0 	beq.w	8104268 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81040a8:	4b2f      	ldr	r3, [pc, #188]	@ (8104168 <HAL_GPIO_Init+0x238>)
 81040aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81040ae:	4a2e      	ldr	r2, [pc, #184]	@ (8104168 <HAL_GPIO_Init+0x238>)
 81040b0:	f043 0302 	orr.w	r3, r3, #2
 81040b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81040b8:	4b2b      	ldr	r3, [pc, #172]	@ (8104168 <HAL_GPIO_Init+0x238>)
 81040ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81040be:	f003 0302 	and.w	r3, r3, #2
 81040c2:	60fb      	str	r3, [r7, #12]
 81040c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81040c6:	4a29      	ldr	r2, [pc, #164]	@ (810416c <HAL_GPIO_Init+0x23c>)
 81040c8:	69fb      	ldr	r3, [r7, #28]
 81040ca:	089b      	lsrs	r3, r3, #2
 81040cc:	3302      	adds	r3, #2
 81040ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81040d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81040d4:	69fb      	ldr	r3, [r7, #28]
 81040d6:	f003 0303 	and.w	r3, r3, #3
 81040da:	009b      	lsls	r3, r3, #2
 81040dc:	220f      	movs	r2, #15
 81040de:	fa02 f303 	lsl.w	r3, r2, r3
 81040e2:	43db      	mvns	r3, r3
 81040e4:	69ba      	ldr	r2, [r7, #24]
 81040e6:	4013      	ands	r3, r2
 81040e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81040ea:	687b      	ldr	r3, [r7, #4]
 81040ec:	4a20      	ldr	r2, [pc, #128]	@ (8104170 <HAL_GPIO_Init+0x240>)
 81040ee:	4293      	cmp	r3, r2
 81040f0:	d052      	beq.n	8104198 <HAL_GPIO_Init+0x268>
 81040f2:	687b      	ldr	r3, [r7, #4]
 81040f4:	4a1f      	ldr	r2, [pc, #124]	@ (8104174 <HAL_GPIO_Init+0x244>)
 81040f6:	4293      	cmp	r3, r2
 81040f8:	d031      	beq.n	810415e <HAL_GPIO_Init+0x22e>
 81040fa:	687b      	ldr	r3, [r7, #4]
 81040fc:	4a1e      	ldr	r2, [pc, #120]	@ (8104178 <HAL_GPIO_Init+0x248>)
 81040fe:	4293      	cmp	r3, r2
 8104100:	d02b      	beq.n	810415a <HAL_GPIO_Init+0x22a>
 8104102:	687b      	ldr	r3, [r7, #4]
 8104104:	4a1d      	ldr	r2, [pc, #116]	@ (810417c <HAL_GPIO_Init+0x24c>)
 8104106:	4293      	cmp	r3, r2
 8104108:	d025      	beq.n	8104156 <HAL_GPIO_Init+0x226>
 810410a:	687b      	ldr	r3, [r7, #4]
 810410c:	4a1c      	ldr	r2, [pc, #112]	@ (8104180 <HAL_GPIO_Init+0x250>)
 810410e:	4293      	cmp	r3, r2
 8104110:	d01f      	beq.n	8104152 <HAL_GPIO_Init+0x222>
 8104112:	687b      	ldr	r3, [r7, #4]
 8104114:	4a1b      	ldr	r2, [pc, #108]	@ (8104184 <HAL_GPIO_Init+0x254>)
 8104116:	4293      	cmp	r3, r2
 8104118:	d019      	beq.n	810414e <HAL_GPIO_Init+0x21e>
 810411a:	687b      	ldr	r3, [r7, #4]
 810411c:	4a1a      	ldr	r2, [pc, #104]	@ (8104188 <HAL_GPIO_Init+0x258>)
 810411e:	4293      	cmp	r3, r2
 8104120:	d013      	beq.n	810414a <HAL_GPIO_Init+0x21a>
 8104122:	687b      	ldr	r3, [r7, #4]
 8104124:	4a19      	ldr	r2, [pc, #100]	@ (810418c <HAL_GPIO_Init+0x25c>)
 8104126:	4293      	cmp	r3, r2
 8104128:	d00d      	beq.n	8104146 <HAL_GPIO_Init+0x216>
 810412a:	687b      	ldr	r3, [r7, #4]
 810412c:	4a18      	ldr	r2, [pc, #96]	@ (8104190 <HAL_GPIO_Init+0x260>)
 810412e:	4293      	cmp	r3, r2
 8104130:	d007      	beq.n	8104142 <HAL_GPIO_Init+0x212>
 8104132:	687b      	ldr	r3, [r7, #4]
 8104134:	4a17      	ldr	r2, [pc, #92]	@ (8104194 <HAL_GPIO_Init+0x264>)
 8104136:	4293      	cmp	r3, r2
 8104138:	d101      	bne.n	810413e <HAL_GPIO_Init+0x20e>
 810413a:	2309      	movs	r3, #9
 810413c:	e02d      	b.n	810419a <HAL_GPIO_Init+0x26a>
 810413e:	230a      	movs	r3, #10
 8104140:	e02b      	b.n	810419a <HAL_GPIO_Init+0x26a>
 8104142:	2308      	movs	r3, #8
 8104144:	e029      	b.n	810419a <HAL_GPIO_Init+0x26a>
 8104146:	2307      	movs	r3, #7
 8104148:	e027      	b.n	810419a <HAL_GPIO_Init+0x26a>
 810414a:	2306      	movs	r3, #6
 810414c:	e025      	b.n	810419a <HAL_GPIO_Init+0x26a>
 810414e:	2305      	movs	r3, #5
 8104150:	e023      	b.n	810419a <HAL_GPIO_Init+0x26a>
 8104152:	2304      	movs	r3, #4
 8104154:	e021      	b.n	810419a <HAL_GPIO_Init+0x26a>
 8104156:	2303      	movs	r3, #3
 8104158:	e01f      	b.n	810419a <HAL_GPIO_Init+0x26a>
 810415a:	2302      	movs	r3, #2
 810415c:	e01d      	b.n	810419a <HAL_GPIO_Init+0x26a>
 810415e:	2301      	movs	r3, #1
 8104160:	e01b      	b.n	810419a <HAL_GPIO_Init+0x26a>
 8104162:	bf00      	nop
 8104164:	580000c0 	.word	0x580000c0
 8104168:	58024400 	.word	0x58024400
 810416c:	58000400 	.word	0x58000400
 8104170:	58020000 	.word	0x58020000
 8104174:	58020400 	.word	0x58020400
 8104178:	58020800 	.word	0x58020800
 810417c:	58020c00 	.word	0x58020c00
 8104180:	58021000 	.word	0x58021000
 8104184:	58021400 	.word	0x58021400
 8104188:	58021800 	.word	0x58021800
 810418c:	58021c00 	.word	0x58021c00
 8104190:	58022000 	.word	0x58022000
 8104194:	58022400 	.word	0x58022400
 8104198:	2300      	movs	r3, #0
 810419a:	69fa      	ldr	r2, [r7, #28]
 810419c:	f002 0203 	and.w	r2, r2, #3
 81041a0:	0092      	lsls	r2, r2, #2
 81041a2:	4093      	lsls	r3, r2
 81041a4:	69ba      	ldr	r2, [r7, #24]
 81041a6:	4313      	orrs	r3, r2
 81041a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81041aa:	4938      	ldr	r1, [pc, #224]	@ (810428c <HAL_GPIO_Init+0x35c>)
 81041ac:	69fb      	ldr	r3, [r7, #28]
 81041ae:	089b      	lsrs	r3, r3, #2
 81041b0:	3302      	adds	r3, #2
 81041b2:	69ba      	ldr	r2, [r7, #24]
 81041b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81041b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81041bc:	681b      	ldr	r3, [r3, #0]
 81041be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81041c0:	693b      	ldr	r3, [r7, #16]
 81041c2:	43db      	mvns	r3, r3
 81041c4:	69ba      	ldr	r2, [r7, #24]
 81041c6:	4013      	ands	r3, r2
 81041c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81041ca:	683b      	ldr	r3, [r7, #0]
 81041cc:	685b      	ldr	r3, [r3, #4]
 81041ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81041d2:	2b00      	cmp	r3, #0
 81041d4:	d003      	beq.n	81041de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81041d6:	69ba      	ldr	r2, [r7, #24]
 81041d8:	693b      	ldr	r3, [r7, #16]
 81041da:	4313      	orrs	r3, r2
 81041dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81041de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81041e2:	69bb      	ldr	r3, [r7, #24]
 81041e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81041e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81041ea:	685b      	ldr	r3, [r3, #4]
 81041ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81041ee:	693b      	ldr	r3, [r7, #16]
 81041f0:	43db      	mvns	r3, r3
 81041f2:	69ba      	ldr	r2, [r7, #24]
 81041f4:	4013      	ands	r3, r2
 81041f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81041f8:	683b      	ldr	r3, [r7, #0]
 81041fa:	685b      	ldr	r3, [r3, #4]
 81041fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8104200:	2b00      	cmp	r3, #0
 8104202:	d003      	beq.n	810420c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8104204:	69ba      	ldr	r2, [r7, #24]
 8104206:	693b      	ldr	r3, [r7, #16]
 8104208:	4313      	orrs	r3, r2
 810420a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810420c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8104210:	69bb      	ldr	r3, [r7, #24]
 8104212:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8104214:	697b      	ldr	r3, [r7, #20]
 8104216:	685b      	ldr	r3, [r3, #4]
 8104218:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810421a:	693b      	ldr	r3, [r7, #16]
 810421c:	43db      	mvns	r3, r3
 810421e:	69ba      	ldr	r2, [r7, #24]
 8104220:	4013      	ands	r3, r2
 8104222:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8104224:	683b      	ldr	r3, [r7, #0]
 8104226:	685b      	ldr	r3, [r3, #4]
 8104228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810422c:	2b00      	cmp	r3, #0
 810422e:	d003      	beq.n	8104238 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8104230:	69ba      	ldr	r2, [r7, #24]
 8104232:	693b      	ldr	r3, [r7, #16]
 8104234:	4313      	orrs	r3, r2
 8104236:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104238:	697b      	ldr	r3, [r7, #20]
 810423a:	69ba      	ldr	r2, [r7, #24]
 810423c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810423e:	697b      	ldr	r3, [r7, #20]
 8104240:	681b      	ldr	r3, [r3, #0]
 8104242:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104244:	693b      	ldr	r3, [r7, #16]
 8104246:	43db      	mvns	r3, r3
 8104248:	69ba      	ldr	r2, [r7, #24]
 810424a:	4013      	ands	r3, r2
 810424c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810424e:	683b      	ldr	r3, [r7, #0]
 8104250:	685b      	ldr	r3, [r3, #4]
 8104252:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8104256:	2b00      	cmp	r3, #0
 8104258:	d003      	beq.n	8104262 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810425a:	69ba      	ldr	r2, [r7, #24]
 810425c:	693b      	ldr	r3, [r7, #16]
 810425e:	4313      	orrs	r3, r2
 8104260:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104262:	697b      	ldr	r3, [r7, #20]
 8104264:	69ba      	ldr	r2, [r7, #24]
 8104266:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8104268:	69fb      	ldr	r3, [r7, #28]
 810426a:	3301      	adds	r3, #1
 810426c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810426e:	683b      	ldr	r3, [r7, #0]
 8104270:	681a      	ldr	r2, [r3, #0]
 8104272:	69fb      	ldr	r3, [r7, #28]
 8104274:	fa22 f303 	lsr.w	r3, r2, r3
 8104278:	2b00      	cmp	r3, #0
 810427a:	f47f ae63 	bne.w	8103f44 <HAL_GPIO_Init+0x14>
  }
}
 810427e:	bf00      	nop
 8104280:	bf00      	nop
 8104282:	3724      	adds	r7, #36	@ 0x24
 8104284:	46bd      	mov	sp, r7
 8104286:	f85d 7b04 	ldr.w	r7, [sp], #4
 810428a:	4770      	bx	lr
 810428c:	58000400 	.word	0x58000400

08104290 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8104290:	b480      	push	{r7}
 8104292:	b085      	sub	sp, #20
 8104294:	af00      	add	r7, sp, #0
 8104296:	6078      	str	r0, [r7, #4]
 8104298:	460b      	mov	r3, r1
 810429a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 810429c:	687b      	ldr	r3, [r7, #4]
 810429e:	695b      	ldr	r3, [r3, #20]
 81042a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 81042a2:	887a      	ldrh	r2, [r7, #2]
 81042a4:	68fb      	ldr	r3, [r7, #12]
 81042a6:	4013      	ands	r3, r2
 81042a8:	041a      	lsls	r2, r3, #16
 81042aa:	68fb      	ldr	r3, [r7, #12]
 81042ac:	43d9      	mvns	r1, r3
 81042ae:	887b      	ldrh	r3, [r7, #2]
 81042b0:	400b      	ands	r3, r1
 81042b2:	431a      	orrs	r2, r3
 81042b4:	687b      	ldr	r3, [r7, #4]
 81042b6:	619a      	str	r2, [r3, #24]
}
 81042b8:	bf00      	nop
 81042ba:	3714      	adds	r7, #20
 81042bc:	46bd      	mov	sp, r7
 81042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042c2:	4770      	bx	lr

081042c4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81042c4:	b480      	push	{r7}
 81042c6:	b083      	sub	sp, #12
 81042c8:	af00      	add	r7, sp, #0
 81042ca:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81042cc:	4b05      	ldr	r3, [pc, #20]	@ (81042e4 <HAL_HSEM_ActivateNotification+0x20>)
 81042ce:	681a      	ldr	r2, [r3, #0]
 81042d0:	4904      	ldr	r1, [pc, #16]	@ (81042e4 <HAL_HSEM_ActivateNotification+0x20>)
 81042d2:	687b      	ldr	r3, [r7, #4]
 81042d4:	4313      	orrs	r3, r2
 81042d6:	600b      	str	r3, [r1, #0]
#endif
}
 81042d8:	bf00      	nop
 81042da:	370c      	adds	r7, #12
 81042dc:	46bd      	mov	sp, r7
 81042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042e2:	4770      	bx	lr
 81042e4:	58026510 	.word	0x58026510

081042e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 81042e8:	b580      	push	{r7, lr}
 81042ea:	b082      	sub	sp, #8
 81042ec:	af00      	add	r7, sp, #0
 81042ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 81042f0:	687b      	ldr	r3, [r7, #4]
 81042f2:	2b00      	cmp	r3, #0
 81042f4:	d101      	bne.n	81042fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 81042f6:	2301      	movs	r3, #1
 81042f8:	e08d      	b.n	8104416 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 81042fa:	687b      	ldr	r3, [r7, #4]
 81042fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8104300:	b2db      	uxtb	r3, r3
 8104302:	2b00      	cmp	r3, #0
 8104304:	d106      	bne.n	8104314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8104306:	687b      	ldr	r3, [r7, #4]
 8104308:	2200      	movs	r2, #0
 810430a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810430e:	6878      	ldr	r0, [r7, #4]
 8104310:	f7ff f90c 	bl	810352c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8104314:	687b      	ldr	r3, [r7, #4]
 8104316:	2224      	movs	r2, #36	@ 0x24
 8104318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 810431c:	687b      	ldr	r3, [r7, #4]
 810431e:	681b      	ldr	r3, [r3, #0]
 8104320:	681a      	ldr	r2, [r3, #0]
 8104322:	687b      	ldr	r3, [r7, #4]
 8104324:	681b      	ldr	r3, [r3, #0]
 8104326:	f022 0201 	bic.w	r2, r2, #1
 810432a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 810432c:	687b      	ldr	r3, [r7, #4]
 810432e:	685a      	ldr	r2, [r3, #4]
 8104330:	687b      	ldr	r3, [r7, #4]
 8104332:	681b      	ldr	r3, [r3, #0]
 8104334:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8104338:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810433a:	687b      	ldr	r3, [r7, #4]
 810433c:	681b      	ldr	r3, [r3, #0]
 810433e:	689a      	ldr	r2, [r3, #8]
 8104340:	687b      	ldr	r3, [r7, #4]
 8104342:	681b      	ldr	r3, [r3, #0]
 8104344:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8104348:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810434a:	687b      	ldr	r3, [r7, #4]
 810434c:	68db      	ldr	r3, [r3, #12]
 810434e:	2b01      	cmp	r3, #1
 8104350:	d107      	bne.n	8104362 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8104352:	687b      	ldr	r3, [r7, #4]
 8104354:	689a      	ldr	r2, [r3, #8]
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	681b      	ldr	r3, [r3, #0]
 810435a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 810435e:	609a      	str	r2, [r3, #8]
 8104360:	e006      	b.n	8104370 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8104362:	687b      	ldr	r3, [r7, #4]
 8104364:	689a      	ldr	r2, [r3, #8]
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	681b      	ldr	r3, [r3, #0]
 810436a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 810436e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8104370:	687b      	ldr	r3, [r7, #4]
 8104372:	68db      	ldr	r3, [r3, #12]
 8104374:	2b02      	cmp	r3, #2
 8104376:	d108      	bne.n	810438a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8104378:	687b      	ldr	r3, [r7, #4]
 810437a:	681b      	ldr	r3, [r3, #0]
 810437c:	685a      	ldr	r2, [r3, #4]
 810437e:	687b      	ldr	r3, [r7, #4]
 8104380:	681b      	ldr	r3, [r3, #0]
 8104382:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8104386:	605a      	str	r2, [r3, #4]
 8104388:	e007      	b.n	810439a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 810438a:	687b      	ldr	r3, [r7, #4]
 810438c:	681b      	ldr	r3, [r3, #0]
 810438e:	685a      	ldr	r2, [r3, #4]
 8104390:	687b      	ldr	r3, [r7, #4]
 8104392:	681b      	ldr	r3, [r3, #0]
 8104394:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8104398:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810439a:	687b      	ldr	r3, [r7, #4]
 810439c:	681b      	ldr	r3, [r3, #0]
 810439e:	685b      	ldr	r3, [r3, #4]
 81043a0:	687a      	ldr	r2, [r7, #4]
 81043a2:	6812      	ldr	r2, [r2, #0]
 81043a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81043a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 81043ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81043ae:	687b      	ldr	r3, [r7, #4]
 81043b0:	681b      	ldr	r3, [r3, #0]
 81043b2:	68da      	ldr	r2, [r3, #12]
 81043b4:	687b      	ldr	r3, [r7, #4]
 81043b6:	681b      	ldr	r3, [r3, #0]
 81043b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 81043bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81043be:	687b      	ldr	r3, [r7, #4]
 81043c0:	691a      	ldr	r2, [r3, #16]
 81043c2:	687b      	ldr	r3, [r7, #4]
 81043c4:	695b      	ldr	r3, [r3, #20]
 81043c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	699b      	ldr	r3, [r3, #24]
 81043ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81043d0:	687b      	ldr	r3, [r7, #4]
 81043d2:	681b      	ldr	r3, [r3, #0]
 81043d4:	430a      	orrs	r2, r1
 81043d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81043d8:	687b      	ldr	r3, [r7, #4]
 81043da:	69d9      	ldr	r1, [r3, #28]
 81043dc:	687b      	ldr	r3, [r7, #4]
 81043de:	6a1a      	ldr	r2, [r3, #32]
 81043e0:	687b      	ldr	r3, [r7, #4]
 81043e2:	681b      	ldr	r3, [r3, #0]
 81043e4:	430a      	orrs	r2, r1
 81043e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81043e8:	687b      	ldr	r3, [r7, #4]
 81043ea:	681b      	ldr	r3, [r3, #0]
 81043ec:	681a      	ldr	r2, [r3, #0]
 81043ee:	687b      	ldr	r3, [r7, #4]
 81043f0:	681b      	ldr	r3, [r3, #0]
 81043f2:	f042 0201 	orr.w	r2, r2, #1
 81043f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81043f8:	687b      	ldr	r3, [r7, #4]
 81043fa:	2200      	movs	r2, #0
 81043fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 81043fe:	687b      	ldr	r3, [r7, #4]
 8104400:	2220      	movs	r2, #32
 8104402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8104406:	687b      	ldr	r3, [r7, #4]
 8104408:	2200      	movs	r2, #0
 810440a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810440c:	687b      	ldr	r3, [r7, #4]
 810440e:	2200      	movs	r2, #0
 8104410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8104414:	2300      	movs	r3, #0
}
 8104416:	4618      	mov	r0, r3
 8104418:	3708      	adds	r7, #8
 810441a:	46bd      	mov	sp, r7
 810441c:	bd80      	pop	{r7, pc}
	...

08104420 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8104420:	b580      	push	{r7, lr}
 8104422:	b088      	sub	sp, #32
 8104424:	af02      	add	r7, sp, #8
 8104426:	60f8      	str	r0, [r7, #12]
 8104428:	607a      	str	r2, [r7, #4]
 810442a:	461a      	mov	r2, r3
 810442c:	460b      	mov	r3, r1
 810442e:	817b      	strh	r3, [r7, #10]
 8104430:	4613      	mov	r3, r2
 8104432:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104434:	68fb      	ldr	r3, [r7, #12]
 8104436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810443a:	b2db      	uxtb	r3, r3
 810443c:	2b20      	cmp	r3, #32
 810443e:	f040 80fd 	bne.w	810463c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104442:	68fb      	ldr	r3, [r7, #12]
 8104444:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8104448:	2b01      	cmp	r3, #1
 810444a:	d101      	bne.n	8104450 <HAL_I2C_Master_Transmit+0x30>
 810444c:	2302      	movs	r3, #2
 810444e:	e0f6      	b.n	810463e <HAL_I2C_Master_Transmit+0x21e>
 8104450:	68fb      	ldr	r3, [r7, #12]
 8104452:	2201      	movs	r2, #1
 8104454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104458:	f7ff fc42 	bl	8103ce0 <HAL_GetTick>
 810445c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810445e:	693b      	ldr	r3, [r7, #16]
 8104460:	9300      	str	r3, [sp, #0]
 8104462:	2319      	movs	r3, #25
 8104464:	2201      	movs	r2, #1
 8104466:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 810446a:	68f8      	ldr	r0, [r7, #12]
 810446c:	f000 fa24 	bl	81048b8 <I2C_WaitOnFlagUntilTimeout>
 8104470:	4603      	mov	r3, r0
 8104472:	2b00      	cmp	r3, #0
 8104474:	d001      	beq.n	810447a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8104476:	2301      	movs	r3, #1
 8104478:	e0e1      	b.n	810463e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 810447a:	68fb      	ldr	r3, [r7, #12]
 810447c:	2221      	movs	r2, #33	@ 0x21
 810447e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8104482:	68fb      	ldr	r3, [r7, #12]
 8104484:	2210      	movs	r2, #16
 8104486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810448a:	68fb      	ldr	r3, [r7, #12]
 810448c:	2200      	movs	r2, #0
 810448e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8104490:	68fb      	ldr	r3, [r7, #12]
 8104492:	687a      	ldr	r2, [r7, #4]
 8104494:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8104496:	68fb      	ldr	r3, [r7, #12]
 8104498:	893a      	ldrh	r2, [r7, #8]
 810449a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 810449c:	68fb      	ldr	r3, [r7, #12]
 810449e:	2200      	movs	r2, #0
 81044a0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81044a2:	68fb      	ldr	r3, [r7, #12]
 81044a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81044a6:	b29b      	uxth	r3, r3
 81044a8:	2bff      	cmp	r3, #255	@ 0xff
 81044aa:	d906      	bls.n	81044ba <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81044ac:	68fb      	ldr	r3, [r7, #12]
 81044ae:	22ff      	movs	r2, #255	@ 0xff
 81044b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 81044b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81044b6:	617b      	str	r3, [r7, #20]
 81044b8:	e007      	b.n	81044ca <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81044ba:	68fb      	ldr	r3, [r7, #12]
 81044bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81044be:	b29a      	uxth	r2, r3
 81044c0:	68fb      	ldr	r3, [r7, #12]
 81044c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 81044c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81044c8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 81044ca:	68fb      	ldr	r3, [r7, #12]
 81044cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81044ce:	2b00      	cmp	r3, #0
 81044d0:	d024      	beq.n	810451c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81044d2:	68fb      	ldr	r3, [r7, #12]
 81044d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81044d6:	781a      	ldrb	r2, [r3, #0]
 81044d8:	68fb      	ldr	r3, [r7, #12]
 81044da:	681b      	ldr	r3, [r3, #0]
 81044dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81044de:	68fb      	ldr	r3, [r7, #12]
 81044e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81044e2:	1c5a      	adds	r2, r3, #1
 81044e4:	68fb      	ldr	r3, [r7, #12]
 81044e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 81044e8:	68fb      	ldr	r3, [r7, #12]
 81044ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81044ec:	b29b      	uxth	r3, r3
 81044ee:	3b01      	subs	r3, #1
 81044f0:	b29a      	uxth	r2, r3
 81044f2:	68fb      	ldr	r3, [r7, #12]
 81044f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 81044f6:	68fb      	ldr	r3, [r7, #12]
 81044f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81044fa:	3b01      	subs	r3, #1
 81044fc:	b29a      	uxth	r2, r3
 81044fe:	68fb      	ldr	r3, [r7, #12]
 8104500:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8104502:	68fb      	ldr	r3, [r7, #12]
 8104504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8104506:	b2db      	uxtb	r3, r3
 8104508:	3301      	adds	r3, #1
 810450a:	b2da      	uxtb	r2, r3
 810450c:	8979      	ldrh	r1, [r7, #10]
 810450e:	4b4e      	ldr	r3, [pc, #312]	@ (8104648 <HAL_I2C_Master_Transmit+0x228>)
 8104510:	9300      	str	r3, [sp, #0]
 8104512:	697b      	ldr	r3, [r7, #20]
 8104514:	68f8      	ldr	r0, [r7, #12]
 8104516:	f000 fc1f 	bl	8104d58 <I2C_TransferConfig>
 810451a:	e066      	b.n	81045ea <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 810451c:	68fb      	ldr	r3, [r7, #12]
 810451e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8104520:	b2da      	uxtb	r2, r3
 8104522:	8979      	ldrh	r1, [r7, #10]
 8104524:	4b48      	ldr	r3, [pc, #288]	@ (8104648 <HAL_I2C_Master_Transmit+0x228>)
 8104526:	9300      	str	r3, [sp, #0]
 8104528:	697b      	ldr	r3, [r7, #20]
 810452a:	68f8      	ldr	r0, [r7, #12]
 810452c:	f000 fc14 	bl	8104d58 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8104530:	e05b      	b.n	81045ea <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104532:	693a      	ldr	r2, [r7, #16]
 8104534:	6a39      	ldr	r1, [r7, #32]
 8104536:	68f8      	ldr	r0, [r7, #12]
 8104538:	f000 fa17 	bl	810496a <I2C_WaitOnTXISFlagUntilTimeout>
 810453c:	4603      	mov	r3, r0
 810453e:	2b00      	cmp	r3, #0
 8104540:	d001      	beq.n	8104546 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8104542:	2301      	movs	r3, #1
 8104544:	e07b      	b.n	810463e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8104546:	68fb      	ldr	r3, [r7, #12]
 8104548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810454a:	781a      	ldrb	r2, [r3, #0]
 810454c:	68fb      	ldr	r3, [r7, #12]
 810454e:	681b      	ldr	r3, [r3, #0]
 8104550:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104552:	68fb      	ldr	r3, [r7, #12]
 8104554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104556:	1c5a      	adds	r2, r3, #1
 8104558:	68fb      	ldr	r3, [r7, #12]
 810455a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 810455c:	68fb      	ldr	r3, [r7, #12]
 810455e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8104560:	b29b      	uxth	r3, r3
 8104562:	3b01      	subs	r3, #1
 8104564:	b29a      	uxth	r2, r3
 8104566:	68fb      	ldr	r3, [r7, #12]
 8104568:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 810456a:	68fb      	ldr	r3, [r7, #12]
 810456c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810456e:	3b01      	subs	r3, #1
 8104570:	b29a      	uxth	r2, r3
 8104572:	68fb      	ldr	r3, [r7, #12]
 8104574:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104576:	68fb      	ldr	r3, [r7, #12]
 8104578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810457a:	b29b      	uxth	r3, r3
 810457c:	2b00      	cmp	r3, #0
 810457e:	d034      	beq.n	81045ea <HAL_I2C_Master_Transmit+0x1ca>
 8104580:	68fb      	ldr	r3, [r7, #12]
 8104582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8104584:	2b00      	cmp	r3, #0
 8104586:	d130      	bne.n	81045ea <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104588:	693b      	ldr	r3, [r7, #16]
 810458a:	9300      	str	r3, [sp, #0]
 810458c:	6a3b      	ldr	r3, [r7, #32]
 810458e:	2200      	movs	r2, #0
 8104590:	2180      	movs	r1, #128	@ 0x80
 8104592:	68f8      	ldr	r0, [r7, #12]
 8104594:	f000 f990 	bl	81048b8 <I2C_WaitOnFlagUntilTimeout>
 8104598:	4603      	mov	r3, r0
 810459a:	2b00      	cmp	r3, #0
 810459c:	d001      	beq.n	81045a2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 810459e:	2301      	movs	r3, #1
 81045a0:	e04d      	b.n	810463e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81045a2:	68fb      	ldr	r3, [r7, #12]
 81045a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81045a6:	b29b      	uxth	r3, r3
 81045a8:	2bff      	cmp	r3, #255	@ 0xff
 81045aa:	d90e      	bls.n	81045ca <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81045ac:	68fb      	ldr	r3, [r7, #12]
 81045ae:	22ff      	movs	r2, #255	@ 0xff
 81045b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81045b2:	68fb      	ldr	r3, [r7, #12]
 81045b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81045b6:	b2da      	uxtb	r2, r3
 81045b8:	8979      	ldrh	r1, [r7, #10]
 81045ba:	2300      	movs	r3, #0
 81045bc:	9300      	str	r3, [sp, #0]
 81045be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81045c2:	68f8      	ldr	r0, [r7, #12]
 81045c4:	f000 fbc8 	bl	8104d58 <I2C_TransferConfig>
 81045c8:	e00f      	b.n	81045ea <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81045ca:	68fb      	ldr	r3, [r7, #12]
 81045cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81045ce:	b29a      	uxth	r2, r3
 81045d0:	68fb      	ldr	r3, [r7, #12]
 81045d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81045d4:	68fb      	ldr	r3, [r7, #12]
 81045d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81045d8:	b2da      	uxtb	r2, r3
 81045da:	8979      	ldrh	r1, [r7, #10]
 81045dc:	2300      	movs	r3, #0
 81045de:	9300      	str	r3, [sp, #0]
 81045e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81045e4:	68f8      	ldr	r0, [r7, #12]
 81045e6:	f000 fbb7 	bl	8104d58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81045ea:	68fb      	ldr	r3, [r7, #12]
 81045ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81045ee:	b29b      	uxth	r3, r3
 81045f0:	2b00      	cmp	r3, #0
 81045f2:	d19e      	bne.n	8104532 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81045f4:	693a      	ldr	r2, [r7, #16]
 81045f6:	6a39      	ldr	r1, [r7, #32]
 81045f8:	68f8      	ldr	r0, [r7, #12]
 81045fa:	f000 f9fd 	bl	81049f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 81045fe:	4603      	mov	r3, r0
 8104600:	2b00      	cmp	r3, #0
 8104602:	d001      	beq.n	8104608 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8104604:	2301      	movs	r3, #1
 8104606:	e01a      	b.n	810463e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104608:	68fb      	ldr	r3, [r7, #12]
 810460a:	681b      	ldr	r3, [r3, #0]
 810460c:	2220      	movs	r2, #32
 810460e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104610:	68fb      	ldr	r3, [r7, #12]
 8104612:	681b      	ldr	r3, [r3, #0]
 8104614:	6859      	ldr	r1, [r3, #4]
 8104616:	68fb      	ldr	r3, [r7, #12]
 8104618:	681a      	ldr	r2, [r3, #0]
 810461a:	4b0c      	ldr	r3, [pc, #48]	@ (810464c <HAL_I2C_Master_Transmit+0x22c>)
 810461c:	400b      	ands	r3, r1
 810461e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104620:	68fb      	ldr	r3, [r7, #12]
 8104622:	2220      	movs	r2, #32
 8104624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104628:	68fb      	ldr	r3, [r7, #12]
 810462a:	2200      	movs	r2, #0
 810462c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104630:	68fb      	ldr	r3, [r7, #12]
 8104632:	2200      	movs	r2, #0
 8104634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8104638:	2300      	movs	r3, #0
 810463a:	e000      	b.n	810463e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 810463c:	2302      	movs	r3, #2
  }
}
 810463e:	4618      	mov	r0, r3
 8104640:	3718      	adds	r7, #24
 8104642:	46bd      	mov	sp, r7
 8104644:	bd80      	pop	{r7, pc}
 8104646:	bf00      	nop
 8104648:	80002000 	.word	0x80002000
 810464c:	fe00e800 	.word	0xfe00e800

08104650 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8104650:	b580      	push	{r7, lr}
 8104652:	b088      	sub	sp, #32
 8104654:	af02      	add	r7, sp, #8
 8104656:	60f8      	str	r0, [r7, #12]
 8104658:	607a      	str	r2, [r7, #4]
 810465a:	461a      	mov	r2, r3
 810465c:	460b      	mov	r3, r1
 810465e:	817b      	strh	r3, [r7, #10]
 8104660:	4613      	mov	r3, r2
 8104662:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104664:	68fb      	ldr	r3, [r7, #12]
 8104666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810466a:	b2db      	uxtb	r3, r3
 810466c:	2b20      	cmp	r3, #32
 810466e:	f040 80db 	bne.w	8104828 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104672:	68fb      	ldr	r3, [r7, #12]
 8104674:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8104678:	2b01      	cmp	r3, #1
 810467a:	d101      	bne.n	8104680 <HAL_I2C_Master_Receive+0x30>
 810467c:	2302      	movs	r3, #2
 810467e:	e0d4      	b.n	810482a <HAL_I2C_Master_Receive+0x1da>
 8104680:	68fb      	ldr	r3, [r7, #12]
 8104682:	2201      	movs	r2, #1
 8104684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104688:	f7ff fb2a 	bl	8103ce0 <HAL_GetTick>
 810468c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810468e:	697b      	ldr	r3, [r7, #20]
 8104690:	9300      	str	r3, [sp, #0]
 8104692:	2319      	movs	r3, #25
 8104694:	2201      	movs	r2, #1
 8104696:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 810469a:	68f8      	ldr	r0, [r7, #12]
 810469c:	f000 f90c 	bl	81048b8 <I2C_WaitOnFlagUntilTimeout>
 81046a0:	4603      	mov	r3, r0
 81046a2:	2b00      	cmp	r3, #0
 81046a4:	d001      	beq.n	81046aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 81046a6:	2301      	movs	r3, #1
 81046a8:	e0bf      	b.n	810482a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81046aa:	68fb      	ldr	r3, [r7, #12]
 81046ac:	2222      	movs	r2, #34	@ 0x22
 81046ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81046b2:	68fb      	ldr	r3, [r7, #12]
 81046b4:	2210      	movs	r2, #16
 81046b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81046ba:	68fb      	ldr	r3, [r7, #12]
 81046bc:	2200      	movs	r2, #0
 81046be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81046c0:	68fb      	ldr	r3, [r7, #12]
 81046c2:	687a      	ldr	r2, [r7, #4]
 81046c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 81046c6:	68fb      	ldr	r3, [r7, #12]
 81046c8:	893a      	ldrh	r2, [r7, #8]
 81046ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 81046cc:	68fb      	ldr	r3, [r7, #12]
 81046ce:	2200      	movs	r2, #0
 81046d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81046d2:	68fb      	ldr	r3, [r7, #12]
 81046d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81046d6:	b29b      	uxth	r3, r3
 81046d8:	2bff      	cmp	r3, #255	@ 0xff
 81046da:	d90e      	bls.n	81046fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81046dc:	68fb      	ldr	r3, [r7, #12]
 81046de:	22ff      	movs	r2, #255	@ 0xff
 81046e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81046e2:	68fb      	ldr	r3, [r7, #12]
 81046e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81046e6:	b2da      	uxtb	r2, r3
 81046e8:	8979      	ldrh	r1, [r7, #10]
 81046ea:	4b52      	ldr	r3, [pc, #328]	@ (8104834 <HAL_I2C_Master_Receive+0x1e4>)
 81046ec:	9300      	str	r3, [sp, #0]
 81046ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81046f2:	68f8      	ldr	r0, [r7, #12]
 81046f4:	f000 fb30 	bl	8104d58 <I2C_TransferConfig>
 81046f8:	e06d      	b.n	81047d6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81046fa:	68fb      	ldr	r3, [r7, #12]
 81046fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81046fe:	b29a      	uxth	r2, r3
 8104700:	68fb      	ldr	r3, [r7, #12]
 8104702:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104704:	68fb      	ldr	r3, [r7, #12]
 8104706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8104708:	b2da      	uxtb	r2, r3
 810470a:	8979      	ldrh	r1, [r7, #10]
 810470c:	4b49      	ldr	r3, [pc, #292]	@ (8104834 <HAL_I2C_Master_Receive+0x1e4>)
 810470e:	9300      	str	r3, [sp, #0]
 8104710:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8104714:	68f8      	ldr	r0, [r7, #12]
 8104716:	f000 fb1f 	bl	8104d58 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 810471a:	e05c      	b.n	81047d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810471c:	697a      	ldr	r2, [r7, #20]
 810471e:	6a39      	ldr	r1, [r7, #32]
 8104720:	68f8      	ldr	r0, [r7, #12]
 8104722:	f000 f9ad 	bl	8104a80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8104726:	4603      	mov	r3, r0
 8104728:	2b00      	cmp	r3, #0
 810472a:	d001      	beq.n	8104730 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 810472c:	2301      	movs	r3, #1
 810472e:	e07c      	b.n	810482a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8104730:	68fb      	ldr	r3, [r7, #12]
 8104732:	681b      	ldr	r3, [r3, #0]
 8104734:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8104736:	68fb      	ldr	r3, [r7, #12]
 8104738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810473a:	b2d2      	uxtb	r2, r2
 810473c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810473e:	68fb      	ldr	r3, [r7, #12]
 8104740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104742:	1c5a      	adds	r2, r3, #1
 8104744:	68fb      	ldr	r3, [r7, #12]
 8104746:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8104748:	68fb      	ldr	r3, [r7, #12]
 810474a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810474c:	3b01      	subs	r3, #1
 810474e:	b29a      	uxth	r2, r3
 8104750:	68fb      	ldr	r3, [r7, #12]
 8104752:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8104754:	68fb      	ldr	r3, [r7, #12]
 8104756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8104758:	b29b      	uxth	r3, r3
 810475a:	3b01      	subs	r3, #1
 810475c:	b29a      	uxth	r2, r3
 810475e:	68fb      	ldr	r3, [r7, #12]
 8104760:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104762:	68fb      	ldr	r3, [r7, #12]
 8104764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8104766:	b29b      	uxth	r3, r3
 8104768:	2b00      	cmp	r3, #0
 810476a:	d034      	beq.n	81047d6 <HAL_I2C_Master_Receive+0x186>
 810476c:	68fb      	ldr	r3, [r7, #12]
 810476e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8104770:	2b00      	cmp	r3, #0
 8104772:	d130      	bne.n	81047d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104774:	697b      	ldr	r3, [r7, #20]
 8104776:	9300      	str	r3, [sp, #0]
 8104778:	6a3b      	ldr	r3, [r7, #32]
 810477a:	2200      	movs	r2, #0
 810477c:	2180      	movs	r1, #128	@ 0x80
 810477e:	68f8      	ldr	r0, [r7, #12]
 8104780:	f000 f89a 	bl	81048b8 <I2C_WaitOnFlagUntilTimeout>
 8104784:	4603      	mov	r3, r0
 8104786:	2b00      	cmp	r3, #0
 8104788:	d001      	beq.n	810478e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 810478a:	2301      	movs	r3, #1
 810478c:	e04d      	b.n	810482a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810478e:	68fb      	ldr	r3, [r7, #12]
 8104790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8104792:	b29b      	uxth	r3, r3
 8104794:	2bff      	cmp	r3, #255	@ 0xff
 8104796:	d90e      	bls.n	81047b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104798:	68fb      	ldr	r3, [r7, #12]
 810479a:	22ff      	movs	r2, #255	@ 0xff
 810479c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810479e:	68fb      	ldr	r3, [r7, #12]
 81047a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81047a2:	b2da      	uxtb	r2, r3
 81047a4:	8979      	ldrh	r1, [r7, #10]
 81047a6:	2300      	movs	r3, #0
 81047a8:	9300      	str	r3, [sp, #0]
 81047aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81047ae:	68f8      	ldr	r0, [r7, #12]
 81047b0:	f000 fad2 	bl	8104d58 <I2C_TransferConfig>
 81047b4:	e00f      	b.n	81047d6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81047b6:	68fb      	ldr	r3, [r7, #12]
 81047b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81047ba:	b29a      	uxth	r2, r3
 81047bc:	68fb      	ldr	r3, [r7, #12]
 81047be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81047c0:	68fb      	ldr	r3, [r7, #12]
 81047c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81047c4:	b2da      	uxtb	r2, r3
 81047c6:	8979      	ldrh	r1, [r7, #10]
 81047c8:	2300      	movs	r3, #0
 81047ca:	9300      	str	r3, [sp, #0]
 81047cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81047d0:	68f8      	ldr	r0, [r7, #12]
 81047d2:	f000 fac1 	bl	8104d58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81047d6:	68fb      	ldr	r3, [r7, #12]
 81047d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81047da:	b29b      	uxth	r3, r3
 81047dc:	2b00      	cmp	r3, #0
 81047de:	d19d      	bne.n	810471c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81047e0:	697a      	ldr	r2, [r7, #20]
 81047e2:	6a39      	ldr	r1, [r7, #32]
 81047e4:	68f8      	ldr	r0, [r7, #12]
 81047e6:	f000 f907 	bl	81049f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 81047ea:	4603      	mov	r3, r0
 81047ec:	2b00      	cmp	r3, #0
 81047ee:	d001      	beq.n	81047f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 81047f0:	2301      	movs	r3, #1
 81047f2:	e01a      	b.n	810482a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81047f4:	68fb      	ldr	r3, [r7, #12]
 81047f6:	681b      	ldr	r3, [r3, #0]
 81047f8:	2220      	movs	r2, #32
 81047fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81047fc:	68fb      	ldr	r3, [r7, #12]
 81047fe:	681b      	ldr	r3, [r3, #0]
 8104800:	6859      	ldr	r1, [r3, #4]
 8104802:	68fb      	ldr	r3, [r7, #12]
 8104804:	681a      	ldr	r2, [r3, #0]
 8104806:	4b0c      	ldr	r3, [pc, #48]	@ (8104838 <HAL_I2C_Master_Receive+0x1e8>)
 8104808:	400b      	ands	r3, r1
 810480a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810480c:	68fb      	ldr	r3, [r7, #12]
 810480e:	2220      	movs	r2, #32
 8104810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104814:	68fb      	ldr	r3, [r7, #12]
 8104816:	2200      	movs	r2, #0
 8104818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810481c:	68fb      	ldr	r3, [r7, #12]
 810481e:	2200      	movs	r2, #0
 8104820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8104824:	2300      	movs	r3, #0
 8104826:	e000      	b.n	810482a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8104828:	2302      	movs	r3, #2
  }
}
 810482a:	4618      	mov	r0, r3
 810482c:	3718      	adds	r7, #24
 810482e:	46bd      	mov	sp, r7
 8104830:	bd80      	pop	{r7, pc}
 8104832:	bf00      	nop
 8104834:	80002400 	.word	0x80002400
 8104838:	fe00e800 	.word	0xfe00e800

0810483c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 810483c:	b480      	push	{r7}
 810483e:	b083      	sub	sp, #12
 8104840:	af00      	add	r7, sp, #0
 8104842:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8104844:	687b      	ldr	r3, [r7, #4]
 8104846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810484a:	b2db      	uxtb	r3, r3
}
 810484c:	4618      	mov	r0, r3
 810484e:	370c      	adds	r7, #12
 8104850:	46bd      	mov	sp, r7
 8104852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104856:	4770      	bx	lr

08104858 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8104858:	b480      	push	{r7}
 810485a:	b083      	sub	sp, #12
 810485c:	af00      	add	r7, sp, #0
 810485e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8104864:	4618      	mov	r0, r3
 8104866:	370c      	adds	r7, #12
 8104868:	46bd      	mov	sp, r7
 810486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810486e:	4770      	bx	lr

08104870 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8104870:	b480      	push	{r7}
 8104872:	b083      	sub	sp, #12
 8104874:	af00      	add	r7, sp, #0
 8104876:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8104878:	687b      	ldr	r3, [r7, #4]
 810487a:	681b      	ldr	r3, [r3, #0]
 810487c:	699b      	ldr	r3, [r3, #24]
 810487e:	f003 0302 	and.w	r3, r3, #2
 8104882:	2b02      	cmp	r3, #2
 8104884:	d103      	bne.n	810488e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8104886:	687b      	ldr	r3, [r7, #4]
 8104888:	681b      	ldr	r3, [r3, #0]
 810488a:	2200      	movs	r2, #0
 810488c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810488e:	687b      	ldr	r3, [r7, #4]
 8104890:	681b      	ldr	r3, [r3, #0]
 8104892:	699b      	ldr	r3, [r3, #24]
 8104894:	f003 0301 	and.w	r3, r3, #1
 8104898:	2b01      	cmp	r3, #1
 810489a:	d007      	beq.n	81048ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 810489c:	687b      	ldr	r3, [r7, #4]
 810489e:	681b      	ldr	r3, [r3, #0]
 81048a0:	699a      	ldr	r2, [r3, #24]
 81048a2:	687b      	ldr	r3, [r7, #4]
 81048a4:	681b      	ldr	r3, [r3, #0]
 81048a6:	f042 0201 	orr.w	r2, r2, #1
 81048aa:	619a      	str	r2, [r3, #24]
  }
}
 81048ac:	bf00      	nop
 81048ae:	370c      	adds	r7, #12
 81048b0:	46bd      	mov	sp, r7
 81048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048b6:	4770      	bx	lr

081048b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81048b8:	b580      	push	{r7, lr}
 81048ba:	b084      	sub	sp, #16
 81048bc:	af00      	add	r7, sp, #0
 81048be:	60f8      	str	r0, [r7, #12]
 81048c0:	60b9      	str	r1, [r7, #8]
 81048c2:	603b      	str	r3, [r7, #0]
 81048c4:	4613      	mov	r3, r2
 81048c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81048c8:	e03b      	b.n	8104942 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81048ca:	69ba      	ldr	r2, [r7, #24]
 81048cc:	6839      	ldr	r1, [r7, #0]
 81048ce:	68f8      	ldr	r0, [r7, #12]
 81048d0:	f000 f962 	bl	8104b98 <I2C_IsErrorOccurred>
 81048d4:	4603      	mov	r3, r0
 81048d6:	2b00      	cmp	r3, #0
 81048d8:	d001      	beq.n	81048de <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 81048da:	2301      	movs	r3, #1
 81048dc:	e041      	b.n	8104962 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81048de:	683b      	ldr	r3, [r7, #0]
 81048e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81048e4:	d02d      	beq.n	8104942 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81048e6:	f7ff f9fb 	bl	8103ce0 <HAL_GetTick>
 81048ea:	4602      	mov	r2, r0
 81048ec:	69bb      	ldr	r3, [r7, #24]
 81048ee:	1ad3      	subs	r3, r2, r3
 81048f0:	683a      	ldr	r2, [r7, #0]
 81048f2:	429a      	cmp	r2, r3
 81048f4:	d302      	bcc.n	81048fc <I2C_WaitOnFlagUntilTimeout+0x44>
 81048f6:	683b      	ldr	r3, [r7, #0]
 81048f8:	2b00      	cmp	r3, #0
 81048fa:	d122      	bne.n	8104942 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 81048fc:	68fb      	ldr	r3, [r7, #12]
 81048fe:	681b      	ldr	r3, [r3, #0]
 8104900:	699a      	ldr	r2, [r3, #24]
 8104902:	68bb      	ldr	r3, [r7, #8]
 8104904:	4013      	ands	r3, r2
 8104906:	68ba      	ldr	r2, [r7, #8]
 8104908:	429a      	cmp	r2, r3
 810490a:	bf0c      	ite	eq
 810490c:	2301      	moveq	r3, #1
 810490e:	2300      	movne	r3, #0
 8104910:	b2db      	uxtb	r3, r3
 8104912:	461a      	mov	r2, r3
 8104914:	79fb      	ldrb	r3, [r7, #7]
 8104916:	429a      	cmp	r2, r3
 8104918:	d113      	bne.n	8104942 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810491a:	68fb      	ldr	r3, [r7, #12]
 810491c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810491e:	f043 0220 	orr.w	r2, r3, #32
 8104922:	68fb      	ldr	r3, [r7, #12]
 8104924:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8104926:	68fb      	ldr	r3, [r7, #12]
 8104928:	2220      	movs	r2, #32
 810492a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810492e:	68fb      	ldr	r3, [r7, #12]
 8104930:	2200      	movs	r2, #0
 8104932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8104936:	68fb      	ldr	r3, [r7, #12]
 8104938:	2200      	movs	r2, #0
 810493a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 810493e:	2301      	movs	r3, #1
 8104940:	e00f      	b.n	8104962 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104942:	68fb      	ldr	r3, [r7, #12]
 8104944:	681b      	ldr	r3, [r3, #0]
 8104946:	699a      	ldr	r2, [r3, #24]
 8104948:	68bb      	ldr	r3, [r7, #8]
 810494a:	4013      	ands	r3, r2
 810494c:	68ba      	ldr	r2, [r7, #8]
 810494e:	429a      	cmp	r2, r3
 8104950:	bf0c      	ite	eq
 8104952:	2301      	moveq	r3, #1
 8104954:	2300      	movne	r3, #0
 8104956:	b2db      	uxtb	r3, r3
 8104958:	461a      	mov	r2, r3
 810495a:	79fb      	ldrb	r3, [r7, #7]
 810495c:	429a      	cmp	r2, r3
 810495e:	d0b4      	beq.n	81048ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8104960:	2300      	movs	r3, #0
}
 8104962:	4618      	mov	r0, r3
 8104964:	3710      	adds	r7, #16
 8104966:	46bd      	mov	sp, r7
 8104968:	bd80      	pop	{r7, pc}

0810496a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810496a:	b580      	push	{r7, lr}
 810496c:	b084      	sub	sp, #16
 810496e:	af00      	add	r7, sp, #0
 8104970:	60f8      	str	r0, [r7, #12]
 8104972:	60b9      	str	r1, [r7, #8]
 8104974:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8104976:	e033      	b.n	81049e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8104978:	687a      	ldr	r2, [r7, #4]
 810497a:	68b9      	ldr	r1, [r7, #8]
 810497c:	68f8      	ldr	r0, [r7, #12]
 810497e:	f000 f90b 	bl	8104b98 <I2C_IsErrorOccurred>
 8104982:	4603      	mov	r3, r0
 8104984:	2b00      	cmp	r3, #0
 8104986:	d001      	beq.n	810498c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8104988:	2301      	movs	r3, #1
 810498a:	e031      	b.n	81049f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810498c:	68bb      	ldr	r3, [r7, #8]
 810498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104992:	d025      	beq.n	81049e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104994:	f7ff f9a4 	bl	8103ce0 <HAL_GetTick>
 8104998:	4602      	mov	r2, r0
 810499a:	687b      	ldr	r3, [r7, #4]
 810499c:	1ad3      	subs	r3, r2, r3
 810499e:	68ba      	ldr	r2, [r7, #8]
 81049a0:	429a      	cmp	r2, r3
 81049a2:	d302      	bcc.n	81049aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 81049a4:	68bb      	ldr	r3, [r7, #8]
 81049a6:	2b00      	cmp	r3, #0
 81049a8:	d11a      	bne.n	81049e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 81049aa:	68fb      	ldr	r3, [r7, #12]
 81049ac:	681b      	ldr	r3, [r3, #0]
 81049ae:	699b      	ldr	r3, [r3, #24]
 81049b0:	f003 0302 	and.w	r3, r3, #2
 81049b4:	2b02      	cmp	r3, #2
 81049b6:	d013      	beq.n	81049e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81049b8:	68fb      	ldr	r3, [r7, #12]
 81049ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81049bc:	f043 0220 	orr.w	r2, r3, #32
 81049c0:	68fb      	ldr	r3, [r7, #12]
 81049c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 81049c4:	68fb      	ldr	r3, [r7, #12]
 81049c6:	2220      	movs	r2, #32
 81049c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81049cc:	68fb      	ldr	r3, [r7, #12]
 81049ce:	2200      	movs	r2, #0
 81049d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81049d4:	68fb      	ldr	r3, [r7, #12]
 81049d6:	2200      	movs	r2, #0
 81049d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 81049dc:	2301      	movs	r3, #1
 81049de:	e007      	b.n	81049f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81049e0:	68fb      	ldr	r3, [r7, #12]
 81049e2:	681b      	ldr	r3, [r3, #0]
 81049e4:	699b      	ldr	r3, [r3, #24]
 81049e6:	f003 0302 	and.w	r3, r3, #2
 81049ea:	2b02      	cmp	r3, #2
 81049ec:	d1c4      	bne.n	8104978 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 81049ee:	2300      	movs	r3, #0
}
 81049f0:	4618      	mov	r0, r3
 81049f2:	3710      	adds	r7, #16
 81049f4:	46bd      	mov	sp, r7
 81049f6:	bd80      	pop	{r7, pc}

081049f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81049f8:	b580      	push	{r7, lr}
 81049fa:	b084      	sub	sp, #16
 81049fc:	af00      	add	r7, sp, #0
 81049fe:	60f8      	str	r0, [r7, #12]
 8104a00:	60b9      	str	r1, [r7, #8]
 8104a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104a04:	e02f      	b.n	8104a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8104a06:	687a      	ldr	r2, [r7, #4]
 8104a08:	68b9      	ldr	r1, [r7, #8]
 8104a0a:	68f8      	ldr	r0, [r7, #12]
 8104a0c:	f000 f8c4 	bl	8104b98 <I2C_IsErrorOccurred>
 8104a10:	4603      	mov	r3, r0
 8104a12:	2b00      	cmp	r3, #0
 8104a14:	d001      	beq.n	8104a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8104a16:	2301      	movs	r3, #1
 8104a18:	e02d      	b.n	8104a76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104a1a:	f7ff f961 	bl	8103ce0 <HAL_GetTick>
 8104a1e:	4602      	mov	r2, r0
 8104a20:	687b      	ldr	r3, [r7, #4]
 8104a22:	1ad3      	subs	r3, r2, r3
 8104a24:	68ba      	ldr	r2, [r7, #8]
 8104a26:	429a      	cmp	r2, r3
 8104a28:	d302      	bcc.n	8104a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8104a2a:	68bb      	ldr	r3, [r7, #8]
 8104a2c:	2b00      	cmp	r3, #0
 8104a2e:	d11a      	bne.n	8104a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8104a30:	68fb      	ldr	r3, [r7, #12]
 8104a32:	681b      	ldr	r3, [r3, #0]
 8104a34:	699b      	ldr	r3, [r3, #24]
 8104a36:	f003 0320 	and.w	r3, r3, #32
 8104a3a:	2b20      	cmp	r3, #32
 8104a3c:	d013      	beq.n	8104a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104a3e:	68fb      	ldr	r3, [r7, #12]
 8104a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104a42:	f043 0220 	orr.w	r2, r3, #32
 8104a46:	68fb      	ldr	r3, [r7, #12]
 8104a48:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104a4a:	68fb      	ldr	r3, [r7, #12]
 8104a4c:	2220      	movs	r2, #32
 8104a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104a52:	68fb      	ldr	r3, [r7, #12]
 8104a54:	2200      	movs	r2, #0
 8104a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104a5a:	68fb      	ldr	r3, [r7, #12]
 8104a5c:	2200      	movs	r2, #0
 8104a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8104a62:	2301      	movs	r3, #1
 8104a64:	e007      	b.n	8104a76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104a66:	68fb      	ldr	r3, [r7, #12]
 8104a68:	681b      	ldr	r3, [r3, #0]
 8104a6a:	699b      	ldr	r3, [r3, #24]
 8104a6c:	f003 0320 	and.w	r3, r3, #32
 8104a70:	2b20      	cmp	r3, #32
 8104a72:	d1c8      	bne.n	8104a06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8104a74:	2300      	movs	r3, #0
}
 8104a76:	4618      	mov	r0, r3
 8104a78:	3710      	adds	r7, #16
 8104a7a:	46bd      	mov	sp, r7
 8104a7c:	bd80      	pop	{r7, pc}
	...

08104a80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8104a80:	b580      	push	{r7, lr}
 8104a82:	b086      	sub	sp, #24
 8104a84:	af00      	add	r7, sp, #0
 8104a86:	60f8      	str	r0, [r7, #12]
 8104a88:	60b9      	str	r1, [r7, #8]
 8104a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104a8c:	2300      	movs	r3, #0
 8104a8e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8104a90:	e071      	b.n	8104b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8104a92:	687a      	ldr	r2, [r7, #4]
 8104a94:	68b9      	ldr	r1, [r7, #8]
 8104a96:	68f8      	ldr	r0, [r7, #12]
 8104a98:	f000 f87e 	bl	8104b98 <I2C_IsErrorOccurred>
 8104a9c:	4603      	mov	r3, r0
 8104a9e:	2b00      	cmp	r3, #0
 8104aa0:	d001      	beq.n	8104aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8104aa2:	2301      	movs	r3, #1
 8104aa4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8104aa6:	68fb      	ldr	r3, [r7, #12]
 8104aa8:	681b      	ldr	r3, [r3, #0]
 8104aaa:	699b      	ldr	r3, [r3, #24]
 8104aac:	f003 0320 	and.w	r3, r3, #32
 8104ab0:	2b20      	cmp	r3, #32
 8104ab2:	d13b      	bne.n	8104b2c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8104ab4:	7dfb      	ldrb	r3, [r7, #23]
 8104ab6:	2b00      	cmp	r3, #0
 8104ab8:	d138      	bne.n	8104b2c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8104aba:	68fb      	ldr	r3, [r7, #12]
 8104abc:	681b      	ldr	r3, [r3, #0]
 8104abe:	699b      	ldr	r3, [r3, #24]
 8104ac0:	f003 0304 	and.w	r3, r3, #4
 8104ac4:	2b04      	cmp	r3, #4
 8104ac6:	d105      	bne.n	8104ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8104ac8:	68fb      	ldr	r3, [r7, #12]
 8104aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8104acc:	2b00      	cmp	r3, #0
 8104ace:	d001      	beq.n	8104ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8104ad0:	2300      	movs	r3, #0
 8104ad2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8104ad4:	68fb      	ldr	r3, [r7, #12]
 8104ad6:	681b      	ldr	r3, [r3, #0]
 8104ad8:	699b      	ldr	r3, [r3, #24]
 8104ada:	f003 0310 	and.w	r3, r3, #16
 8104ade:	2b10      	cmp	r3, #16
 8104ae0:	d121      	bne.n	8104b26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104ae2:	68fb      	ldr	r3, [r7, #12]
 8104ae4:	681b      	ldr	r3, [r3, #0]
 8104ae6:	2210      	movs	r2, #16
 8104ae8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8104aea:	68fb      	ldr	r3, [r7, #12]
 8104aec:	2204      	movs	r2, #4
 8104aee:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104af0:	68fb      	ldr	r3, [r7, #12]
 8104af2:	681b      	ldr	r3, [r3, #0]
 8104af4:	2220      	movs	r2, #32
 8104af6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8104af8:	68fb      	ldr	r3, [r7, #12]
 8104afa:	681b      	ldr	r3, [r3, #0]
 8104afc:	6859      	ldr	r1, [r3, #4]
 8104afe:	68fb      	ldr	r3, [r7, #12]
 8104b00:	681a      	ldr	r2, [r3, #0]
 8104b02:	4b24      	ldr	r3, [pc, #144]	@ (8104b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8104b04:	400b      	ands	r3, r1
 8104b06:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8104b08:	68fb      	ldr	r3, [r7, #12]
 8104b0a:	2220      	movs	r2, #32
 8104b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104b10:	68fb      	ldr	r3, [r7, #12]
 8104b12:	2200      	movs	r2, #0
 8104b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104b18:	68fb      	ldr	r3, [r7, #12]
 8104b1a:	2200      	movs	r2, #0
 8104b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8104b20:	2301      	movs	r3, #1
 8104b22:	75fb      	strb	r3, [r7, #23]
 8104b24:	e002      	b.n	8104b2c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104b26:	68fb      	ldr	r3, [r7, #12]
 8104b28:	2200      	movs	r2, #0
 8104b2a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8104b2c:	f7ff f8d8 	bl	8103ce0 <HAL_GetTick>
 8104b30:	4602      	mov	r2, r0
 8104b32:	687b      	ldr	r3, [r7, #4]
 8104b34:	1ad3      	subs	r3, r2, r3
 8104b36:	68ba      	ldr	r2, [r7, #8]
 8104b38:	429a      	cmp	r2, r3
 8104b3a:	d302      	bcc.n	8104b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8104b3c:	68bb      	ldr	r3, [r7, #8]
 8104b3e:	2b00      	cmp	r3, #0
 8104b40:	d119      	bne.n	8104b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8104b42:	7dfb      	ldrb	r3, [r7, #23]
 8104b44:	2b00      	cmp	r3, #0
 8104b46:	d116      	bne.n	8104b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8104b48:	68fb      	ldr	r3, [r7, #12]
 8104b4a:	681b      	ldr	r3, [r3, #0]
 8104b4c:	699b      	ldr	r3, [r3, #24]
 8104b4e:	f003 0304 	and.w	r3, r3, #4
 8104b52:	2b04      	cmp	r3, #4
 8104b54:	d00f      	beq.n	8104b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104b56:	68fb      	ldr	r3, [r7, #12]
 8104b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104b5a:	f043 0220 	orr.w	r2, r3, #32
 8104b5e:	68fb      	ldr	r3, [r7, #12]
 8104b60:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104b62:	68fb      	ldr	r3, [r7, #12]
 8104b64:	2220      	movs	r2, #32
 8104b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104b6a:	68fb      	ldr	r3, [r7, #12]
 8104b6c:	2200      	movs	r2, #0
 8104b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8104b72:	2301      	movs	r3, #1
 8104b74:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8104b76:	68fb      	ldr	r3, [r7, #12]
 8104b78:	681b      	ldr	r3, [r3, #0]
 8104b7a:	699b      	ldr	r3, [r3, #24]
 8104b7c:	f003 0304 	and.w	r3, r3, #4
 8104b80:	2b04      	cmp	r3, #4
 8104b82:	d002      	beq.n	8104b8a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8104b84:	7dfb      	ldrb	r3, [r7, #23]
 8104b86:	2b00      	cmp	r3, #0
 8104b88:	d083      	beq.n	8104a92 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8104b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8104b8c:	4618      	mov	r0, r3
 8104b8e:	3718      	adds	r7, #24
 8104b90:	46bd      	mov	sp, r7
 8104b92:	bd80      	pop	{r7, pc}
 8104b94:	fe00e800 	.word	0xfe00e800

08104b98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8104b98:	b580      	push	{r7, lr}
 8104b9a:	b08a      	sub	sp, #40	@ 0x28
 8104b9c:	af00      	add	r7, sp, #0
 8104b9e:	60f8      	str	r0, [r7, #12]
 8104ba0:	60b9      	str	r1, [r7, #8]
 8104ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104ba4:	2300      	movs	r3, #0
 8104ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8104baa:	68fb      	ldr	r3, [r7, #12]
 8104bac:	681b      	ldr	r3, [r3, #0]
 8104bae:	699b      	ldr	r3, [r3, #24]
 8104bb0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8104bb2:	2300      	movs	r3, #0
 8104bb4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8104bb6:	687b      	ldr	r3, [r7, #4]
 8104bb8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8104bba:	69bb      	ldr	r3, [r7, #24]
 8104bbc:	f003 0310 	and.w	r3, r3, #16
 8104bc0:	2b00      	cmp	r3, #0
 8104bc2:	d068      	beq.n	8104c96 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104bc4:	68fb      	ldr	r3, [r7, #12]
 8104bc6:	681b      	ldr	r3, [r3, #0]
 8104bc8:	2210      	movs	r2, #16
 8104bca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8104bcc:	e049      	b.n	8104c62 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8104bce:	68bb      	ldr	r3, [r7, #8]
 8104bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104bd4:	d045      	beq.n	8104c62 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8104bd6:	f7ff f883 	bl	8103ce0 <HAL_GetTick>
 8104bda:	4602      	mov	r2, r0
 8104bdc:	69fb      	ldr	r3, [r7, #28]
 8104bde:	1ad3      	subs	r3, r2, r3
 8104be0:	68ba      	ldr	r2, [r7, #8]
 8104be2:	429a      	cmp	r2, r3
 8104be4:	d302      	bcc.n	8104bec <I2C_IsErrorOccurred+0x54>
 8104be6:	68bb      	ldr	r3, [r7, #8]
 8104be8:	2b00      	cmp	r3, #0
 8104bea:	d13a      	bne.n	8104c62 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8104bec:	68fb      	ldr	r3, [r7, #12]
 8104bee:	681b      	ldr	r3, [r3, #0]
 8104bf0:	685b      	ldr	r3, [r3, #4]
 8104bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8104bf6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8104bf8:	68fb      	ldr	r3, [r7, #12]
 8104bfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8104bfe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8104c00:	68fb      	ldr	r3, [r7, #12]
 8104c02:	681b      	ldr	r3, [r3, #0]
 8104c04:	699b      	ldr	r3, [r3, #24]
 8104c06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8104c0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8104c0e:	d121      	bne.n	8104c54 <I2C_IsErrorOccurred+0xbc>
 8104c10:	697b      	ldr	r3, [r7, #20]
 8104c12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104c16:	d01d      	beq.n	8104c54 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8104c18:	7cfb      	ldrb	r3, [r7, #19]
 8104c1a:	2b20      	cmp	r3, #32
 8104c1c:	d01a      	beq.n	8104c54 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8104c1e:	68fb      	ldr	r3, [r7, #12]
 8104c20:	681b      	ldr	r3, [r3, #0]
 8104c22:	685a      	ldr	r2, [r3, #4]
 8104c24:	68fb      	ldr	r3, [r7, #12]
 8104c26:	681b      	ldr	r3, [r3, #0]
 8104c28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8104c2c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8104c2e:	f7ff f857 	bl	8103ce0 <HAL_GetTick>
 8104c32:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104c34:	e00e      	b.n	8104c54 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8104c36:	f7ff f853 	bl	8103ce0 <HAL_GetTick>
 8104c3a:	4602      	mov	r2, r0
 8104c3c:	69fb      	ldr	r3, [r7, #28]
 8104c3e:	1ad3      	subs	r3, r2, r3
 8104c40:	2b19      	cmp	r3, #25
 8104c42:	d907      	bls.n	8104c54 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8104c44:	6a3b      	ldr	r3, [r7, #32]
 8104c46:	f043 0320 	orr.w	r3, r3, #32
 8104c4a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8104c4c:	2301      	movs	r3, #1
 8104c4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8104c52:	e006      	b.n	8104c62 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104c54:	68fb      	ldr	r3, [r7, #12]
 8104c56:	681b      	ldr	r3, [r3, #0]
 8104c58:	699b      	ldr	r3, [r3, #24]
 8104c5a:	f003 0320 	and.w	r3, r3, #32
 8104c5e:	2b20      	cmp	r3, #32
 8104c60:	d1e9      	bne.n	8104c36 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8104c62:	68fb      	ldr	r3, [r7, #12]
 8104c64:	681b      	ldr	r3, [r3, #0]
 8104c66:	699b      	ldr	r3, [r3, #24]
 8104c68:	f003 0320 	and.w	r3, r3, #32
 8104c6c:	2b20      	cmp	r3, #32
 8104c6e:	d003      	beq.n	8104c78 <I2C_IsErrorOccurred+0xe0>
 8104c70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8104c74:	2b00      	cmp	r3, #0
 8104c76:	d0aa      	beq.n	8104bce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8104c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8104c7c:	2b00      	cmp	r3, #0
 8104c7e:	d103      	bne.n	8104c88 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104c80:	68fb      	ldr	r3, [r7, #12]
 8104c82:	681b      	ldr	r3, [r3, #0]
 8104c84:	2220      	movs	r2, #32
 8104c86:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8104c88:	6a3b      	ldr	r3, [r7, #32]
 8104c8a:	f043 0304 	orr.w	r3, r3, #4
 8104c8e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8104c90:	2301      	movs	r3, #1
 8104c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8104c96:	68fb      	ldr	r3, [r7, #12]
 8104c98:	681b      	ldr	r3, [r3, #0]
 8104c9a:	699b      	ldr	r3, [r3, #24]
 8104c9c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8104c9e:	69bb      	ldr	r3, [r7, #24]
 8104ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104ca4:	2b00      	cmp	r3, #0
 8104ca6:	d00b      	beq.n	8104cc0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8104ca8:	6a3b      	ldr	r3, [r7, #32]
 8104caa:	f043 0301 	orr.w	r3, r3, #1
 8104cae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8104cb0:	68fb      	ldr	r3, [r7, #12]
 8104cb2:	681b      	ldr	r3, [r3, #0]
 8104cb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8104cb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8104cba:	2301      	movs	r3, #1
 8104cbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8104cc0:	69bb      	ldr	r3, [r7, #24]
 8104cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8104cc6:	2b00      	cmp	r3, #0
 8104cc8:	d00b      	beq.n	8104ce2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8104cca:	6a3b      	ldr	r3, [r7, #32]
 8104ccc:	f043 0308 	orr.w	r3, r3, #8
 8104cd0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8104cd2:	68fb      	ldr	r3, [r7, #12]
 8104cd4:	681b      	ldr	r3, [r3, #0]
 8104cd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8104cda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8104cdc:	2301      	movs	r3, #1
 8104cde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8104ce2:	69bb      	ldr	r3, [r7, #24]
 8104ce4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8104ce8:	2b00      	cmp	r3, #0
 8104cea:	d00b      	beq.n	8104d04 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8104cec:	6a3b      	ldr	r3, [r7, #32]
 8104cee:	f043 0302 	orr.w	r3, r3, #2
 8104cf2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8104cf4:	68fb      	ldr	r3, [r7, #12]
 8104cf6:	681b      	ldr	r3, [r3, #0]
 8104cf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8104cfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8104cfe:	2301      	movs	r3, #1
 8104d00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8104d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8104d08:	2b00      	cmp	r3, #0
 8104d0a:	d01c      	beq.n	8104d46 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8104d0c:	68f8      	ldr	r0, [r7, #12]
 8104d0e:	f7ff fdaf 	bl	8104870 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104d12:	68fb      	ldr	r3, [r7, #12]
 8104d14:	681b      	ldr	r3, [r3, #0]
 8104d16:	6859      	ldr	r1, [r3, #4]
 8104d18:	68fb      	ldr	r3, [r7, #12]
 8104d1a:	681a      	ldr	r2, [r3, #0]
 8104d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8104d54 <I2C_IsErrorOccurred+0x1bc>)
 8104d1e:	400b      	ands	r3, r1
 8104d20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8104d22:	68fb      	ldr	r3, [r7, #12]
 8104d24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8104d26:	6a3b      	ldr	r3, [r7, #32]
 8104d28:	431a      	orrs	r2, r3
 8104d2a:	68fb      	ldr	r3, [r7, #12]
 8104d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8104d2e:	68fb      	ldr	r3, [r7, #12]
 8104d30:	2220      	movs	r2, #32
 8104d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8104d36:	68fb      	ldr	r3, [r7, #12]
 8104d38:	2200      	movs	r2, #0
 8104d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104d3e:	68fb      	ldr	r3, [r7, #12]
 8104d40:	2200      	movs	r2, #0
 8104d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8104d46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8104d4a:	4618      	mov	r0, r3
 8104d4c:	3728      	adds	r7, #40	@ 0x28
 8104d4e:	46bd      	mov	sp, r7
 8104d50:	bd80      	pop	{r7, pc}
 8104d52:	bf00      	nop
 8104d54:	fe00e800 	.word	0xfe00e800

08104d58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8104d58:	b480      	push	{r7}
 8104d5a:	b087      	sub	sp, #28
 8104d5c:	af00      	add	r7, sp, #0
 8104d5e:	60f8      	str	r0, [r7, #12]
 8104d60:	607b      	str	r3, [r7, #4]
 8104d62:	460b      	mov	r3, r1
 8104d64:	817b      	strh	r3, [r7, #10]
 8104d66:	4613      	mov	r3, r2
 8104d68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8104d6a:	897b      	ldrh	r3, [r7, #10]
 8104d6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8104d70:	7a7b      	ldrb	r3, [r7, #9]
 8104d72:	041b      	lsls	r3, r3, #16
 8104d74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8104d78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8104d7a:	687b      	ldr	r3, [r7, #4]
 8104d7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8104d7e:	6a3b      	ldr	r3, [r7, #32]
 8104d80:	4313      	orrs	r3, r2
 8104d82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8104d86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8104d88:	68fb      	ldr	r3, [r7, #12]
 8104d8a:	681b      	ldr	r3, [r3, #0]
 8104d8c:	685a      	ldr	r2, [r3, #4]
 8104d8e:	6a3b      	ldr	r3, [r7, #32]
 8104d90:	0d5b      	lsrs	r3, r3, #21
 8104d92:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8104d96:	4b08      	ldr	r3, [pc, #32]	@ (8104db8 <I2C_TransferConfig+0x60>)
 8104d98:	430b      	orrs	r3, r1
 8104d9a:	43db      	mvns	r3, r3
 8104d9c:	ea02 0103 	and.w	r1, r2, r3
 8104da0:	68fb      	ldr	r3, [r7, #12]
 8104da2:	681b      	ldr	r3, [r3, #0]
 8104da4:	697a      	ldr	r2, [r7, #20]
 8104da6:	430a      	orrs	r2, r1
 8104da8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8104daa:	bf00      	nop
 8104dac:	371c      	adds	r7, #28
 8104dae:	46bd      	mov	sp, r7
 8104db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104db4:	4770      	bx	lr
 8104db6:	bf00      	nop
 8104db8:	03ff63ff 	.word	0x03ff63ff

08104dbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8104dbc:	b480      	push	{r7}
 8104dbe:	b083      	sub	sp, #12
 8104dc0:	af00      	add	r7, sp, #0
 8104dc2:	6078      	str	r0, [r7, #4]
 8104dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104dc6:	687b      	ldr	r3, [r7, #4]
 8104dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8104dcc:	b2db      	uxtb	r3, r3
 8104dce:	2b20      	cmp	r3, #32
 8104dd0:	d138      	bne.n	8104e44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104dd2:	687b      	ldr	r3, [r7, #4]
 8104dd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8104dd8:	2b01      	cmp	r3, #1
 8104dda:	d101      	bne.n	8104de0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8104ddc:	2302      	movs	r3, #2
 8104dde:	e032      	b.n	8104e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8104de0:	687b      	ldr	r3, [r7, #4]
 8104de2:	2201      	movs	r2, #1
 8104de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104de8:	687b      	ldr	r3, [r7, #4]
 8104dea:	2224      	movs	r2, #36	@ 0x24
 8104dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104df0:	687b      	ldr	r3, [r7, #4]
 8104df2:	681b      	ldr	r3, [r3, #0]
 8104df4:	681a      	ldr	r2, [r3, #0]
 8104df6:	687b      	ldr	r3, [r7, #4]
 8104df8:	681b      	ldr	r3, [r3, #0]
 8104dfa:	f022 0201 	bic.w	r2, r2, #1
 8104dfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8104e00:	687b      	ldr	r3, [r7, #4]
 8104e02:	681b      	ldr	r3, [r3, #0]
 8104e04:	681a      	ldr	r2, [r3, #0]
 8104e06:	687b      	ldr	r3, [r7, #4]
 8104e08:	681b      	ldr	r3, [r3, #0]
 8104e0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8104e0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8104e10:	687b      	ldr	r3, [r7, #4]
 8104e12:	681b      	ldr	r3, [r3, #0]
 8104e14:	6819      	ldr	r1, [r3, #0]
 8104e16:	687b      	ldr	r3, [r7, #4]
 8104e18:	681b      	ldr	r3, [r3, #0]
 8104e1a:	683a      	ldr	r2, [r7, #0]
 8104e1c:	430a      	orrs	r2, r1
 8104e1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104e20:	687b      	ldr	r3, [r7, #4]
 8104e22:	681b      	ldr	r3, [r3, #0]
 8104e24:	681a      	ldr	r2, [r3, #0]
 8104e26:	687b      	ldr	r3, [r7, #4]
 8104e28:	681b      	ldr	r3, [r3, #0]
 8104e2a:	f042 0201 	orr.w	r2, r2, #1
 8104e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104e30:	687b      	ldr	r3, [r7, #4]
 8104e32:	2220      	movs	r2, #32
 8104e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104e38:	687b      	ldr	r3, [r7, #4]
 8104e3a:	2200      	movs	r2, #0
 8104e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8104e40:	2300      	movs	r3, #0
 8104e42:	e000      	b.n	8104e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8104e44:	2302      	movs	r3, #2
  }
}
 8104e46:	4618      	mov	r0, r3
 8104e48:	370c      	adds	r7, #12
 8104e4a:	46bd      	mov	sp, r7
 8104e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e50:	4770      	bx	lr

08104e52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8104e52:	b480      	push	{r7}
 8104e54:	b085      	sub	sp, #20
 8104e56:	af00      	add	r7, sp, #0
 8104e58:	6078      	str	r0, [r7, #4]
 8104e5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104e5c:	687b      	ldr	r3, [r7, #4]
 8104e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8104e62:	b2db      	uxtb	r3, r3
 8104e64:	2b20      	cmp	r3, #32
 8104e66:	d139      	bne.n	8104edc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104e68:	687b      	ldr	r3, [r7, #4]
 8104e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8104e6e:	2b01      	cmp	r3, #1
 8104e70:	d101      	bne.n	8104e76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8104e72:	2302      	movs	r3, #2
 8104e74:	e033      	b.n	8104ede <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8104e76:	687b      	ldr	r3, [r7, #4]
 8104e78:	2201      	movs	r2, #1
 8104e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104e7e:	687b      	ldr	r3, [r7, #4]
 8104e80:	2224      	movs	r2, #36	@ 0x24
 8104e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104e86:	687b      	ldr	r3, [r7, #4]
 8104e88:	681b      	ldr	r3, [r3, #0]
 8104e8a:	681a      	ldr	r2, [r3, #0]
 8104e8c:	687b      	ldr	r3, [r7, #4]
 8104e8e:	681b      	ldr	r3, [r3, #0]
 8104e90:	f022 0201 	bic.w	r2, r2, #1
 8104e94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8104e96:	687b      	ldr	r3, [r7, #4]
 8104e98:	681b      	ldr	r3, [r3, #0]
 8104e9a:	681b      	ldr	r3, [r3, #0]
 8104e9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8104e9e:	68fb      	ldr	r3, [r7, #12]
 8104ea0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8104ea4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8104ea6:	683b      	ldr	r3, [r7, #0]
 8104ea8:	021b      	lsls	r3, r3, #8
 8104eaa:	68fa      	ldr	r2, [r7, #12]
 8104eac:	4313      	orrs	r3, r2
 8104eae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8104eb0:	687b      	ldr	r3, [r7, #4]
 8104eb2:	681b      	ldr	r3, [r3, #0]
 8104eb4:	68fa      	ldr	r2, [r7, #12]
 8104eb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104eb8:	687b      	ldr	r3, [r7, #4]
 8104eba:	681b      	ldr	r3, [r3, #0]
 8104ebc:	681a      	ldr	r2, [r3, #0]
 8104ebe:	687b      	ldr	r3, [r7, #4]
 8104ec0:	681b      	ldr	r3, [r3, #0]
 8104ec2:	f042 0201 	orr.w	r2, r2, #1
 8104ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104ec8:	687b      	ldr	r3, [r7, #4]
 8104eca:	2220      	movs	r2, #32
 8104ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104ed0:	687b      	ldr	r3, [r7, #4]
 8104ed2:	2200      	movs	r2, #0
 8104ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8104ed8:	2300      	movs	r3, #0
 8104eda:	e000      	b.n	8104ede <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8104edc:	2302      	movs	r3, #2
  }
}
 8104ede:	4618      	mov	r0, r3
 8104ee0:	3714      	adds	r7, #20
 8104ee2:	46bd      	mov	sp, r7
 8104ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ee8:	4770      	bx	lr
	...

08104eec <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104eec:	b580      	push	{r7, lr}
 8104eee:	b084      	sub	sp, #16
 8104ef0:	af00      	add	r7, sp, #0
 8104ef2:	60f8      	str	r0, [r7, #12]
 8104ef4:	460b      	mov	r3, r1
 8104ef6:	607a      	str	r2, [r7, #4]
 8104ef8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104efa:	4b37      	ldr	r3, [pc, #220]	@ (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104efc:	681b      	ldr	r3, [r3, #0]
 8104efe:	f023 0201 	bic.w	r2, r3, #1
 8104f02:	4935      	ldr	r1, [pc, #212]	@ (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104f04:	68fb      	ldr	r3, [r7, #12]
 8104f06:	4313      	orrs	r3, r2
 8104f08:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8104f0a:	687b      	ldr	r3, [r7, #4]
 8104f0c:	2b00      	cmp	r3, #0
 8104f0e:	d123      	bne.n	8104f58 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104f10:	f7fe fffa 	bl	8103f08 <HAL_GetCurrentCPUID>
 8104f14:	4603      	mov	r3, r0
 8104f16:	2b03      	cmp	r3, #3
 8104f18:	d158      	bne.n	8104fcc <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104f1c:	691b      	ldr	r3, [r3, #16]
 8104f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104f20:	f023 0301 	bic.w	r3, r3, #1
 8104f24:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104f26:	4b2d      	ldr	r3, [pc, #180]	@ (8104fdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104f28:	691b      	ldr	r3, [r3, #16]
 8104f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8104fdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104f2c:	f043 0304 	orr.w	r3, r3, #4
 8104f30:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8104f32:	f3bf 8f4f 	dsb	sy
}
 8104f36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104f38:	f3bf 8f6f 	isb	sy
}
 8104f3c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104f3e:	7afb      	ldrb	r3, [r7, #11]
 8104f40:	2b01      	cmp	r3, #1
 8104f42:	d101      	bne.n	8104f48 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104f44:	bf30      	wfi
 8104f46:	e000      	b.n	8104f4a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104f48:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104f4a:	4b24      	ldr	r3, [pc, #144]	@ (8104fdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104f4c:	691b      	ldr	r3, [r3, #16]
 8104f4e:	4a23      	ldr	r2, [pc, #140]	@ (8104fdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104f50:	f023 0304 	bic.w	r3, r3, #4
 8104f54:	6113      	str	r3, [r2, #16]
 8104f56:	e03c      	b.n	8104fd2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104f58:	687b      	ldr	r3, [r7, #4]
 8104f5a:	2b01      	cmp	r3, #1
 8104f5c:	d123      	bne.n	8104fa6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8104f5e:	f7fe ffd3 	bl	8103f08 <HAL_GetCurrentCPUID>
 8104f62:	4603      	mov	r3, r0
 8104f64:	2b01      	cmp	r3, #1
 8104f66:	d133      	bne.n	8104fd0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104f68:	4b1b      	ldr	r3, [pc, #108]	@ (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104f6a:	695b      	ldr	r3, [r3, #20]
 8104f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104f6e:	f023 0302 	bic.w	r3, r3, #2
 8104f72:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104f74:	4b19      	ldr	r3, [pc, #100]	@ (8104fdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104f76:	691b      	ldr	r3, [r3, #16]
 8104f78:	4a18      	ldr	r2, [pc, #96]	@ (8104fdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104f7a:	f043 0304 	orr.w	r3, r3, #4
 8104f7e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104f80:	f3bf 8f4f 	dsb	sy
}
 8104f84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104f86:	f3bf 8f6f 	isb	sy
}
 8104f8a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104f8c:	7afb      	ldrb	r3, [r7, #11]
 8104f8e:	2b01      	cmp	r3, #1
 8104f90:	d101      	bne.n	8104f96 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104f92:	bf30      	wfi
 8104f94:	e000      	b.n	8104f98 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104f96:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104f98:	4b10      	ldr	r3, [pc, #64]	@ (8104fdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104f9a:	691b      	ldr	r3, [r3, #16]
 8104f9c:	4a0f      	ldr	r2, [pc, #60]	@ (8104fdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104f9e:	f023 0304 	bic.w	r3, r3, #4
 8104fa2:	6113      	str	r3, [r2, #16]
 8104fa4:	e015      	b.n	8104fd2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104fa6:	f7fe ffaf 	bl	8103f08 <HAL_GetCurrentCPUID>
 8104faa:	4603      	mov	r3, r0
 8104fac:	2b03      	cmp	r3, #3
 8104fae:	d106      	bne.n	8104fbe <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104fb0:	4b09      	ldr	r3, [pc, #36]	@ (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104fb2:	691b      	ldr	r3, [r3, #16]
 8104fb4:	4a08      	ldr	r2, [pc, #32]	@ (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104fb6:	f023 0304 	bic.w	r3, r3, #4
 8104fba:	6113      	str	r3, [r2, #16]
 8104fbc:	e009      	b.n	8104fd2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104fbe:	4b06      	ldr	r3, [pc, #24]	@ (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104fc0:	695b      	ldr	r3, [r3, #20]
 8104fc2:	4a05      	ldr	r2, [pc, #20]	@ (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104fc4:	f023 0304 	bic.w	r3, r3, #4
 8104fc8:	6153      	str	r3, [r2, #20]
 8104fca:	e002      	b.n	8104fd2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104fcc:	bf00      	nop
 8104fce:	e000      	b.n	8104fd2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104fd0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104fd2:	3710      	adds	r7, #16
 8104fd4:	46bd      	mov	sp, r7
 8104fd6:	bd80      	pop	{r7, pc}
 8104fd8:	58024800 	.word	0x58024800
 8104fdc:	e000ed00 	.word	0xe000ed00

08104fe0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104fe0:	b580      	push	{r7, lr}
 8104fe2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104fe4:	f7fe ff90 	bl	8103f08 <HAL_GetCurrentCPUID>
 8104fe8:	4603      	mov	r3, r0
 8104fea:	2b03      	cmp	r3, #3
 8104fec:	d101      	bne.n	8104ff2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8104fee:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104ff0:	e001      	b.n	8104ff6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8104ff2:	bf40      	sev
    __WFE ();
 8104ff4:	bf20      	wfe
}
 8104ff6:	bf00      	nop
 8104ff8:	bd80      	pop	{r7, pc}
	...

08104ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104ffc:	b480      	push	{r7}
 8104ffe:	b089      	sub	sp, #36	@ 0x24
 8105000:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105002:	4bb3      	ldr	r3, [pc, #716]	@ (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105004:	691b      	ldr	r3, [r3, #16]
 8105006:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810500a:	2b18      	cmp	r3, #24
 810500c:	f200 8155 	bhi.w	81052ba <HAL_RCC_GetSysClockFreq+0x2be>
 8105010:	a201      	add	r2, pc, #4	@ (adr r2, 8105018 <HAL_RCC_GetSysClockFreq+0x1c>)
 8105012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105016:	bf00      	nop
 8105018:	0810507d 	.word	0x0810507d
 810501c:	081052bb 	.word	0x081052bb
 8105020:	081052bb 	.word	0x081052bb
 8105024:	081052bb 	.word	0x081052bb
 8105028:	081052bb 	.word	0x081052bb
 810502c:	081052bb 	.word	0x081052bb
 8105030:	081052bb 	.word	0x081052bb
 8105034:	081052bb 	.word	0x081052bb
 8105038:	081050a3 	.word	0x081050a3
 810503c:	081052bb 	.word	0x081052bb
 8105040:	081052bb 	.word	0x081052bb
 8105044:	081052bb 	.word	0x081052bb
 8105048:	081052bb 	.word	0x081052bb
 810504c:	081052bb 	.word	0x081052bb
 8105050:	081052bb 	.word	0x081052bb
 8105054:	081052bb 	.word	0x081052bb
 8105058:	081050a9 	.word	0x081050a9
 810505c:	081052bb 	.word	0x081052bb
 8105060:	081052bb 	.word	0x081052bb
 8105064:	081052bb 	.word	0x081052bb
 8105068:	081052bb 	.word	0x081052bb
 810506c:	081052bb 	.word	0x081052bb
 8105070:	081052bb 	.word	0x081052bb
 8105074:	081052bb 	.word	0x081052bb
 8105078:	081050af 	.word	0x081050af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810507c:	4b94      	ldr	r3, [pc, #592]	@ (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810507e:	681b      	ldr	r3, [r3, #0]
 8105080:	f003 0320 	and.w	r3, r3, #32
 8105084:	2b00      	cmp	r3, #0
 8105086:	d009      	beq.n	810509c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105088:	4b91      	ldr	r3, [pc, #580]	@ (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810508a:	681b      	ldr	r3, [r3, #0]
 810508c:	08db      	lsrs	r3, r3, #3
 810508e:	f003 0303 	and.w	r3, r3, #3
 8105092:	4a90      	ldr	r2, [pc, #576]	@ (81052d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105094:	fa22 f303 	lsr.w	r3, r2, r3
 8105098:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810509a:	e111      	b.n	81052c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810509c:	4b8d      	ldr	r3, [pc, #564]	@ (81052d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810509e:	61bb      	str	r3, [r7, #24]
      break;
 81050a0:	e10e      	b.n	81052c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81050a2:	4b8d      	ldr	r3, [pc, #564]	@ (81052d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81050a4:	61bb      	str	r3, [r7, #24]
      break;
 81050a6:	e10b      	b.n	81052c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81050a8:	4b8c      	ldr	r3, [pc, #560]	@ (81052dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 81050aa:	61bb      	str	r3, [r7, #24]
      break;
 81050ac:	e108      	b.n	81052c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81050ae:	4b88      	ldr	r3, [pc, #544]	@ (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81050b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81050b2:	f003 0303 	and.w	r3, r3, #3
 81050b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81050b8:	4b85      	ldr	r3, [pc, #532]	@ (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81050ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81050bc:	091b      	lsrs	r3, r3, #4
 81050be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81050c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81050c4:	4b82      	ldr	r3, [pc, #520]	@ (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81050c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81050c8:	f003 0301 	and.w	r3, r3, #1
 81050cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81050ce:	4b80      	ldr	r3, [pc, #512]	@ (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81050d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81050d2:	08db      	lsrs	r3, r3, #3
 81050d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81050d8:	68fa      	ldr	r2, [r7, #12]
 81050da:	fb02 f303 	mul.w	r3, r2, r3
 81050de:	ee07 3a90 	vmov	s15, r3
 81050e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81050e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81050ea:	693b      	ldr	r3, [r7, #16]
 81050ec:	2b00      	cmp	r3, #0
 81050ee:	f000 80e1 	beq.w	81052b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 81050f2:	697b      	ldr	r3, [r7, #20]
 81050f4:	2b02      	cmp	r3, #2
 81050f6:	f000 8083 	beq.w	8105200 <HAL_RCC_GetSysClockFreq+0x204>
 81050fa:	697b      	ldr	r3, [r7, #20]
 81050fc:	2b02      	cmp	r3, #2
 81050fe:	f200 80a1 	bhi.w	8105244 <HAL_RCC_GetSysClockFreq+0x248>
 8105102:	697b      	ldr	r3, [r7, #20]
 8105104:	2b00      	cmp	r3, #0
 8105106:	d003      	beq.n	8105110 <HAL_RCC_GetSysClockFreq+0x114>
 8105108:	697b      	ldr	r3, [r7, #20]
 810510a:	2b01      	cmp	r3, #1
 810510c:	d056      	beq.n	81051bc <HAL_RCC_GetSysClockFreq+0x1c0>
 810510e:	e099      	b.n	8105244 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105110:	4b6f      	ldr	r3, [pc, #444]	@ (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105112:	681b      	ldr	r3, [r3, #0]
 8105114:	f003 0320 	and.w	r3, r3, #32
 8105118:	2b00      	cmp	r3, #0
 810511a:	d02d      	beq.n	8105178 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810511c:	4b6c      	ldr	r3, [pc, #432]	@ (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810511e:	681b      	ldr	r3, [r3, #0]
 8105120:	08db      	lsrs	r3, r3, #3
 8105122:	f003 0303 	and.w	r3, r3, #3
 8105126:	4a6b      	ldr	r2, [pc, #428]	@ (81052d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105128:	fa22 f303 	lsr.w	r3, r2, r3
 810512c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810512e:	687b      	ldr	r3, [r7, #4]
 8105130:	ee07 3a90 	vmov	s15, r3
 8105134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105138:	693b      	ldr	r3, [r7, #16]
 810513a:	ee07 3a90 	vmov	s15, r3
 810513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105146:	4b62      	ldr	r3, [pc, #392]	@ (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810514a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810514e:	ee07 3a90 	vmov	s15, r3
 8105152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105156:	ed97 6a02 	vldr	s12, [r7, #8]
 810515a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81052e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810515e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810516a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810516e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105172:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8105176:	e087      	b.n	8105288 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105178:	693b      	ldr	r3, [r7, #16]
 810517a:	ee07 3a90 	vmov	s15, r3
 810517e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105182:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81052e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8105186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810518a:	4b51      	ldr	r3, [pc, #324]	@ (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810518c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810518e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105192:	ee07 3a90 	vmov	s15, r3
 8105196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810519a:	ed97 6a02 	vldr	s12, [r7, #8]
 810519e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81052e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81051a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81051a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81051aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81051ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81051b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81051b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81051ba:	e065      	b.n	8105288 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81051bc:	693b      	ldr	r3, [r7, #16]
 81051be:	ee07 3a90 	vmov	s15, r3
 81051c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81051c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81052e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 81051ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81051ce:	4b40      	ldr	r3, [pc, #256]	@ (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81051d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81051d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81051d6:	ee07 3a90 	vmov	s15, r3
 81051da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81051de:	ed97 6a02 	vldr	s12, [r7, #8]
 81051e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81052e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81051e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81051ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81051ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81051f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81051f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81051fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81051fe:	e043      	b.n	8105288 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105200:	693b      	ldr	r3, [r7, #16]
 8105202:	ee07 3a90 	vmov	s15, r3
 8105206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810520a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81052ec <HAL_RCC_GetSysClockFreq+0x2f0>
 810520e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105212:	4b2f      	ldr	r3, [pc, #188]	@ (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810521a:	ee07 3a90 	vmov	s15, r3
 810521e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105222:	ed97 6a02 	vldr	s12, [r7, #8]
 8105226:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81052e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810522a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810522e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810523a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810523e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105242:	e021      	b.n	8105288 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105244:	693b      	ldr	r3, [r7, #16]
 8105246:	ee07 3a90 	vmov	s15, r3
 810524a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810524e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81052e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105256:	4b1e      	ldr	r3, [pc, #120]	@ (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810525a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810525e:	ee07 3a90 	vmov	s15, r3
 8105262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105266:	ed97 6a02 	vldr	s12, [r7, #8]
 810526a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81052e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810526e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810527a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810527e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105282:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105286:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8105288:	4b11      	ldr	r3, [pc, #68]	@ (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810528a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810528c:	0a5b      	lsrs	r3, r3, #9
 810528e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105292:	3301      	adds	r3, #1
 8105294:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8105296:	683b      	ldr	r3, [r7, #0]
 8105298:	ee07 3a90 	vmov	s15, r3
 810529c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81052a0:	edd7 6a07 	vldr	s13, [r7, #28]
 81052a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81052a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81052ac:	ee17 3a90 	vmov	r3, s15
 81052b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81052b2:	e005      	b.n	81052c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81052b4:	2300      	movs	r3, #0
 81052b6:	61bb      	str	r3, [r7, #24]
      break;
 81052b8:	e002      	b.n	81052c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81052ba:	4b07      	ldr	r3, [pc, #28]	@ (81052d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81052bc:	61bb      	str	r3, [r7, #24]
      break;
 81052be:	bf00      	nop
  }

  return sysclockfreq;
 81052c0:	69bb      	ldr	r3, [r7, #24]
}
 81052c2:	4618      	mov	r0, r3
 81052c4:	3724      	adds	r7, #36	@ 0x24
 81052c6:	46bd      	mov	sp, r7
 81052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052cc:	4770      	bx	lr
 81052ce:	bf00      	nop
 81052d0:	58024400 	.word	0x58024400
 81052d4:	03d09000 	.word	0x03d09000
 81052d8:	003d0900 	.word	0x003d0900
 81052dc:	017d7840 	.word	0x017d7840
 81052e0:	46000000 	.word	0x46000000
 81052e4:	4c742400 	.word	0x4c742400
 81052e8:	4a742400 	.word	0x4a742400
 81052ec:	4bbebc20 	.word	0x4bbebc20

081052f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81052f0:	b580      	push	{r7, lr}
 81052f2:	b082      	sub	sp, #8
 81052f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81052f6:	f7ff fe81 	bl	8104ffc <HAL_RCC_GetSysClockFreq>
 81052fa:	4602      	mov	r2, r0
 81052fc:	4b11      	ldr	r3, [pc, #68]	@ (8105344 <HAL_RCC_GetHCLKFreq+0x54>)
 81052fe:	699b      	ldr	r3, [r3, #24]
 8105300:	0a1b      	lsrs	r3, r3, #8
 8105302:	f003 030f 	and.w	r3, r3, #15
 8105306:	4910      	ldr	r1, [pc, #64]	@ (8105348 <HAL_RCC_GetHCLKFreq+0x58>)
 8105308:	5ccb      	ldrb	r3, [r1, r3]
 810530a:	f003 031f 	and.w	r3, r3, #31
 810530e:	fa22 f303 	lsr.w	r3, r2, r3
 8105312:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105314:	4b0b      	ldr	r3, [pc, #44]	@ (8105344 <HAL_RCC_GetHCLKFreq+0x54>)
 8105316:	699b      	ldr	r3, [r3, #24]
 8105318:	f003 030f 	and.w	r3, r3, #15
 810531c:	4a0a      	ldr	r2, [pc, #40]	@ (8105348 <HAL_RCC_GetHCLKFreq+0x58>)
 810531e:	5cd3      	ldrb	r3, [r2, r3]
 8105320:	f003 031f 	and.w	r3, r3, #31
 8105324:	687a      	ldr	r2, [r7, #4]
 8105326:	fa22 f303 	lsr.w	r3, r2, r3
 810532a:	4a08      	ldr	r2, [pc, #32]	@ (810534c <HAL_RCC_GetHCLKFreq+0x5c>)
 810532c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810532e:	4b07      	ldr	r3, [pc, #28]	@ (810534c <HAL_RCC_GetHCLKFreq+0x5c>)
 8105330:	681b      	ldr	r3, [r3, #0]
 8105332:	4a07      	ldr	r2, [pc, #28]	@ (8105350 <HAL_RCC_GetHCLKFreq+0x60>)
 8105334:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8105336:	4b05      	ldr	r3, [pc, #20]	@ (810534c <HAL_RCC_GetHCLKFreq+0x5c>)
 8105338:	681b      	ldr	r3, [r3, #0]
}
 810533a:	4618      	mov	r0, r3
 810533c:	3708      	adds	r7, #8
 810533e:	46bd      	mov	sp, r7
 8105340:	bd80      	pop	{r7, pc}
 8105342:	bf00      	nop
 8105344:	58024400 	.word	0x58024400
 8105348:	0810ea38 	.word	0x0810ea38
 810534c:	10000004 	.word	0x10000004
 8105350:	10000000 	.word	0x10000000

08105354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105354:	b580      	push	{r7, lr}
 8105356:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105358:	f7ff ffca 	bl	81052f0 <HAL_RCC_GetHCLKFreq>
 810535c:	4602      	mov	r2, r0
 810535e:	4b06      	ldr	r3, [pc, #24]	@ (8105378 <HAL_RCC_GetPCLK1Freq+0x24>)
 8105360:	69db      	ldr	r3, [r3, #28]
 8105362:	091b      	lsrs	r3, r3, #4
 8105364:	f003 0307 	and.w	r3, r3, #7
 8105368:	4904      	ldr	r1, [pc, #16]	@ (810537c <HAL_RCC_GetPCLK1Freq+0x28>)
 810536a:	5ccb      	ldrb	r3, [r1, r3]
 810536c:	f003 031f 	and.w	r3, r3, #31
 8105370:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105374:	4618      	mov	r0, r3
 8105376:	bd80      	pop	{r7, pc}
 8105378:	58024400 	.word	0x58024400
 810537c:	0810ea38 	.word	0x0810ea38

08105380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105380:	b580      	push	{r7, lr}
 8105382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8105384:	f7ff ffb4 	bl	81052f0 <HAL_RCC_GetHCLKFreq>
 8105388:	4602      	mov	r2, r0
 810538a:	4b06      	ldr	r3, [pc, #24]	@ (81053a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 810538c:	69db      	ldr	r3, [r3, #28]
 810538e:	0a1b      	lsrs	r3, r3, #8
 8105390:	f003 0307 	and.w	r3, r3, #7
 8105394:	4904      	ldr	r1, [pc, #16]	@ (81053a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8105396:	5ccb      	ldrb	r3, [r1, r3]
 8105398:	f003 031f 	and.w	r3, r3, #31
 810539c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81053a0:	4618      	mov	r0, r3
 81053a2:	bd80      	pop	{r7, pc}
 81053a4:	58024400 	.word	0x58024400
 81053a8:	0810ea38 	.word	0x0810ea38

081053ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81053ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81053b0:	b0ca      	sub	sp, #296	@ 0x128
 81053b2:	af00      	add	r7, sp, #0
 81053b4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81053b8:	2300      	movs	r3, #0
 81053ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81053be:	2300      	movs	r3, #0
 81053c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81053c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81053cc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 81053d0:	2500      	movs	r5, #0
 81053d2:	ea54 0305 	orrs.w	r3, r4, r5
 81053d6:	d049      	beq.n	810546c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81053d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81053dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81053de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81053e2:	d02f      	beq.n	8105444 <HAL_RCCEx_PeriphCLKConfig+0x98>
 81053e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81053e8:	d828      	bhi.n	810543c <HAL_RCCEx_PeriphCLKConfig+0x90>
 81053ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81053ee:	d01a      	beq.n	8105426 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81053f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81053f4:	d822      	bhi.n	810543c <HAL_RCCEx_PeriphCLKConfig+0x90>
 81053f6:	2b00      	cmp	r3, #0
 81053f8:	d003      	beq.n	8105402 <HAL_RCCEx_PeriphCLKConfig+0x56>
 81053fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81053fe:	d007      	beq.n	8105410 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8105400:	e01c      	b.n	810543c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105402:	4bb8      	ldr	r3, [pc, #736]	@ (81056e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105406:	4ab7      	ldr	r2, [pc, #732]	@ (81056e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810540c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810540e:	e01a      	b.n	8105446 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105414:	3308      	adds	r3, #8
 8105416:	2102      	movs	r1, #2
 8105418:	4618      	mov	r0, r3
 810541a:	f001 fc8f 	bl	8106d3c <RCCEx_PLL2_Config>
 810541e:	4603      	mov	r3, r0
 8105420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105424:	e00f      	b.n	8105446 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810542a:	3328      	adds	r3, #40	@ 0x28
 810542c:	2102      	movs	r1, #2
 810542e:	4618      	mov	r0, r3
 8105430:	f001 fd36 	bl	8106ea0 <RCCEx_PLL3_Config>
 8105434:	4603      	mov	r3, r0
 8105436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810543a:	e004      	b.n	8105446 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810543c:	2301      	movs	r3, #1
 810543e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105442:	e000      	b.n	8105446 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8105444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810544a:	2b00      	cmp	r3, #0
 810544c:	d10a      	bne.n	8105464 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810544e:	4ba5      	ldr	r3, [pc, #660]	@ (81056e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105452:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8105456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810545a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810545c:	4aa1      	ldr	r2, [pc, #644]	@ (81056e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810545e:	430b      	orrs	r3, r1
 8105460:	6513      	str	r3, [r2, #80]	@ 0x50
 8105462:	e003      	b.n	810546c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105468:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810546c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105474:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8105478:	f04f 0900 	mov.w	r9, #0
 810547c:	ea58 0309 	orrs.w	r3, r8, r9
 8105480:	d047      	beq.n	8105512 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8105482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105488:	2b04      	cmp	r3, #4
 810548a:	d82a      	bhi.n	81054e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 810548c:	a201      	add	r2, pc, #4	@ (adr r2, 8105494 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810548e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105492:	bf00      	nop
 8105494:	081054a9 	.word	0x081054a9
 8105498:	081054b7 	.word	0x081054b7
 810549c:	081054cd 	.word	0x081054cd
 81054a0:	081054eb 	.word	0x081054eb
 81054a4:	081054eb 	.word	0x081054eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81054a8:	4b8e      	ldr	r3, [pc, #568]	@ (81056e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81054aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81054ac:	4a8d      	ldr	r2, [pc, #564]	@ (81056e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81054ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81054b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81054b4:	e01a      	b.n	81054ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81054b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81054ba:	3308      	adds	r3, #8
 81054bc:	2100      	movs	r1, #0
 81054be:	4618      	mov	r0, r3
 81054c0:	f001 fc3c 	bl	8106d3c <RCCEx_PLL2_Config>
 81054c4:	4603      	mov	r3, r0
 81054c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81054ca:	e00f      	b.n	81054ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81054d0:	3328      	adds	r3, #40	@ 0x28
 81054d2:	2100      	movs	r1, #0
 81054d4:	4618      	mov	r0, r3
 81054d6:	f001 fce3 	bl	8106ea0 <RCCEx_PLL3_Config>
 81054da:	4603      	mov	r3, r0
 81054dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81054e0:	e004      	b.n	81054ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81054e2:	2301      	movs	r3, #1
 81054e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81054e8:	e000      	b.n	81054ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81054ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 81054ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81054f0:	2b00      	cmp	r3, #0
 81054f2:	d10a      	bne.n	810550a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81054f4:	4b7b      	ldr	r3, [pc, #492]	@ (81056e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81054f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81054f8:	f023 0107 	bic.w	r1, r3, #7
 81054fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105502:	4a78      	ldr	r2, [pc, #480]	@ (81056e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105504:	430b      	orrs	r3, r1
 8105506:	6513      	str	r3, [r2, #80]	@ 0x50
 8105508:	e003      	b.n	8105512 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810550a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810550e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105516:	e9d3 2300 	ldrd	r2, r3, [r3]
 810551a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810551e:	f04f 0b00 	mov.w	fp, #0
 8105522:	ea5a 030b 	orrs.w	r3, sl, fp
 8105526:	d04c      	beq.n	81055c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8105528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810552c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810552e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105532:	d030      	beq.n	8105596 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8105534:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105538:	d829      	bhi.n	810558e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810553a:	2bc0      	cmp	r3, #192	@ 0xc0
 810553c:	d02d      	beq.n	810559a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810553e:	2bc0      	cmp	r3, #192	@ 0xc0
 8105540:	d825      	bhi.n	810558e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105542:	2b80      	cmp	r3, #128	@ 0x80
 8105544:	d018      	beq.n	8105578 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8105546:	2b80      	cmp	r3, #128	@ 0x80
 8105548:	d821      	bhi.n	810558e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810554a:	2b00      	cmp	r3, #0
 810554c:	d002      	beq.n	8105554 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810554e:	2b40      	cmp	r3, #64	@ 0x40
 8105550:	d007      	beq.n	8105562 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8105552:	e01c      	b.n	810558e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105554:	4b63      	ldr	r3, [pc, #396]	@ (81056e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105558:	4a62      	ldr	r2, [pc, #392]	@ (81056e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810555a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810555e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105560:	e01c      	b.n	810559c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105566:	3308      	adds	r3, #8
 8105568:	2100      	movs	r1, #0
 810556a:	4618      	mov	r0, r3
 810556c:	f001 fbe6 	bl	8106d3c <RCCEx_PLL2_Config>
 8105570:	4603      	mov	r3, r0
 8105572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105576:	e011      	b.n	810559c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810557c:	3328      	adds	r3, #40	@ 0x28
 810557e:	2100      	movs	r1, #0
 8105580:	4618      	mov	r0, r3
 8105582:	f001 fc8d 	bl	8106ea0 <RCCEx_PLL3_Config>
 8105586:	4603      	mov	r3, r0
 8105588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810558c:	e006      	b.n	810559c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810558e:	2301      	movs	r3, #1
 8105590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105594:	e002      	b.n	810559c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8105596:	bf00      	nop
 8105598:	e000      	b.n	810559c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810559a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810559c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81055a0:	2b00      	cmp	r3, #0
 81055a2:	d10a      	bne.n	81055ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81055a4:	4b4f      	ldr	r3, [pc, #316]	@ (81056e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81055a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81055a8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 81055ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81055b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81055b2:	4a4c      	ldr	r2, [pc, #304]	@ (81056e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81055b4:	430b      	orrs	r3, r1
 81055b6:	6513      	str	r3, [r2, #80]	@ 0x50
 81055b8:	e003      	b.n	81055c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81055ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81055be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81055c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81055c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81055ca:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 81055ce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 81055d2:	2300      	movs	r3, #0
 81055d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 81055d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 81055dc:	460b      	mov	r3, r1
 81055de:	4313      	orrs	r3, r2
 81055e0:	d053      	beq.n	810568a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 81055e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81055e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81055ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81055ee:	d035      	beq.n	810565c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81055f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81055f4:	d82e      	bhi.n	8105654 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81055f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81055fa:	d031      	beq.n	8105660 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81055fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8105600:	d828      	bhi.n	8105654 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105602:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8105606:	d01a      	beq.n	810563e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8105608:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810560c:	d822      	bhi.n	8105654 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810560e:	2b00      	cmp	r3, #0
 8105610:	d003      	beq.n	810561a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8105612:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105616:	d007      	beq.n	8105628 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8105618:	e01c      	b.n	8105654 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810561a:	4b32      	ldr	r3, [pc, #200]	@ (81056e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810561c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810561e:	4a31      	ldr	r2, [pc, #196]	@ (81056e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105624:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105626:	e01c      	b.n	8105662 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810562c:	3308      	adds	r3, #8
 810562e:	2100      	movs	r1, #0
 8105630:	4618      	mov	r0, r3
 8105632:	f001 fb83 	bl	8106d3c <RCCEx_PLL2_Config>
 8105636:	4603      	mov	r3, r0
 8105638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810563c:	e011      	b.n	8105662 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810563e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105642:	3328      	adds	r3, #40	@ 0x28
 8105644:	2100      	movs	r1, #0
 8105646:	4618      	mov	r0, r3
 8105648:	f001 fc2a 	bl	8106ea0 <RCCEx_PLL3_Config>
 810564c:	4603      	mov	r3, r0
 810564e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105652:	e006      	b.n	8105662 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8105654:	2301      	movs	r3, #1
 8105656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810565a:	e002      	b.n	8105662 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810565c:	bf00      	nop
 810565e:	e000      	b.n	8105662 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105666:	2b00      	cmp	r3, #0
 8105668:	d10b      	bne.n	8105682 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810566a:	4b1e      	ldr	r3, [pc, #120]	@ (81056e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810566c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810566e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8105672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105676:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810567a:	4a1a      	ldr	r2, [pc, #104]	@ (81056e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810567c:	430b      	orrs	r3, r1
 810567e:	6593      	str	r3, [r2, #88]	@ 0x58
 8105680:	e003      	b.n	810568a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105686:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810568a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105692:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8105696:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810569a:	2300      	movs	r3, #0
 810569c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 81056a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 81056a4:	460b      	mov	r3, r1
 81056a6:	4313      	orrs	r3, r2
 81056a8:	d056      	beq.n	8105758 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81056aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81056ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81056b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81056b6:	d038      	beq.n	810572a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81056b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81056bc:	d831      	bhi.n	8105722 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81056be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81056c2:	d034      	beq.n	810572e <HAL_RCCEx_PeriphCLKConfig+0x382>
 81056c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81056c8:	d82b      	bhi.n	8105722 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81056ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81056ce:	d01d      	beq.n	810570c <HAL_RCCEx_PeriphCLKConfig+0x360>
 81056d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81056d4:	d825      	bhi.n	8105722 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81056d6:	2b00      	cmp	r3, #0
 81056d8:	d006      	beq.n	81056e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81056da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81056de:	d00a      	beq.n	81056f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81056e0:	e01f      	b.n	8105722 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81056e2:	bf00      	nop
 81056e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81056e8:	4ba2      	ldr	r3, [pc, #648]	@ (8105974 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81056ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81056ec:	4aa1      	ldr	r2, [pc, #644]	@ (8105974 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81056ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81056f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81056f4:	e01c      	b.n	8105730 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81056f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81056fa:	3308      	adds	r3, #8
 81056fc:	2100      	movs	r1, #0
 81056fe:	4618      	mov	r0, r3
 8105700:	f001 fb1c 	bl	8106d3c <RCCEx_PLL2_Config>
 8105704:	4603      	mov	r3, r0
 8105706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810570a:	e011      	b.n	8105730 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810570c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105710:	3328      	adds	r3, #40	@ 0x28
 8105712:	2100      	movs	r1, #0
 8105714:	4618      	mov	r0, r3
 8105716:	f001 fbc3 	bl	8106ea0 <RCCEx_PLL3_Config>
 810571a:	4603      	mov	r3, r0
 810571c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105720:	e006      	b.n	8105730 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8105722:	2301      	movs	r3, #1
 8105724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105728:	e002      	b.n	8105730 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810572a:	bf00      	nop
 810572c:	e000      	b.n	8105730 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810572e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105730:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105734:	2b00      	cmp	r3, #0
 8105736:	d10b      	bne.n	8105750 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105738:	4b8e      	ldr	r3, [pc, #568]	@ (8105974 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810573a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810573c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8105740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105744:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8105748:	4a8a      	ldr	r2, [pc, #552]	@ (8105974 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810574a:	430b      	orrs	r3, r1
 810574c:	6593      	str	r3, [r2, #88]	@ 0x58
 810574e:	e003      	b.n	8105758 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105750:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105754:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810575c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105760:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8105764:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8105768:	2300      	movs	r3, #0
 810576a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810576e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8105772:	460b      	mov	r3, r1
 8105774:	4313      	orrs	r3, r2
 8105776:	d03a      	beq.n	81057ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8105778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810577c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810577e:	2b30      	cmp	r3, #48	@ 0x30
 8105780:	d01f      	beq.n	81057c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8105782:	2b30      	cmp	r3, #48	@ 0x30
 8105784:	d819      	bhi.n	81057ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8105786:	2b20      	cmp	r3, #32
 8105788:	d00c      	beq.n	81057a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810578a:	2b20      	cmp	r3, #32
 810578c:	d815      	bhi.n	81057ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810578e:	2b00      	cmp	r3, #0
 8105790:	d019      	beq.n	81057c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8105792:	2b10      	cmp	r3, #16
 8105794:	d111      	bne.n	81057ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105796:	4b77      	ldr	r3, [pc, #476]	@ (8105974 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810579a:	4a76      	ldr	r2, [pc, #472]	@ (8105974 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810579c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81057a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81057a2:	e011      	b.n	81057c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81057a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81057a8:	3308      	adds	r3, #8
 81057aa:	2102      	movs	r1, #2
 81057ac:	4618      	mov	r0, r3
 81057ae:	f001 fac5 	bl	8106d3c <RCCEx_PLL2_Config>
 81057b2:	4603      	mov	r3, r0
 81057b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81057b8:	e006      	b.n	81057c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81057ba:	2301      	movs	r3, #1
 81057bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81057c0:	e002      	b.n	81057c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81057c2:	bf00      	nop
 81057c4:	e000      	b.n	81057c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81057c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81057c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81057cc:	2b00      	cmp	r3, #0
 81057ce:	d10a      	bne.n	81057e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81057d0:	4b68      	ldr	r3, [pc, #416]	@ (8105974 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81057d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81057d4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 81057d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81057dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81057de:	4a65      	ldr	r2, [pc, #404]	@ (8105974 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81057e0:	430b      	orrs	r3, r1
 81057e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81057e4:	e003      	b.n	81057ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81057e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81057ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81057ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81057f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81057fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 81057fe:	2300      	movs	r3, #0
 8105800:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8105804:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8105808:	460b      	mov	r3, r1
 810580a:	4313      	orrs	r3, r2
 810580c:	d051      	beq.n	81058b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810580e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105814:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8105818:	d035      	beq.n	8105886 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810581a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810581e:	d82e      	bhi.n	810587e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105820:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8105824:	d031      	beq.n	810588a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8105826:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810582a:	d828      	bhi.n	810587e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810582c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105830:	d01a      	beq.n	8105868 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8105832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105836:	d822      	bhi.n	810587e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105838:	2b00      	cmp	r3, #0
 810583a:	d003      	beq.n	8105844 <HAL_RCCEx_PeriphCLKConfig+0x498>
 810583c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105840:	d007      	beq.n	8105852 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8105842:	e01c      	b.n	810587e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105844:	4b4b      	ldr	r3, [pc, #300]	@ (8105974 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105848:	4a4a      	ldr	r2, [pc, #296]	@ (8105974 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810584a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810584e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105850:	e01c      	b.n	810588c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105856:	3308      	adds	r3, #8
 8105858:	2100      	movs	r1, #0
 810585a:	4618      	mov	r0, r3
 810585c:	f001 fa6e 	bl	8106d3c <RCCEx_PLL2_Config>
 8105860:	4603      	mov	r3, r0
 8105862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105866:	e011      	b.n	810588c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810586c:	3328      	adds	r3, #40	@ 0x28
 810586e:	2100      	movs	r1, #0
 8105870:	4618      	mov	r0, r3
 8105872:	f001 fb15 	bl	8106ea0 <RCCEx_PLL3_Config>
 8105876:	4603      	mov	r3, r0
 8105878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810587c:	e006      	b.n	810588c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810587e:	2301      	movs	r3, #1
 8105880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105884:	e002      	b.n	810588c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8105886:	bf00      	nop
 8105888:	e000      	b.n	810588c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810588a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810588c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105890:	2b00      	cmp	r3, #0
 8105892:	d10a      	bne.n	81058aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8105894:	4b37      	ldr	r3, [pc, #220]	@ (8105974 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105898:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 810589c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81058a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81058a2:	4a34      	ldr	r2, [pc, #208]	@ (8105974 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81058a4:	430b      	orrs	r3, r1
 81058a6:	6513      	str	r3, [r2, #80]	@ 0x50
 81058a8:	e003      	b.n	81058b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81058aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81058ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81058b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81058b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81058ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 81058be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 81058c2:	2300      	movs	r3, #0
 81058c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 81058c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 81058cc:	460b      	mov	r3, r1
 81058ce:	4313      	orrs	r3, r2
 81058d0:	d056      	beq.n	8105980 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 81058d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81058d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81058d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81058dc:	d033      	beq.n	8105946 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 81058de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81058e2:	d82c      	bhi.n	810593e <HAL_RCCEx_PeriphCLKConfig+0x592>
 81058e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81058e8:	d02f      	beq.n	810594a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 81058ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81058ee:	d826      	bhi.n	810593e <HAL_RCCEx_PeriphCLKConfig+0x592>
 81058f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81058f4:	d02b      	beq.n	810594e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 81058f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81058fa:	d820      	bhi.n	810593e <HAL_RCCEx_PeriphCLKConfig+0x592>
 81058fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105900:	d012      	beq.n	8105928 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8105902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105906:	d81a      	bhi.n	810593e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105908:	2b00      	cmp	r3, #0
 810590a:	d022      	beq.n	8105952 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810590c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105910:	d115      	bne.n	810593e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105916:	3308      	adds	r3, #8
 8105918:	2101      	movs	r1, #1
 810591a:	4618      	mov	r0, r3
 810591c:	f001 fa0e 	bl	8106d3c <RCCEx_PLL2_Config>
 8105920:	4603      	mov	r3, r0
 8105922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8105926:	e015      	b.n	8105954 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810592c:	3328      	adds	r3, #40	@ 0x28
 810592e:	2101      	movs	r1, #1
 8105930:	4618      	mov	r0, r3
 8105932:	f001 fab5 	bl	8106ea0 <RCCEx_PLL3_Config>
 8105936:	4603      	mov	r3, r0
 8105938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810593c:	e00a      	b.n	8105954 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810593e:	2301      	movs	r3, #1
 8105940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105944:	e006      	b.n	8105954 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105946:	bf00      	nop
 8105948:	e004      	b.n	8105954 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810594a:	bf00      	nop
 810594c:	e002      	b.n	8105954 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810594e:	bf00      	nop
 8105950:	e000      	b.n	8105954 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105958:	2b00      	cmp	r3, #0
 810595a:	d10d      	bne.n	8105978 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810595c:	4b05      	ldr	r3, [pc, #20]	@ (8105974 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810595e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105960:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8105964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105968:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810596a:	4a02      	ldr	r2, [pc, #8]	@ (8105974 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810596c:	430b      	orrs	r3, r1
 810596e:	6513      	str	r3, [r2, #80]	@ 0x50
 8105970:	e006      	b.n	8105980 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8105972:	bf00      	nop
 8105974:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105978:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810597c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105988:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 810598c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8105990:	2300      	movs	r3, #0
 8105992:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8105996:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810599a:	460b      	mov	r3, r1
 810599c:	4313      	orrs	r3, r2
 810599e:	d055      	beq.n	8105a4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81059a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81059a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81059a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81059ac:	d033      	beq.n	8105a16 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81059ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81059b2:	d82c      	bhi.n	8105a0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81059b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81059b8:	d02f      	beq.n	8105a1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81059ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81059be:	d826      	bhi.n	8105a0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81059c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81059c4:	d02b      	beq.n	8105a1e <HAL_RCCEx_PeriphCLKConfig+0x672>
 81059c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81059ca:	d820      	bhi.n	8105a0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81059cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81059d0:	d012      	beq.n	81059f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 81059d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81059d6:	d81a      	bhi.n	8105a0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81059d8:	2b00      	cmp	r3, #0
 81059da:	d022      	beq.n	8105a22 <HAL_RCCEx_PeriphCLKConfig+0x676>
 81059dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81059e0:	d115      	bne.n	8105a0e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81059e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81059e6:	3308      	adds	r3, #8
 81059e8:	2101      	movs	r1, #1
 81059ea:	4618      	mov	r0, r3
 81059ec:	f001 f9a6 	bl	8106d3c <RCCEx_PLL2_Config>
 81059f0:	4603      	mov	r3, r0
 81059f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81059f6:	e015      	b.n	8105a24 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81059f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81059fc:	3328      	adds	r3, #40	@ 0x28
 81059fe:	2101      	movs	r1, #1
 8105a00:	4618      	mov	r0, r3
 8105a02:	f001 fa4d 	bl	8106ea0 <RCCEx_PLL3_Config>
 8105a06:	4603      	mov	r3, r0
 8105a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8105a0c:	e00a      	b.n	8105a24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8105a0e:	2301      	movs	r3, #1
 8105a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105a14:	e006      	b.n	8105a24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8105a16:	bf00      	nop
 8105a18:	e004      	b.n	8105a24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8105a1a:	bf00      	nop
 8105a1c:	e002      	b.n	8105a24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8105a1e:	bf00      	nop
 8105a20:	e000      	b.n	8105a24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8105a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105a28:	2b00      	cmp	r3, #0
 8105a2a:	d10b      	bne.n	8105a44 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8105a2c:	4ba4      	ldr	r3, [pc, #656]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105a30:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8105a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8105a3c:	4aa0      	ldr	r2, [pc, #640]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105a3e:	430b      	orrs	r3, r1
 8105a40:	6593      	str	r3, [r2, #88]	@ 0x58
 8105a42:	e003      	b.n	8105a4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105a48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a54:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8105a58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8105a5c:	2300      	movs	r3, #0
 8105a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8105a62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8105a66:	460b      	mov	r3, r1
 8105a68:	4313      	orrs	r3, r2
 8105a6a:	d037      	beq.n	8105adc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8105a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105a72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105a76:	d00e      	beq.n	8105a96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8105a78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105a7c:	d816      	bhi.n	8105aac <HAL_RCCEx_PeriphCLKConfig+0x700>
 8105a7e:	2b00      	cmp	r3, #0
 8105a80:	d018      	beq.n	8105ab4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8105a82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105a86:	d111      	bne.n	8105aac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105a88:	4b8d      	ldr	r3, [pc, #564]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105a8c:	4a8c      	ldr	r2, [pc, #560]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8105a94:	e00f      	b.n	8105ab6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a9a:	3308      	adds	r3, #8
 8105a9c:	2101      	movs	r1, #1
 8105a9e:	4618      	mov	r0, r3
 8105aa0:	f001 f94c 	bl	8106d3c <RCCEx_PLL2_Config>
 8105aa4:	4603      	mov	r3, r0
 8105aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8105aaa:	e004      	b.n	8105ab6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105aac:	2301      	movs	r3, #1
 8105aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105ab2:	e000      	b.n	8105ab6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8105ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105aba:	2b00      	cmp	r3, #0
 8105abc:	d10a      	bne.n	8105ad4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8105abe:	4b80      	ldr	r3, [pc, #512]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105ac2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8105ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105acc:	4a7c      	ldr	r2, [pc, #496]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105ace:	430b      	orrs	r3, r1
 8105ad0:	6513      	str	r3, [r2, #80]	@ 0x50
 8105ad2:	e003      	b.n	8105adc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105ad8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8105adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ae4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8105ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8105aec:	2300      	movs	r3, #0
 8105aee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8105af2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8105af6:	460b      	mov	r3, r1
 8105af8:	4313      	orrs	r3, r2
 8105afa:	d039      	beq.n	8105b70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8105afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105b02:	2b03      	cmp	r3, #3
 8105b04:	d81c      	bhi.n	8105b40 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8105b06:	a201      	add	r2, pc, #4	@ (adr r2, 8105b0c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8105b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105b0c:	08105b49 	.word	0x08105b49
 8105b10:	08105b1d 	.word	0x08105b1d
 8105b14:	08105b2b 	.word	0x08105b2b
 8105b18:	08105b49 	.word	0x08105b49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b1c:	4b68      	ldr	r3, [pc, #416]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105b20:	4a67      	ldr	r2, [pc, #412]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105b26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8105b28:	e00f      	b.n	8105b4a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b2e:	3308      	adds	r3, #8
 8105b30:	2102      	movs	r1, #2
 8105b32:	4618      	mov	r0, r3
 8105b34:	f001 f902 	bl	8106d3c <RCCEx_PLL2_Config>
 8105b38:	4603      	mov	r3, r0
 8105b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8105b3e:	e004      	b.n	8105b4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8105b40:	2301      	movs	r3, #1
 8105b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105b46:	e000      	b.n	8105b4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8105b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105b4e:	2b00      	cmp	r3, #0
 8105b50:	d10a      	bne.n	8105b68 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8105b52:	4b5b      	ldr	r3, [pc, #364]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105b56:	f023 0103 	bic.w	r1, r3, #3
 8105b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105b60:	4a57      	ldr	r2, [pc, #348]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105b62:	430b      	orrs	r3, r1
 8105b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8105b66:	e003      	b.n	8105b70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105b6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b78:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8105b7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8105b80:	2300      	movs	r3, #0
 8105b82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8105b86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8105b8a:	460b      	mov	r3, r1
 8105b8c:	4313      	orrs	r3, r2
 8105b8e:	f000 809f 	beq.w	8105cd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8105b92:	4b4c      	ldr	r3, [pc, #304]	@ (8105cc4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8105b94:	681b      	ldr	r3, [r3, #0]
 8105b96:	4a4b      	ldr	r2, [pc, #300]	@ (8105cc4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8105b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8105b9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8105b9e:	f7fe f89f 	bl	8103ce0 <HAL_GetTick>
 8105ba2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105ba6:	e00b      	b.n	8105bc0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105ba8:	f7fe f89a 	bl	8103ce0 <HAL_GetTick>
 8105bac:	4602      	mov	r2, r0
 8105bae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8105bb2:	1ad3      	subs	r3, r2, r3
 8105bb4:	2b64      	cmp	r3, #100	@ 0x64
 8105bb6:	d903      	bls.n	8105bc0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8105bb8:	2303      	movs	r3, #3
 8105bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105bbe:	e005      	b.n	8105bcc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105bc0:	4b40      	ldr	r3, [pc, #256]	@ (8105cc4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8105bc2:	681b      	ldr	r3, [r3, #0]
 8105bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105bc8:	2b00      	cmp	r3, #0
 8105bca:	d0ed      	beq.n	8105ba8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8105bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105bd0:	2b00      	cmp	r3, #0
 8105bd2:	d179      	bne.n	8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8105bd4:	4b3a      	ldr	r3, [pc, #232]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105bd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8105bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105bdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105be0:	4053      	eors	r3, r2
 8105be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8105be6:	2b00      	cmp	r3, #0
 8105be8:	d015      	beq.n	8105c16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8105bea:	4b35      	ldr	r3, [pc, #212]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8105bf2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8105bf6:	4b32      	ldr	r3, [pc, #200]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105bfa:	4a31      	ldr	r2, [pc, #196]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8105c00:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105c02:	4b2f      	ldr	r3, [pc, #188]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105c06:	4a2e      	ldr	r2, [pc, #184]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105c08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8105c0c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8105c0e:	4a2c      	ldr	r2, [pc, #176]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105c10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105c14:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8105c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105c1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105c22:	d118      	bne.n	8105c56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105c24:	f7fe f85c 	bl	8103ce0 <HAL_GetTick>
 8105c28:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105c2c:	e00d      	b.n	8105c4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105c2e:	f7fe f857 	bl	8103ce0 <HAL_GetTick>
 8105c32:	4602      	mov	r2, r0
 8105c34:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8105c38:	1ad2      	subs	r2, r2, r3
 8105c3a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8105c3e:	429a      	cmp	r2, r3
 8105c40:	d903      	bls.n	8105c4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8105c42:	2303      	movs	r3, #3
 8105c44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8105c48:	e005      	b.n	8105c56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105c4e:	f003 0302 	and.w	r3, r3, #2
 8105c52:	2b00      	cmp	r3, #0
 8105c54:	d0eb      	beq.n	8105c2e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8105c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105c5a:	2b00      	cmp	r3, #0
 8105c5c:	d12b      	bne.n	8105cb6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105c66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8105c6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8105c6e:	d110      	bne.n	8105c92 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8105c70:	4b13      	ldr	r3, [pc, #76]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105c72:	691b      	ldr	r3, [r3, #16]
 8105c74:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8105c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105c80:	091b      	lsrs	r3, r3, #4
 8105c82:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8105c86:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8105c8a:	4a0d      	ldr	r2, [pc, #52]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105c8c:	430b      	orrs	r3, r1
 8105c8e:	6113      	str	r3, [r2, #16]
 8105c90:	e005      	b.n	8105c9e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8105c92:	4b0b      	ldr	r3, [pc, #44]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105c94:	691b      	ldr	r3, [r3, #16]
 8105c96:	4a0a      	ldr	r2, [pc, #40]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105c98:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8105c9c:	6113      	str	r3, [r2, #16]
 8105c9e:	4b08      	ldr	r3, [pc, #32]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105ca0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8105ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ca6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8105cae:	4a04      	ldr	r2, [pc, #16]	@ (8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105cb0:	430b      	orrs	r3, r1
 8105cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8105cb4:	e00c      	b.n	8105cd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8105cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8105cbe:	e007      	b.n	8105cd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8105cc0:	58024400 	.word	0x58024400
 8105cc4:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105ccc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105cd8:	f002 0301 	and.w	r3, r2, #1
 8105cdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8105ce0:	2300      	movs	r3, #0
 8105ce2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8105ce6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8105cea:	460b      	mov	r3, r1
 8105cec:	4313      	orrs	r3, r2
 8105cee:	f000 8089 	beq.w	8105e04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8105cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105cf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8105cf8:	2b28      	cmp	r3, #40	@ 0x28
 8105cfa:	d86b      	bhi.n	8105dd4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8105cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8105d04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8105cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105d02:	bf00      	nop
 8105d04:	08105ddd 	.word	0x08105ddd
 8105d08:	08105dd5 	.word	0x08105dd5
 8105d0c:	08105dd5 	.word	0x08105dd5
 8105d10:	08105dd5 	.word	0x08105dd5
 8105d14:	08105dd5 	.word	0x08105dd5
 8105d18:	08105dd5 	.word	0x08105dd5
 8105d1c:	08105dd5 	.word	0x08105dd5
 8105d20:	08105dd5 	.word	0x08105dd5
 8105d24:	08105da9 	.word	0x08105da9
 8105d28:	08105dd5 	.word	0x08105dd5
 8105d2c:	08105dd5 	.word	0x08105dd5
 8105d30:	08105dd5 	.word	0x08105dd5
 8105d34:	08105dd5 	.word	0x08105dd5
 8105d38:	08105dd5 	.word	0x08105dd5
 8105d3c:	08105dd5 	.word	0x08105dd5
 8105d40:	08105dd5 	.word	0x08105dd5
 8105d44:	08105dbf 	.word	0x08105dbf
 8105d48:	08105dd5 	.word	0x08105dd5
 8105d4c:	08105dd5 	.word	0x08105dd5
 8105d50:	08105dd5 	.word	0x08105dd5
 8105d54:	08105dd5 	.word	0x08105dd5
 8105d58:	08105dd5 	.word	0x08105dd5
 8105d5c:	08105dd5 	.word	0x08105dd5
 8105d60:	08105dd5 	.word	0x08105dd5
 8105d64:	08105ddd 	.word	0x08105ddd
 8105d68:	08105dd5 	.word	0x08105dd5
 8105d6c:	08105dd5 	.word	0x08105dd5
 8105d70:	08105dd5 	.word	0x08105dd5
 8105d74:	08105dd5 	.word	0x08105dd5
 8105d78:	08105dd5 	.word	0x08105dd5
 8105d7c:	08105dd5 	.word	0x08105dd5
 8105d80:	08105dd5 	.word	0x08105dd5
 8105d84:	08105ddd 	.word	0x08105ddd
 8105d88:	08105dd5 	.word	0x08105dd5
 8105d8c:	08105dd5 	.word	0x08105dd5
 8105d90:	08105dd5 	.word	0x08105dd5
 8105d94:	08105dd5 	.word	0x08105dd5
 8105d98:	08105dd5 	.word	0x08105dd5
 8105d9c:	08105dd5 	.word	0x08105dd5
 8105da0:	08105dd5 	.word	0x08105dd5
 8105da4:	08105ddd 	.word	0x08105ddd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105dac:	3308      	adds	r3, #8
 8105dae:	2101      	movs	r1, #1
 8105db0:	4618      	mov	r0, r3
 8105db2:	f000 ffc3 	bl	8106d3c <RCCEx_PLL2_Config>
 8105db6:	4603      	mov	r3, r0
 8105db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8105dbc:	e00f      	b.n	8105dde <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105dc2:	3328      	adds	r3, #40	@ 0x28
 8105dc4:	2101      	movs	r1, #1
 8105dc6:	4618      	mov	r0, r3
 8105dc8:	f001 f86a 	bl	8106ea0 <RCCEx_PLL3_Config>
 8105dcc:	4603      	mov	r3, r0
 8105dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8105dd2:	e004      	b.n	8105dde <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105dd4:	2301      	movs	r3, #1
 8105dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105dda:	e000      	b.n	8105dde <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8105ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105de2:	2b00      	cmp	r3, #0
 8105de4:	d10a      	bne.n	8105dfc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8105de6:	4bbf      	ldr	r3, [pc, #764]	@ (81060e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105dea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8105dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105df2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8105df4:	4abb      	ldr	r2, [pc, #748]	@ (81060e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105df6:	430b      	orrs	r3, r1
 8105df8:	6553      	str	r3, [r2, #84]	@ 0x54
 8105dfa:	e003      	b.n	8105e04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105e00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e0c:	f002 0302 	and.w	r3, r2, #2
 8105e10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8105e14:	2300      	movs	r3, #0
 8105e16:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8105e1a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8105e1e:	460b      	mov	r3, r1
 8105e20:	4313      	orrs	r3, r2
 8105e22:	d041      	beq.n	8105ea8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8105e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8105e2a:	2b05      	cmp	r3, #5
 8105e2c:	d824      	bhi.n	8105e78 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8105e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8105e34 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8105e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e34:	08105e81 	.word	0x08105e81
 8105e38:	08105e4d 	.word	0x08105e4d
 8105e3c:	08105e63 	.word	0x08105e63
 8105e40:	08105e81 	.word	0x08105e81
 8105e44:	08105e81 	.word	0x08105e81
 8105e48:	08105e81 	.word	0x08105e81
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e50:	3308      	adds	r3, #8
 8105e52:	2101      	movs	r1, #1
 8105e54:	4618      	mov	r0, r3
 8105e56:	f000 ff71 	bl	8106d3c <RCCEx_PLL2_Config>
 8105e5a:	4603      	mov	r3, r0
 8105e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8105e60:	e00f      	b.n	8105e82 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e66:	3328      	adds	r3, #40	@ 0x28
 8105e68:	2101      	movs	r1, #1
 8105e6a:	4618      	mov	r0, r3
 8105e6c:	f001 f818 	bl	8106ea0 <RCCEx_PLL3_Config>
 8105e70:	4603      	mov	r3, r0
 8105e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8105e76:	e004      	b.n	8105e82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105e78:	2301      	movs	r3, #1
 8105e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105e7e:	e000      	b.n	8105e82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8105e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105e86:	2b00      	cmp	r3, #0
 8105e88:	d10a      	bne.n	8105ea0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8105e8a:	4b96      	ldr	r3, [pc, #600]	@ (81060e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105e8e:	f023 0107 	bic.w	r1, r3, #7
 8105e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8105e98:	4a92      	ldr	r2, [pc, #584]	@ (81060e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105e9a:	430b      	orrs	r3, r1
 8105e9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8105e9e:	e003      	b.n	8105ea8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105ea4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8105ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105eb0:	f002 0304 	and.w	r3, r2, #4
 8105eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8105eb8:	2300      	movs	r3, #0
 8105eba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8105ebe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8105ec2:	460b      	mov	r3, r1
 8105ec4:	4313      	orrs	r3, r2
 8105ec6:	d044      	beq.n	8105f52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8105ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8105ed0:	2b05      	cmp	r3, #5
 8105ed2:	d825      	bhi.n	8105f20 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8105ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8105edc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8105ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105eda:	bf00      	nop
 8105edc:	08105f29 	.word	0x08105f29
 8105ee0:	08105ef5 	.word	0x08105ef5
 8105ee4:	08105f0b 	.word	0x08105f0b
 8105ee8:	08105f29 	.word	0x08105f29
 8105eec:	08105f29 	.word	0x08105f29
 8105ef0:	08105f29 	.word	0x08105f29
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ef8:	3308      	adds	r3, #8
 8105efa:	2101      	movs	r1, #1
 8105efc:	4618      	mov	r0, r3
 8105efe:	f000 ff1d 	bl	8106d3c <RCCEx_PLL2_Config>
 8105f02:	4603      	mov	r3, r0
 8105f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8105f08:	e00f      	b.n	8105f2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f0e:	3328      	adds	r3, #40	@ 0x28
 8105f10:	2101      	movs	r1, #1
 8105f12:	4618      	mov	r0, r3
 8105f14:	f000 ffc4 	bl	8106ea0 <RCCEx_PLL3_Config>
 8105f18:	4603      	mov	r3, r0
 8105f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8105f1e:	e004      	b.n	8105f2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105f20:	2301      	movs	r3, #1
 8105f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105f26:	e000      	b.n	8105f2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8105f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105f2e:	2b00      	cmp	r3, #0
 8105f30:	d10b      	bne.n	8105f4a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8105f32:	4b6c      	ldr	r3, [pc, #432]	@ (81060e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105f36:	f023 0107 	bic.w	r1, r3, #7
 8105f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8105f42:	4a68      	ldr	r2, [pc, #416]	@ (81060e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105f44:	430b      	orrs	r3, r1
 8105f46:	6593      	str	r3, [r2, #88]	@ 0x58
 8105f48:	e003      	b.n	8105f52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105f4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f5a:	f002 0320 	and.w	r3, r2, #32
 8105f5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8105f62:	2300      	movs	r3, #0
 8105f64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8105f68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8105f6c:	460b      	mov	r3, r1
 8105f6e:	4313      	orrs	r3, r2
 8105f70:	d055      	beq.n	810601e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8105f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8105f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105f7e:	d033      	beq.n	8105fe8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8105f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105f84:	d82c      	bhi.n	8105fe0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105f8a:	d02f      	beq.n	8105fec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8105f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105f90:	d826      	bhi.n	8105fe0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105f92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105f96:	d02b      	beq.n	8105ff0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8105f98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105f9c:	d820      	bhi.n	8105fe0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105f9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105fa2:	d012      	beq.n	8105fca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8105fa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105fa8:	d81a      	bhi.n	8105fe0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105faa:	2b00      	cmp	r3, #0
 8105fac:	d022      	beq.n	8105ff4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8105fae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105fb2:	d115      	bne.n	8105fe0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105fb8:	3308      	adds	r3, #8
 8105fba:	2100      	movs	r1, #0
 8105fbc:	4618      	mov	r0, r3
 8105fbe:	f000 febd 	bl	8106d3c <RCCEx_PLL2_Config>
 8105fc2:	4603      	mov	r3, r0
 8105fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8105fc8:	e015      	b.n	8105ff6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105fce:	3328      	adds	r3, #40	@ 0x28
 8105fd0:	2102      	movs	r1, #2
 8105fd2:	4618      	mov	r0, r3
 8105fd4:	f000 ff64 	bl	8106ea0 <RCCEx_PLL3_Config>
 8105fd8:	4603      	mov	r3, r0
 8105fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8105fde:	e00a      	b.n	8105ff6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105fe0:	2301      	movs	r3, #1
 8105fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105fe6:	e006      	b.n	8105ff6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105fe8:	bf00      	nop
 8105fea:	e004      	b.n	8105ff6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105fec:	bf00      	nop
 8105fee:	e002      	b.n	8105ff6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105ff0:	bf00      	nop
 8105ff2:	e000      	b.n	8105ff6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105ffa:	2b00      	cmp	r3, #0
 8105ffc:	d10b      	bne.n	8106016 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8105ffe:	4b39      	ldr	r3, [pc, #228]	@ (81060e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106002:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8106006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810600a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810600e:	4a35      	ldr	r2, [pc, #212]	@ (81060e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106010:	430b      	orrs	r3, r1
 8106012:	6553      	str	r3, [r2, #84]	@ 0x54
 8106014:	e003      	b.n	810601e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810601a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810601e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106026:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810602a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 810602e:	2300      	movs	r3, #0
 8106030:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8106034:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8106038:	460b      	mov	r3, r1
 810603a:	4313      	orrs	r3, r2
 810603c:	d058      	beq.n	81060f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810603e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106042:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8106046:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810604a:	d033      	beq.n	81060b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 810604c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8106050:	d82c      	bhi.n	81060ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106056:	d02f      	beq.n	81060b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8106058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810605c:	d826      	bhi.n	81060ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810605e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8106062:	d02b      	beq.n	81060bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8106064:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8106068:	d820      	bhi.n	81060ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810606a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810606e:	d012      	beq.n	8106096 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8106070:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106074:	d81a      	bhi.n	81060ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106076:	2b00      	cmp	r3, #0
 8106078:	d022      	beq.n	81060c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 810607a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810607e:	d115      	bne.n	81060ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106084:	3308      	adds	r3, #8
 8106086:	2100      	movs	r1, #0
 8106088:	4618      	mov	r0, r3
 810608a:	f000 fe57 	bl	8106d3c <RCCEx_PLL2_Config>
 810608e:	4603      	mov	r3, r0
 8106090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106094:	e015      	b.n	81060c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810609a:	3328      	adds	r3, #40	@ 0x28
 810609c:	2102      	movs	r1, #2
 810609e:	4618      	mov	r0, r3
 81060a0:	f000 fefe 	bl	8106ea0 <RCCEx_PLL3_Config>
 81060a4:	4603      	mov	r3, r0
 81060a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81060aa:	e00a      	b.n	81060c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81060ac:	2301      	movs	r3, #1
 81060ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81060b2:	e006      	b.n	81060c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81060b4:	bf00      	nop
 81060b6:	e004      	b.n	81060c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81060b8:	bf00      	nop
 81060ba:	e002      	b.n	81060c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81060bc:	bf00      	nop
 81060be:	e000      	b.n	81060c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81060c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81060c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81060c6:	2b00      	cmp	r3, #0
 81060c8:	d10e      	bne.n	81060e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81060ca:	4b06      	ldr	r3, [pc, #24]	@ (81060e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81060cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81060ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 81060d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81060d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81060da:	4a02      	ldr	r2, [pc, #8]	@ (81060e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81060dc:	430b      	orrs	r3, r1
 81060de:	6593      	str	r3, [r2, #88]	@ 0x58
 81060e0:	e006      	b.n	81060f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81060e2:	bf00      	nop
 81060e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81060e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81060ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81060f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81060f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 81060fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8106100:	2300      	movs	r3, #0
 8106102:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8106106:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810610a:	460b      	mov	r3, r1
 810610c:	4313      	orrs	r3, r2
 810610e:	d055      	beq.n	81061bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8106110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106114:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8106118:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810611c:	d033      	beq.n	8106186 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 810611e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8106122:	d82c      	bhi.n	810617e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106124:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106128:	d02f      	beq.n	810618a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810612a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810612e:	d826      	bhi.n	810617e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106130:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8106134:	d02b      	beq.n	810618e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8106136:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810613a:	d820      	bhi.n	810617e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810613c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106140:	d012      	beq.n	8106168 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8106142:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106146:	d81a      	bhi.n	810617e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106148:	2b00      	cmp	r3, #0
 810614a:	d022      	beq.n	8106192 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 810614c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106150:	d115      	bne.n	810617e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106156:	3308      	adds	r3, #8
 8106158:	2100      	movs	r1, #0
 810615a:	4618      	mov	r0, r3
 810615c:	f000 fdee 	bl	8106d3c <RCCEx_PLL2_Config>
 8106160:	4603      	mov	r3, r0
 8106162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8106166:	e015      	b.n	8106194 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810616c:	3328      	adds	r3, #40	@ 0x28
 810616e:	2102      	movs	r1, #2
 8106170:	4618      	mov	r0, r3
 8106172:	f000 fe95 	bl	8106ea0 <RCCEx_PLL3_Config>
 8106176:	4603      	mov	r3, r0
 8106178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810617c:	e00a      	b.n	8106194 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810617e:	2301      	movs	r3, #1
 8106180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106184:	e006      	b.n	8106194 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106186:	bf00      	nop
 8106188:	e004      	b.n	8106194 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810618a:	bf00      	nop
 810618c:	e002      	b.n	8106194 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810618e:	bf00      	nop
 8106190:	e000      	b.n	8106194 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106198:	2b00      	cmp	r3, #0
 810619a:	d10b      	bne.n	81061b4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810619c:	4ba1      	ldr	r3, [pc, #644]	@ (8106424 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810619e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81061a0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 81061a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81061a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81061ac:	4a9d      	ldr	r2, [pc, #628]	@ (8106424 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81061ae:	430b      	orrs	r3, r1
 81061b0:	6593      	str	r3, [r2, #88]	@ 0x58
 81061b2:	e003      	b.n	81061bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81061b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81061b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81061bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81061c4:	f002 0308 	and.w	r3, r2, #8
 81061c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 81061cc:	2300      	movs	r3, #0
 81061ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81061d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 81061d6:	460b      	mov	r3, r1
 81061d8:	4313      	orrs	r3, r2
 81061da:	d01e      	beq.n	810621a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81061dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81061e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81061e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81061e8:	d10c      	bne.n	8106204 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81061ee:	3328      	adds	r3, #40	@ 0x28
 81061f0:	2102      	movs	r1, #2
 81061f2:	4618      	mov	r0, r3
 81061f4:	f000 fe54 	bl	8106ea0 <RCCEx_PLL3_Config>
 81061f8:	4603      	mov	r3, r0
 81061fa:	2b00      	cmp	r3, #0
 81061fc:	d002      	beq.n	8106204 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81061fe:	2301      	movs	r3, #1
 8106200:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8106204:	4b87      	ldr	r3, [pc, #540]	@ (8106424 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106208:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810620c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8106214:	4a83      	ldr	r2, [pc, #524]	@ (8106424 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106216:	430b      	orrs	r3, r1
 8106218:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810621a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106222:	f002 0310 	and.w	r3, r2, #16
 8106226:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810622a:	2300      	movs	r3, #0
 810622c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8106230:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8106234:	460b      	mov	r3, r1
 8106236:	4313      	orrs	r3, r2
 8106238:	d01e      	beq.n	8106278 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810623a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810623e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8106242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106246:	d10c      	bne.n	8106262 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810624c:	3328      	adds	r3, #40	@ 0x28
 810624e:	2102      	movs	r1, #2
 8106250:	4618      	mov	r0, r3
 8106252:	f000 fe25 	bl	8106ea0 <RCCEx_PLL3_Config>
 8106256:	4603      	mov	r3, r0
 8106258:	2b00      	cmp	r3, #0
 810625a:	d002      	beq.n	8106262 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 810625c:	2301      	movs	r3, #1
 810625e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8106262:	4b70      	ldr	r3, [pc, #448]	@ (8106424 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106266:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810626e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8106272:	4a6c      	ldr	r2, [pc, #432]	@ (8106424 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106274:	430b      	orrs	r3, r1
 8106276:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8106278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106280:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8106284:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8106288:	2300      	movs	r3, #0
 810628a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810628e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8106292:	460b      	mov	r3, r1
 8106294:	4313      	orrs	r3, r2
 8106296:	d03e      	beq.n	8106316 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8106298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810629c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81062a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81062a4:	d022      	beq.n	81062ec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 81062a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81062aa:	d81b      	bhi.n	81062e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 81062ac:	2b00      	cmp	r3, #0
 81062ae:	d003      	beq.n	81062b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 81062b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81062b4:	d00b      	beq.n	81062ce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 81062b6:	e015      	b.n	81062e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81062b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81062bc:	3308      	adds	r3, #8
 81062be:	2100      	movs	r1, #0
 81062c0:	4618      	mov	r0, r3
 81062c2:	f000 fd3b 	bl	8106d3c <RCCEx_PLL2_Config>
 81062c6:	4603      	mov	r3, r0
 81062c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81062cc:	e00f      	b.n	81062ee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81062ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81062d2:	3328      	adds	r3, #40	@ 0x28
 81062d4:	2102      	movs	r1, #2
 81062d6:	4618      	mov	r0, r3
 81062d8:	f000 fde2 	bl	8106ea0 <RCCEx_PLL3_Config>
 81062dc:	4603      	mov	r3, r0
 81062de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81062e2:	e004      	b.n	81062ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81062e4:	2301      	movs	r3, #1
 81062e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81062ea:	e000      	b.n	81062ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 81062ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 81062ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81062f2:	2b00      	cmp	r3, #0
 81062f4:	d10b      	bne.n	810630e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81062f6:	4b4b      	ldr	r3, [pc, #300]	@ (8106424 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81062f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81062fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81062fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106302:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8106306:	4a47      	ldr	r2, [pc, #284]	@ (8106424 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106308:	430b      	orrs	r3, r1
 810630a:	6593      	str	r3, [r2, #88]	@ 0x58
 810630c:	e003      	b.n	8106316 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810630e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106312:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8106316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810631e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8106322:	67bb      	str	r3, [r7, #120]	@ 0x78
 8106324:	2300      	movs	r3, #0
 8106326:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8106328:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 810632c:	460b      	mov	r3, r1
 810632e:	4313      	orrs	r3, r2
 8106330:	d03b      	beq.n	81063aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8106332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810633a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810633e:	d01f      	beq.n	8106380 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8106340:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106344:	d818      	bhi.n	8106378 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8106346:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810634a:	d003      	beq.n	8106354 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 810634c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106350:	d007      	beq.n	8106362 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8106352:	e011      	b.n	8106378 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106354:	4b33      	ldr	r3, [pc, #204]	@ (8106424 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106358:	4a32      	ldr	r2, [pc, #200]	@ (8106424 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810635a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810635e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8106360:	e00f      	b.n	8106382 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106366:	3328      	adds	r3, #40	@ 0x28
 8106368:	2101      	movs	r1, #1
 810636a:	4618      	mov	r0, r3
 810636c:	f000 fd98 	bl	8106ea0 <RCCEx_PLL3_Config>
 8106370:	4603      	mov	r3, r0
 8106372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8106376:	e004      	b.n	8106382 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106378:	2301      	movs	r3, #1
 810637a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810637e:	e000      	b.n	8106382 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8106380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106386:	2b00      	cmp	r3, #0
 8106388:	d10b      	bne.n	81063a2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810638a:	4b26      	ldr	r3, [pc, #152]	@ (8106424 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810638c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810638e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8106392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810639a:	4a22      	ldr	r2, [pc, #136]	@ (8106424 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810639c:	430b      	orrs	r3, r1
 810639e:	6553      	str	r3, [r2, #84]	@ 0x54
 81063a0:	e003      	b.n	81063aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81063a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81063a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81063aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81063b2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 81063b6:	673b      	str	r3, [r7, #112]	@ 0x70
 81063b8:	2300      	movs	r3, #0
 81063ba:	677b      	str	r3, [r7, #116]	@ 0x74
 81063bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 81063c0:	460b      	mov	r3, r1
 81063c2:	4313      	orrs	r3, r2
 81063c4:	d034      	beq.n	8106430 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81063c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81063ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81063cc:	2b00      	cmp	r3, #0
 81063ce:	d003      	beq.n	81063d8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 81063d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81063d4:	d007      	beq.n	81063e6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 81063d6:	e011      	b.n	81063fc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81063d8:	4b12      	ldr	r3, [pc, #72]	@ (8106424 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81063da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81063dc:	4a11      	ldr	r2, [pc, #68]	@ (8106424 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81063de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81063e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81063e4:	e00e      	b.n	8106404 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81063e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81063ea:	3308      	adds	r3, #8
 81063ec:	2102      	movs	r1, #2
 81063ee:	4618      	mov	r0, r3
 81063f0:	f000 fca4 	bl	8106d3c <RCCEx_PLL2_Config>
 81063f4:	4603      	mov	r3, r0
 81063f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81063fa:	e003      	b.n	8106404 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 81063fc:	2301      	movs	r3, #1
 81063fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106408:	2b00      	cmp	r3, #0
 810640a:	d10d      	bne.n	8106428 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810640c:	4b05      	ldr	r3, [pc, #20]	@ (8106424 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810640e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106410:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8106414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810641a:	4a02      	ldr	r2, [pc, #8]	@ (8106424 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810641c:	430b      	orrs	r3, r1
 810641e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106420:	e006      	b.n	8106430 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8106422:	bf00      	nop
 8106424:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810642c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8106430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106438:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 810643c:	66bb      	str	r3, [r7, #104]	@ 0x68
 810643e:	2300      	movs	r3, #0
 8106440:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8106442:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8106446:	460b      	mov	r3, r1
 8106448:	4313      	orrs	r3, r2
 810644a:	d00c      	beq.n	8106466 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810644c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106450:	3328      	adds	r3, #40	@ 0x28
 8106452:	2102      	movs	r1, #2
 8106454:	4618      	mov	r0, r3
 8106456:	f000 fd23 	bl	8106ea0 <RCCEx_PLL3_Config>
 810645a:	4603      	mov	r3, r0
 810645c:	2b00      	cmp	r3, #0
 810645e:	d002      	beq.n	8106466 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8106460:	2301      	movs	r3, #1
 8106462:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8106466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810646e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8106472:	663b      	str	r3, [r7, #96]	@ 0x60
 8106474:	2300      	movs	r3, #0
 8106476:	667b      	str	r3, [r7, #100]	@ 0x64
 8106478:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 810647c:	460b      	mov	r3, r1
 810647e:	4313      	orrs	r3, r2
 8106480:	d038      	beq.n	81064f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8106482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810648a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810648e:	d018      	beq.n	81064c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8106490:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106494:	d811      	bhi.n	81064ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8106496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810649a:	d014      	beq.n	81064c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 810649c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81064a0:	d80b      	bhi.n	81064ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81064a2:	2b00      	cmp	r3, #0
 81064a4:	d011      	beq.n	81064ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 81064a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81064aa:	d106      	bne.n	81064ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81064ac:	4bc3      	ldr	r3, [pc, #780]	@ (81067bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81064ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81064b0:	4ac2      	ldr	r2, [pc, #776]	@ (81067bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81064b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81064b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81064b8:	e008      	b.n	81064cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81064ba:	2301      	movs	r3, #1
 81064bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81064c0:	e004      	b.n	81064cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81064c2:	bf00      	nop
 81064c4:	e002      	b.n	81064cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81064c6:	bf00      	nop
 81064c8:	e000      	b.n	81064cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81064ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81064cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81064d0:	2b00      	cmp	r3, #0
 81064d2:	d10b      	bne.n	81064ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81064d4:	4bb9      	ldr	r3, [pc, #740]	@ (81067bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81064d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81064d8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81064dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81064e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81064e4:	4ab5      	ldr	r2, [pc, #724]	@ (81067bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81064e6:	430b      	orrs	r3, r1
 81064e8:	6553      	str	r3, [r2, #84]	@ 0x54
 81064ea:	e003      	b.n	81064f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81064ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81064f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81064f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81064fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8106500:	65bb      	str	r3, [r7, #88]	@ 0x58
 8106502:	2300      	movs	r3, #0
 8106504:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8106506:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810650a:	460b      	mov	r3, r1
 810650c:	4313      	orrs	r3, r2
 810650e:	d009      	beq.n	8106524 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8106510:	4baa      	ldr	r3, [pc, #680]	@ (81067bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106514:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8106518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810651c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810651e:	4aa7      	ldr	r2, [pc, #668]	@ (81067bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106520:	430b      	orrs	r3, r1
 8106522:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8106524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106528:	e9d3 2300 	ldrd	r2, r3, [r3]
 810652c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8106530:	653b      	str	r3, [r7, #80]	@ 0x50
 8106532:	2300      	movs	r3, #0
 8106534:	657b      	str	r3, [r7, #84]	@ 0x54
 8106536:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810653a:	460b      	mov	r3, r1
 810653c:	4313      	orrs	r3, r2
 810653e:	d00a      	beq.n	8106556 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8106540:	4b9e      	ldr	r3, [pc, #632]	@ (81067bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106542:	691b      	ldr	r3, [r3, #16]
 8106544:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8106548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810654c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106550:	4a9a      	ldr	r2, [pc, #616]	@ (81067bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106552:	430b      	orrs	r3, r1
 8106554:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8106556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810655e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8106562:	64bb      	str	r3, [r7, #72]	@ 0x48
 8106564:	2300      	movs	r3, #0
 8106566:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8106568:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 810656c:	460b      	mov	r3, r1
 810656e:	4313      	orrs	r3, r2
 8106570:	d009      	beq.n	8106586 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8106572:	4b92      	ldr	r3, [pc, #584]	@ (81067bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106576:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810657a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810657e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106580:	4a8e      	ldr	r2, [pc, #568]	@ (81067bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106582:	430b      	orrs	r3, r1
 8106584:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8106586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810658e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8106592:	643b      	str	r3, [r7, #64]	@ 0x40
 8106594:	2300      	movs	r3, #0
 8106596:	647b      	str	r3, [r7, #68]	@ 0x44
 8106598:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 810659c:	460b      	mov	r3, r1
 810659e:	4313      	orrs	r3, r2
 81065a0:	d00e      	beq.n	81065c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81065a2:	4b86      	ldr	r3, [pc, #536]	@ (81067bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81065a4:	691b      	ldr	r3, [r3, #16]
 81065a6:	4a85      	ldr	r2, [pc, #532]	@ (81067bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81065a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 81065ac:	6113      	str	r3, [r2, #16]
 81065ae:	4b83      	ldr	r3, [pc, #524]	@ (81067bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81065b0:	6919      	ldr	r1, [r3, #16]
 81065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81065b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81065ba:	4a80      	ldr	r2, [pc, #512]	@ (81067bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81065bc:	430b      	orrs	r3, r1
 81065be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81065c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81065c8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 81065cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 81065ce:	2300      	movs	r3, #0
 81065d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81065d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 81065d6:	460b      	mov	r3, r1
 81065d8:	4313      	orrs	r3, r2
 81065da:	d009      	beq.n	81065f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81065dc:	4b77      	ldr	r3, [pc, #476]	@ (81067bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81065de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81065e0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81065e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81065e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81065ea:	4a74      	ldr	r2, [pc, #464]	@ (81067bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81065ec:	430b      	orrs	r3, r1
 81065ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81065f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81065f8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81065fc:	633b      	str	r3, [r7, #48]	@ 0x30
 81065fe:	2300      	movs	r3, #0
 8106600:	637b      	str	r3, [r7, #52]	@ 0x34
 8106602:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8106606:	460b      	mov	r3, r1
 8106608:	4313      	orrs	r3, r2
 810660a:	d00a      	beq.n	8106622 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810660c:	4b6b      	ldr	r3, [pc, #428]	@ (81067bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810660e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106610:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8106614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810661c:	4a67      	ldr	r2, [pc, #412]	@ (81067bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810661e:	430b      	orrs	r3, r1
 8106620:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8106622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106626:	e9d3 2300 	ldrd	r2, r3, [r3]
 810662a:	2100      	movs	r1, #0
 810662c:	62b9      	str	r1, [r7, #40]	@ 0x28
 810662e:	f003 0301 	and.w	r3, r3, #1
 8106632:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8106634:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8106638:	460b      	mov	r3, r1
 810663a:	4313      	orrs	r3, r2
 810663c:	d011      	beq.n	8106662 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810663e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106642:	3308      	adds	r3, #8
 8106644:	2100      	movs	r1, #0
 8106646:	4618      	mov	r0, r3
 8106648:	f000 fb78 	bl	8106d3c <RCCEx_PLL2_Config>
 810664c:	4603      	mov	r3, r0
 810664e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8106652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106656:	2b00      	cmp	r3, #0
 8106658:	d003      	beq.n	8106662 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810665a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810665e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8106662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106666:	e9d3 2300 	ldrd	r2, r3, [r3]
 810666a:	2100      	movs	r1, #0
 810666c:	6239      	str	r1, [r7, #32]
 810666e:	f003 0302 	and.w	r3, r3, #2
 8106672:	627b      	str	r3, [r7, #36]	@ 0x24
 8106674:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8106678:	460b      	mov	r3, r1
 810667a:	4313      	orrs	r3, r2
 810667c:	d011      	beq.n	81066a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810667e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106682:	3308      	adds	r3, #8
 8106684:	2101      	movs	r1, #1
 8106686:	4618      	mov	r0, r3
 8106688:	f000 fb58 	bl	8106d3c <RCCEx_PLL2_Config>
 810668c:	4603      	mov	r3, r0
 810668e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8106692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106696:	2b00      	cmp	r3, #0
 8106698:	d003      	beq.n	81066a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810669a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810669e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81066a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066aa:	2100      	movs	r1, #0
 81066ac:	61b9      	str	r1, [r7, #24]
 81066ae:	f003 0304 	and.w	r3, r3, #4
 81066b2:	61fb      	str	r3, [r7, #28]
 81066b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81066b8:	460b      	mov	r3, r1
 81066ba:	4313      	orrs	r3, r2
 81066bc:	d011      	beq.n	81066e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81066be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066c2:	3308      	adds	r3, #8
 81066c4:	2102      	movs	r1, #2
 81066c6:	4618      	mov	r0, r3
 81066c8:	f000 fb38 	bl	8106d3c <RCCEx_PLL2_Config>
 81066cc:	4603      	mov	r3, r0
 81066ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81066d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81066d6:	2b00      	cmp	r3, #0
 81066d8:	d003      	beq.n	81066e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81066de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81066e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066ea:	2100      	movs	r1, #0
 81066ec:	6139      	str	r1, [r7, #16]
 81066ee:	f003 0308 	and.w	r3, r3, #8
 81066f2:	617b      	str	r3, [r7, #20]
 81066f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81066f8:	460b      	mov	r3, r1
 81066fa:	4313      	orrs	r3, r2
 81066fc:	d011      	beq.n	8106722 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81066fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106702:	3328      	adds	r3, #40	@ 0x28
 8106704:	2100      	movs	r1, #0
 8106706:	4618      	mov	r0, r3
 8106708:	f000 fbca 	bl	8106ea0 <RCCEx_PLL3_Config>
 810670c:	4603      	mov	r3, r0
 810670e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8106712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106716:	2b00      	cmp	r3, #0
 8106718:	d003      	beq.n	8106722 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810671a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810671e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8106722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106726:	e9d3 2300 	ldrd	r2, r3, [r3]
 810672a:	2100      	movs	r1, #0
 810672c:	60b9      	str	r1, [r7, #8]
 810672e:	f003 0310 	and.w	r3, r3, #16
 8106732:	60fb      	str	r3, [r7, #12]
 8106734:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8106738:	460b      	mov	r3, r1
 810673a:	4313      	orrs	r3, r2
 810673c:	d011      	beq.n	8106762 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106742:	3328      	adds	r3, #40	@ 0x28
 8106744:	2101      	movs	r1, #1
 8106746:	4618      	mov	r0, r3
 8106748:	f000 fbaa 	bl	8106ea0 <RCCEx_PLL3_Config>
 810674c:	4603      	mov	r3, r0
 810674e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8106752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106756:	2b00      	cmp	r3, #0
 8106758:	d003      	beq.n	8106762 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810675a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810675e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8106762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106766:	e9d3 2300 	ldrd	r2, r3, [r3]
 810676a:	2100      	movs	r1, #0
 810676c:	6039      	str	r1, [r7, #0]
 810676e:	f003 0320 	and.w	r3, r3, #32
 8106772:	607b      	str	r3, [r7, #4]
 8106774:	e9d7 1200 	ldrd	r1, r2, [r7]
 8106778:	460b      	mov	r3, r1
 810677a:	4313      	orrs	r3, r2
 810677c:	d011      	beq.n	81067a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106782:	3328      	adds	r3, #40	@ 0x28
 8106784:	2102      	movs	r1, #2
 8106786:	4618      	mov	r0, r3
 8106788:	f000 fb8a 	bl	8106ea0 <RCCEx_PLL3_Config>
 810678c:	4603      	mov	r3, r0
 810678e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8106792:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106796:	2b00      	cmp	r3, #0
 8106798:	d003      	beq.n	81067a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810679a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810679e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 81067a2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 81067a6:	2b00      	cmp	r3, #0
 81067a8:	d101      	bne.n	81067ae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 81067aa:	2300      	movs	r3, #0
 81067ac:	e000      	b.n	81067b0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 81067ae:	2301      	movs	r3, #1
}
 81067b0:	4618      	mov	r0, r3
 81067b2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 81067b6:	46bd      	mov	sp, r7
 81067b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81067bc:	58024400 	.word	0x58024400

081067c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81067c0:	b580      	push	{r7, lr}
 81067c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81067c4:	f7fe fd94 	bl	81052f0 <HAL_RCC_GetHCLKFreq>
 81067c8:	4602      	mov	r2, r0
 81067ca:	4b06      	ldr	r3, [pc, #24]	@ (81067e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81067cc:	6a1b      	ldr	r3, [r3, #32]
 81067ce:	091b      	lsrs	r3, r3, #4
 81067d0:	f003 0307 	and.w	r3, r3, #7
 81067d4:	4904      	ldr	r1, [pc, #16]	@ (81067e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81067d6:	5ccb      	ldrb	r3, [r1, r3]
 81067d8:	f003 031f 	and.w	r3, r3, #31
 81067dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81067e0:	4618      	mov	r0, r3
 81067e2:	bd80      	pop	{r7, pc}
 81067e4:	58024400 	.word	0x58024400
 81067e8:	0810ea38 	.word	0x0810ea38

081067ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81067ec:	b480      	push	{r7}
 81067ee:	b089      	sub	sp, #36	@ 0x24
 81067f0:	af00      	add	r7, sp, #0
 81067f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81067f4:	4ba1      	ldr	r3, [pc, #644]	@ (8106a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81067f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81067f8:	f003 0303 	and.w	r3, r3, #3
 81067fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81067fe:	4b9f      	ldr	r3, [pc, #636]	@ (8106a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106802:	0b1b      	lsrs	r3, r3, #12
 8106804:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106808:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810680a:	4b9c      	ldr	r3, [pc, #624]	@ (8106a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810680c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810680e:	091b      	lsrs	r3, r3, #4
 8106810:	f003 0301 	and.w	r3, r3, #1
 8106814:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8106816:	4b99      	ldr	r3, [pc, #612]	@ (8106a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810681a:	08db      	lsrs	r3, r3, #3
 810681c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106820:	693a      	ldr	r2, [r7, #16]
 8106822:	fb02 f303 	mul.w	r3, r2, r3
 8106826:	ee07 3a90 	vmov	s15, r3
 810682a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810682e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8106832:	697b      	ldr	r3, [r7, #20]
 8106834:	2b00      	cmp	r3, #0
 8106836:	f000 8111 	beq.w	8106a5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810683a:	69bb      	ldr	r3, [r7, #24]
 810683c:	2b02      	cmp	r3, #2
 810683e:	f000 8083 	beq.w	8106948 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8106842:	69bb      	ldr	r3, [r7, #24]
 8106844:	2b02      	cmp	r3, #2
 8106846:	f200 80a1 	bhi.w	810698c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810684a:	69bb      	ldr	r3, [r7, #24]
 810684c:	2b00      	cmp	r3, #0
 810684e:	d003      	beq.n	8106858 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8106850:	69bb      	ldr	r3, [r7, #24]
 8106852:	2b01      	cmp	r3, #1
 8106854:	d056      	beq.n	8106904 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8106856:	e099      	b.n	810698c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106858:	4b88      	ldr	r3, [pc, #544]	@ (8106a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810685a:	681b      	ldr	r3, [r3, #0]
 810685c:	f003 0320 	and.w	r3, r3, #32
 8106860:	2b00      	cmp	r3, #0
 8106862:	d02d      	beq.n	81068c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106864:	4b85      	ldr	r3, [pc, #532]	@ (8106a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106866:	681b      	ldr	r3, [r3, #0]
 8106868:	08db      	lsrs	r3, r3, #3
 810686a:	f003 0303 	and.w	r3, r3, #3
 810686e:	4a84      	ldr	r2, [pc, #528]	@ (8106a80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8106870:	fa22 f303 	lsr.w	r3, r2, r3
 8106874:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106876:	68bb      	ldr	r3, [r7, #8]
 8106878:	ee07 3a90 	vmov	s15, r3
 810687c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106880:	697b      	ldr	r3, [r7, #20]
 8106882:	ee07 3a90 	vmov	s15, r3
 8106886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810688a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810688e:	4b7b      	ldr	r3, [pc, #492]	@ (8106a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106896:	ee07 3a90 	vmov	s15, r3
 810689a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810689e:	ed97 6a03 	vldr	s12, [r7, #12]
 81068a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8106a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81068a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81068aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81068ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81068b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81068b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81068ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81068be:	e087      	b.n	81069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81068c0:	697b      	ldr	r3, [r7, #20]
 81068c2:	ee07 3a90 	vmov	s15, r3
 81068c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81068ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8106a88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81068ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81068d2:	4b6a      	ldr	r3, [pc, #424]	@ (8106a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81068d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81068d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81068da:	ee07 3a90 	vmov	s15, r3
 81068de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81068e2:	ed97 6a03 	vldr	s12, [r7, #12]
 81068e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8106a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81068ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81068ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81068f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81068f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81068fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81068fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106902:	e065      	b.n	81069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106904:	697b      	ldr	r3, [r7, #20]
 8106906:	ee07 3a90 	vmov	s15, r3
 810690a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810690e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8106a8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8106912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106916:	4b59      	ldr	r3, [pc, #356]	@ (8106a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810691a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810691e:	ee07 3a90 	vmov	s15, r3
 8106922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106926:	ed97 6a03 	vldr	s12, [r7, #12]
 810692a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8106a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810692e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810693a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810693e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106946:	e043      	b.n	81069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106948:	697b      	ldr	r3, [r7, #20]
 810694a:	ee07 3a90 	vmov	s15, r3
 810694e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106952:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8106a90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8106956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810695a:	4b48      	ldr	r3, [pc, #288]	@ (8106a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810695c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810695e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106962:	ee07 3a90 	vmov	s15, r3
 8106966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810696a:	ed97 6a03 	vldr	s12, [r7, #12]
 810696e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8106a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810697a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810697e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810698a:	e021      	b.n	81069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810698c:	697b      	ldr	r3, [r7, #20]
 810698e:	ee07 3a90 	vmov	s15, r3
 8106992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106996:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8106a8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810699a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810699e:	4b37      	ldr	r3, [pc, #220]	@ (8106a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81069a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81069a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81069a6:	ee07 3a90 	vmov	s15, r3
 81069aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81069ae:	ed97 6a03 	vldr	s12, [r7, #12]
 81069b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8106a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81069b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81069ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81069be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81069c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81069c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81069ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81069ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 81069d0:	4b2a      	ldr	r3, [pc, #168]	@ (8106a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81069d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81069d4:	0a5b      	lsrs	r3, r3, #9
 81069d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81069da:	ee07 3a90 	vmov	s15, r3
 81069de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81069e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81069e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81069ea:	edd7 6a07 	vldr	s13, [r7, #28]
 81069ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81069f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81069f6:	ee17 2a90 	vmov	r2, s15
 81069fa:	687b      	ldr	r3, [r7, #4]
 81069fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81069fe:	4b1f      	ldr	r3, [pc, #124]	@ (8106a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106a02:	0c1b      	lsrs	r3, r3, #16
 8106a04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106a08:	ee07 3a90 	vmov	s15, r3
 8106a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106a14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106a18:	edd7 6a07 	vldr	s13, [r7, #28]
 8106a1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106a24:	ee17 2a90 	vmov	r2, s15
 8106a28:	687b      	ldr	r3, [r7, #4]
 8106a2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8106a2c:	4b13      	ldr	r3, [pc, #76]	@ (8106a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106a30:	0e1b      	lsrs	r3, r3, #24
 8106a32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106a36:	ee07 3a90 	vmov	s15, r3
 8106a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106a42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106a46:	edd7 6a07 	vldr	s13, [r7, #28]
 8106a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106a52:	ee17 2a90 	vmov	r2, s15
 8106a56:	687b      	ldr	r3, [r7, #4]
 8106a58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8106a5a:	e008      	b.n	8106a6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8106a5c:	687b      	ldr	r3, [r7, #4]
 8106a5e:	2200      	movs	r2, #0
 8106a60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8106a62:	687b      	ldr	r3, [r7, #4]
 8106a64:	2200      	movs	r2, #0
 8106a66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8106a68:	687b      	ldr	r3, [r7, #4]
 8106a6a:	2200      	movs	r2, #0
 8106a6c:	609a      	str	r2, [r3, #8]
}
 8106a6e:	bf00      	nop
 8106a70:	3724      	adds	r7, #36	@ 0x24
 8106a72:	46bd      	mov	sp, r7
 8106a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a78:	4770      	bx	lr
 8106a7a:	bf00      	nop
 8106a7c:	58024400 	.word	0x58024400
 8106a80:	03d09000 	.word	0x03d09000
 8106a84:	46000000 	.word	0x46000000
 8106a88:	4c742400 	.word	0x4c742400
 8106a8c:	4a742400 	.word	0x4a742400
 8106a90:	4bbebc20 	.word	0x4bbebc20

08106a94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8106a94:	b480      	push	{r7}
 8106a96:	b089      	sub	sp, #36	@ 0x24
 8106a98:	af00      	add	r7, sp, #0
 8106a9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106a9c:	4ba1      	ldr	r3, [pc, #644]	@ (8106d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106aa0:	f003 0303 	and.w	r3, r3, #3
 8106aa4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8106aa6:	4b9f      	ldr	r3, [pc, #636]	@ (8106d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106aaa:	0d1b      	lsrs	r3, r3, #20
 8106aac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106ab0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8106ab2:	4b9c      	ldr	r3, [pc, #624]	@ (8106d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106ab6:	0a1b      	lsrs	r3, r3, #8
 8106ab8:	f003 0301 	and.w	r3, r3, #1
 8106abc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8106abe:	4b99      	ldr	r3, [pc, #612]	@ (8106d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106ac2:	08db      	lsrs	r3, r3, #3
 8106ac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106ac8:	693a      	ldr	r2, [r7, #16]
 8106aca:	fb02 f303 	mul.w	r3, r2, r3
 8106ace:	ee07 3a90 	vmov	s15, r3
 8106ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ad6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8106ada:	697b      	ldr	r3, [r7, #20]
 8106adc:	2b00      	cmp	r3, #0
 8106ade:	f000 8111 	beq.w	8106d04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8106ae2:	69bb      	ldr	r3, [r7, #24]
 8106ae4:	2b02      	cmp	r3, #2
 8106ae6:	f000 8083 	beq.w	8106bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8106aea:	69bb      	ldr	r3, [r7, #24]
 8106aec:	2b02      	cmp	r3, #2
 8106aee:	f200 80a1 	bhi.w	8106c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8106af2:	69bb      	ldr	r3, [r7, #24]
 8106af4:	2b00      	cmp	r3, #0
 8106af6:	d003      	beq.n	8106b00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8106af8:	69bb      	ldr	r3, [r7, #24]
 8106afa:	2b01      	cmp	r3, #1
 8106afc:	d056      	beq.n	8106bac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8106afe:	e099      	b.n	8106c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106b00:	4b88      	ldr	r3, [pc, #544]	@ (8106d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106b02:	681b      	ldr	r3, [r3, #0]
 8106b04:	f003 0320 	and.w	r3, r3, #32
 8106b08:	2b00      	cmp	r3, #0
 8106b0a:	d02d      	beq.n	8106b68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106b0c:	4b85      	ldr	r3, [pc, #532]	@ (8106d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106b0e:	681b      	ldr	r3, [r3, #0]
 8106b10:	08db      	lsrs	r3, r3, #3
 8106b12:	f003 0303 	and.w	r3, r3, #3
 8106b16:	4a84      	ldr	r2, [pc, #528]	@ (8106d28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8106b18:	fa22 f303 	lsr.w	r3, r2, r3
 8106b1c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106b1e:	68bb      	ldr	r3, [r7, #8]
 8106b20:	ee07 3a90 	vmov	s15, r3
 8106b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b28:	697b      	ldr	r3, [r7, #20]
 8106b2a:	ee07 3a90 	vmov	s15, r3
 8106b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b36:	4b7b      	ldr	r3, [pc, #492]	@ (8106d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b3e:	ee07 3a90 	vmov	s15, r3
 8106b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8106d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8106b66:	e087      	b.n	8106c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106b68:	697b      	ldr	r3, [r7, #20]
 8106b6a:	ee07 3a90 	vmov	s15, r3
 8106b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8106d30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8106b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b7a:	4b6a      	ldr	r3, [pc, #424]	@ (8106d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b82:	ee07 3a90 	vmov	s15, r3
 8106b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8106d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106baa:	e065      	b.n	8106c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106bac:	697b      	ldr	r3, [r7, #20]
 8106bae:	ee07 3a90 	vmov	s15, r3
 8106bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106bb6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8106d34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106bbe:	4b59      	ldr	r3, [pc, #356]	@ (8106d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106bc6:	ee07 3a90 	vmov	s15, r3
 8106bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8106bd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8106d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106bee:	e043      	b.n	8106c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106bf0:	697b      	ldr	r3, [r7, #20]
 8106bf2:	ee07 3a90 	vmov	s15, r3
 8106bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106bfa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8106d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8106bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106c02:	4b48      	ldr	r3, [pc, #288]	@ (8106d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106c0a:	ee07 3a90 	vmov	s15, r3
 8106c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8106c16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8106d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106c32:	e021      	b.n	8106c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106c34:	697b      	ldr	r3, [r7, #20]
 8106c36:	ee07 3a90 	vmov	s15, r3
 8106c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8106d34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106c46:	4b37      	ldr	r3, [pc, #220]	@ (8106d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106c4e:	ee07 3a90 	vmov	s15, r3
 8106c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8106c5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8106d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106c76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8106c78:	4b2a      	ldr	r3, [pc, #168]	@ (8106d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106c7c:	0a5b      	lsrs	r3, r3, #9
 8106c7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106c82:	ee07 3a90 	vmov	s15, r3
 8106c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106c92:	edd7 6a07 	vldr	s13, [r7, #28]
 8106c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106c9e:	ee17 2a90 	vmov	r2, s15
 8106ca2:	687b      	ldr	r3, [r7, #4]
 8106ca4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8106ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8106d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106caa:	0c1b      	lsrs	r3, r3, #16
 8106cac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106cb0:	ee07 3a90 	vmov	s15, r3
 8106cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106cb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106cbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106cc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8106cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106ccc:	ee17 2a90 	vmov	r2, s15
 8106cd0:	687b      	ldr	r3, [r7, #4]
 8106cd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8106cd4:	4b13      	ldr	r3, [pc, #76]	@ (8106d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106cd8:	0e1b      	lsrs	r3, r3, #24
 8106cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106cde:	ee07 3a90 	vmov	s15, r3
 8106ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ce6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106cea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106cee:	edd7 6a07 	vldr	s13, [r7, #28]
 8106cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106cfa:	ee17 2a90 	vmov	r2, s15
 8106cfe:	687b      	ldr	r3, [r7, #4]
 8106d00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8106d02:	e008      	b.n	8106d16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8106d04:	687b      	ldr	r3, [r7, #4]
 8106d06:	2200      	movs	r2, #0
 8106d08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106d0a:	687b      	ldr	r3, [r7, #4]
 8106d0c:	2200      	movs	r2, #0
 8106d0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106d10:	687b      	ldr	r3, [r7, #4]
 8106d12:	2200      	movs	r2, #0
 8106d14:	609a      	str	r2, [r3, #8]
}
 8106d16:	bf00      	nop
 8106d18:	3724      	adds	r7, #36	@ 0x24
 8106d1a:	46bd      	mov	sp, r7
 8106d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d20:	4770      	bx	lr
 8106d22:	bf00      	nop
 8106d24:	58024400 	.word	0x58024400
 8106d28:	03d09000 	.word	0x03d09000
 8106d2c:	46000000 	.word	0x46000000
 8106d30:	4c742400 	.word	0x4c742400
 8106d34:	4a742400 	.word	0x4a742400
 8106d38:	4bbebc20 	.word	0x4bbebc20

08106d3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8106d3c:	b580      	push	{r7, lr}
 8106d3e:	b084      	sub	sp, #16
 8106d40:	af00      	add	r7, sp, #0
 8106d42:	6078      	str	r0, [r7, #4]
 8106d44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106d46:	2300      	movs	r3, #0
 8106d48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106d4a:	4b54      	ldr	r3, [pc, #336]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106d4e:	f003 0303 	and.w	r3, r3, #3
 8106d52:	2b03      	cmp	r3, #3
 8106d54:	d101      	bne.n	8106d5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8106d56:	2301      	movs	r3, #1
 8106d58:	e09b      	b.n	8106e92 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8106d5a:	4b50      	ldr	r3, [pc, #320]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106d5c:	681b      	ldr	r3, [r3, #0]
 8106d5e:	4a4f      	ldr	r2, [pc, #316]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106d60:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8106d64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106d66:	f7fc ffbb 	bl	8103ce0 <HAL_GetTick>
 8106d6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106d6c:	e008      	b.n	8106d80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8106d6e:	f7fc ffb7 	bl	8103ce0 <HAL_GetTick>
 8106d72:	4602      	mov	r2, r0
 8106d74:	68bb      	ldr	r3, [r7, #8]
 8106d76:	1ad3      	subs	r3, r2, r3
 8106d78:	2b02      	cmp	r3, #2
 8106d7a:	d901      	bls.n	8106d80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106d7c:	2303      	movs	r3, #3
 8106d7e:	e088      	b.n	8106e92 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106d80:	4b46      	ldr	r3, [pc, #280]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106d82:	681b      	ldr	r3, [r3, #0]
 8106d84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106d88:	2b00      	cmp	r3, #0
 8106d8a:	d1f0      	bne.n	8106d6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8106d8c:	4b43      	ldr	r3, [pc, #268]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106d90:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8106d94:	687b      	ldr	r3, [r7, #4]
 8106d96:	681b      	ldr	r3, [r3, #0]
 8106d98:	031b      	lsls	r3, r3, #12
 8106d9a:	4940      	ldr	r1, [pc, #256]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106d9c:	4313      	orrs	r3, r2
 8106d9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8106da0:	687b      	ldr	r3, [r7, #4]
 8106da2:	685b      	ldr	r3, [r3, #4]
 8106da4:	3b01      	subs	r3, #1
 8106da6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106daa:	687b      	ldr	r3, [r7, #4]
 8106dac:	689b      	ldr	r3, [r3, #8]
 8106dae:	3b01      	subs	r3, #1
 8106db0:	025b      	lsls	r3, r3, #9
 8106db2:	b29b      	uxth	r3, r3
 8106db4:	431a      	orrs	r2, r3
 8106db6:	687b      	ldr	r3, [r7, #4]
 8106db8:	68db      	ldr	r3, [r3, #12]
 8106dba:	3b01      	subs	r3, #1
 8106dbc:	041b      	lsls	r3, r3, #16
 8106dbe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8106dc2:	431a      	orrs	r2, r3
 8106dc4:	687b      	ldr	r3, [r7, #4]
 8106dc6:	691b      	ldr	r3, [r3, #16]
 8106dc8:	3b01      	subs	r3, #1
 8106dca:	061b      	lsls	r3, r3, #24
 8106dcc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8106dd0:	4932      	ldr	r1, [pc, #200]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106dd2:	4313      	orrs	r3, r2
 8106dd4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8106dd6:	4b31      	ldr	r3, [pc, #196]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106dda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8106dde:	687b      	ldr	r3, [r7, #4]
 8106de0:	695b      	ldr	r3, [r3, #20]
 8106de2:	492e      	ldr	r1, [pc, #184]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106de4:	4313      	orrs	r3, r2
 8106de6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8106de8:	4b2c      	ldr	r3, [pc, #176]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106dec:	f023 0220 	bic.w	r2, r3, #32
 8106df0:	687b      	ldr	r3, [r7, #4]
 8106df2:	699b      	ldr	r3, [r3, #24]
 8106df4:	4929      	ldr	r1, [pc, #164]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106df6:	4313      	orrs	r3, r2
 8106df8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8106dfa:	4b28      	ldr	r3, [pc, #160]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106dfe:	4a27      	ldr	r2, [pc, #156]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106e00:	f023 0310 	bic.w	r3, r3, #16
 8106e04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8106e06:	4b25      	ldr	r3, [pc, #148]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106e0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8106e0e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8106e12:	687a      	ldr	r2, [r7, #4]
 8106e14:	69d2      	ldr	r2, [r2, #28]
 8106e16:	00d2      	lsls	r2, r2, #3
 8106e18:	4920      	ldr	r1, [pc, #128]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106e1a:	4313      	orrs	r3, r2
 8106e1c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8106e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106e22:	4a1e      	ldr	r2, [pc, #120]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106e24:	f043 0310 	orr.w	r3, r3, #16
 8106e28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8106e2a:	683b      	ldr	r3, [r7, #0]
 8106e2c:	2b00      	cmp	r3, #0
 8106e2e:	d106      	bne.n	8106e3e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8106e30:	4b1a      	ldr	r3, [pc, #104]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106e34:	4a19      	ldr	r2, [pc, #100]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106e36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8106e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106e3c:	e00f      	b.n	8106e5e <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8106e3e:	683b      	ldr	r3, [r7, #0]
 8106e40:	2b01      	cmp	r3, #1
 8106e42:	d106      	bne.n	8106e52 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8106e44:	4b15      	ldr	r3, [pc, #84]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106e48:	4a14      	ldr	r2, [pc, #80]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106e4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8106e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106e50:	e005      	b.n	8106e5e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8106e52:	4b12      	ldr	r3, [pc, #72]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106e56:	4a11      	ldr	r2, [pc, #68]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106e58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8106e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8106e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106e60:	681b      	ldr	r3, [r3, #0]
 8106e62:	4a0e      	ldr	r2, [pc, #56]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106e64:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8106e68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106e6a:	f7fc ff39 	bl	8103ce0 <HAL_GetTick>
 8106e6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106e70:	e008      	b.n	8106e84 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8106e72:	f7fc ff35 	bl	8103ce0 <HAL_GetTick>
 8106e76:	4602      	mov	r2, r0
 8106e78:	68bb      	ldr	r3, [r7, #8]
 8106e7a:	1ad3      	subs	r3, r2, r3
 8106e7c:	2b02      	cmp	r3, #2
 8106e7e:	d901      	bls.n	8106e84 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106e80:	2303      	movs	r3, #3
 8106e82:	e006      	b.n	8106e92 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106e84:	4b05      	ldr	r3, [pc, #20]	@ (8106e9c <RCCEx_PLL2_Config+0x160>)
 8106e86:	681b      	ldr	r3, [r3, #0]
 8106e88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106e8c:	2b00      	cmp	r3, #0
 8106e8e:	d0f0      	beq.n	8106e72 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8106e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8106e92:	4618      	mov	r0, r3
 8106e94:	3710      	adds	r7, #16
 8106e96:	46bd      	mov	sp, r7
 8106e98:	bd80      	pop	{r7, pc}
 8106e9a:	bf00      	nop
 8106e9c:	58024400 	.word	0x58024400

08106ea0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8106ea0:	b580      	push	{r7, lr}
 8106ea2:	b084      	sub	sp, #16
 8106ea4:	af00      	add	r7, sp, #0
 8106ea6:	6078      	str	r0, [r7, #4]
 8106ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106eaa:	2300      	movs	r3, #0
 8106eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106eae:	4b54      	ldr	r3, [pc, #336]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106eb2:	f003 0303 	and.w	r3, r3, #3
 8106eb6:	2b03      	cmp	r3, #3
 8106eb8:	d101      	bne.n	8106ebe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8106eba:	2301      	movs	r3, #1
 8106ebc:	e09b      	b.n	8106ff6 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8106ebe:	4b50      	ldr	r3, [pc, #320]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106ec0:	681b      	ldr	r3, [r3, #0]
 8106ec2:	4a4f      	ldr	r2, [pc, #316]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106ec4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8106ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106eca:	f7fc ff09 	bl	8103ce0 <HAL_GetTick>
 8106ece:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106ed0:	e008      	b.n	8106ee4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8106ed2:	f7fc ff05 	bl	8103ce0 <HAL_GetTick>
 8106ed6:	4602      	mov	r2, r0
 8106ed8:	68bb      	ldr	r3, [r7, #8]
 8106eda:	1ad3      	subs	r3, r2, r3
 8106edc:	2b02      	cmp	r3, #2
 8106ede:	d901      	bls.n	8106ee4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106ee0:	2303      	movs	r3, #3
 8106ee2:	e088      	b.n	8106ff6 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106ee4:	4b46      	ldr	r3, [pc, #280]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106ee6:	681b      	ldr	r3, [r3, #0]
 8106ee8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106eec:	2b00      	cmp	r3, #0
 8106eee:	d1f0      	bne.n	8106ed2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8106ef0:	4b43      	ldr	r3, [pc, #268]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106ef4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8106ef8:	687b      	ldr	r3, [r7, #4]
 8106efa:	681b      	ldr	r3, [r3, #0]
 8106efc:	051b      	lsls	r3, r3, #20
 8106efe:	4940      	ldr	r1, [pc, #256]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106f00:	4313      	orrs	r3, r2
 8106f02:	628b      	str	r3, [r1, #40]	@ 0x28
 8106f04:	687b      	ldr	r3, [r7, #4]
 8106f06:	685b      	ldr	r3, [r3, #4]
 8106f08:	3b01      	subs	r3, #1
 8106f0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106f0e:	687b      	ldr	r3, [r7, #4]
 8106f10:	689b      	ldr	r3, [r3, #8]
 8106f12:	3b01      	subs	r3, #1
 8106f14:	025b      	lsls	r3, r3, #9
 8106f16:	b29b      	uxth	r3, r3
 8106f18:	431a      	orrs	r2, r3
 8106f1a:	687b      	ldr	r3, [r7, #4]
 8106f1c:	68db      	ldr	r3, [r3, #12]
 8106f1e:	3b01      	subs	r3, #1
 8106f20:	041b      	lsls	r3, r3, #16
 8106f22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8106f26:	431a      	orrs	r2, r3
 8106f28:	687b      	ldr	r3, [r7, #4]
 8106f2a:	691b      	ldr	r3, [r3, #16]
 8106f2c:	3b01      	subs	r3, #1
 8106f2e:	061b      	lsls	r3, r3, #24
 8106f30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8106f34:	4932      	ldr	r1, [pc, #200]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106f36:	4313      	orrs	r3, r2
 8106f38:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8106f3a:	4b31      	ldr	r3, [pc, #196]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106f3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8106f42:	687b      	ldr	r3, [r7, #4]
 8106f44:	695b      	ldr	r3, [r3, #20]
 8106f46:	492e      	ldr	r1, [pc, #184]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106f48:	4313      	orrs	r3, r2
 8106f4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8106f4c:	4b2c      	ldr	r3, [pc, #176]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106f50:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8106f54:	687b      	ldr	r3, [r7, #4]
 8106f56:	699b      	ldr	r3, [r3, #24]
 8106f58:	4929      	ldr	r1, [pc, #164]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106f5a:	4313      	orrs	r3, r2
 8106f5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8106f5e:	4b28      	ldr	r3, [pc, #160]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106f62:	4a27      	ldr	r2, [pc, #156]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106f64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8106f68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8106f6a:	4b25      	ldr	r3, [pc, #148]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106f6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8106f72:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8106f76:	687a      	ldr	r2, [r7, #4]
 8106f78:	69d2      	ldr	r2, [r2, #28]
 8106f7a:	00d2      	lsls	r2, r2, #3
 8106f7c:	4920      	ldr	r1, [pc, #128]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106f7e:	4313      	orrs	r3, r2
 8106f80:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8106f82:	4b1f      	ldr	r3, [pc, #124]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106f86:	4a1e      	ldr	r2, [pc, #120]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8106f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8106f8e:	683b      	ldr	r3, [r7, #0]
 8106f90:	2b00      	cmp	r3, #0
 8106f92:	d106      	bne.n	8106fa2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8106f94:	4b1a      	ldr	r3, [pc, #104]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106f98:	4a19      	ldr	r2, [pc, #100]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106f9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8106f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106fa0:	e00f      	b.n	8106fc2 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8106fa2:	683b      	ldr	r3, [r7, #0]
 8106fa4:	2b01      	cmp	r3, #1
 8106fa6:	d106      	bne.n	8106fb6 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8106fa8:	4b15      	ldr	r3, [pc, #84]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106fac:	4a14      	ldr	r2, [pc, #80]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106fae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8106fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106fb4:	e005      	b.n	8106fc2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8106fb6:	4b12      	ldr	r3, [pc, #72]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106fba:	4a11      	ldr	r2, [pc, #68]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106fbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8106fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8106fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106fc4:	681b      	ldr	r3, [r3, #0]
 8106fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8106fcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106fce:	f7fc fe87 	bl	8103ce0 <HAL_GetTick>
 8106fd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106fd4:	e008      	b.n	8106fe8 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8106fd6:	f7fc fe83 	bl	8103ce0 <HAL_GetTick>
 8106fda:	4602      	mov	r2, r0
 8106fdc:	68bb      	ldr	r3, [r7, #8]
 8106fde:	1ad3      	subs	r3, r2, r3
 8106fe0:	2b02      	cmp	r3, #2
 8106fe2:	d901      	bls.n	8106fe8 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106fe4:	2303      	movs	r3, #3
 8106fe6:	e006      	b.n	8106ff6 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106fe8:	4b05      	ldr	r3, [pc, #20]	@ (8107000 <RCCEx_PLL3_Config+0x160>)
 8106fea:	681b      	ldr	r3, [r3, #0]
 8106fec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106ff0:	2b00      	cmp	r3, #0
 8106ff2:	d0f0      	beq.n	8106fd6 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8106ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8106ff6:	4618      	mov	r0, r3
 8106ff8:	3710      	adds	r7, #16
 8106ffa:	46bd      	mov	sp, r7
 8106ffc:	bd80      	pop	{r7, pc}
 8106ffe:	bf00      	nop
 8107000:	58024400 	.word	0x58024400

08107004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8107004:	b580      	push	{r7, lr}
 8107006:	b082      	sub	sp, #8
 8107008:	af00      	add	r7, sp, #0
 810700a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810700c:	687b      	ldr	r3, [r7, #4]
 810700e:	2b00      	cmp	r3, #0
 8107010:	d101      	bne.n	8107016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8107012:	2301      	movs	r3, #1
 8107014:	e049      	b.n	81070aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107016:	687b      	ldr	r3, [r7, #4]
 8107018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810701c:	b2db      	uxtb	r3, r3
 810701e:	2b00      	cmp	r3, #0
 8107020:	d106      	bne.n	8107030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107022:	687b      	ldr	r3, [r7, #4]
 8107024:	2200      	movs	r2, #0
 8107026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810702a:	6878      	ldr	r0, [r7, #4]
 810702c:	f7fc fb52 	bl	81036d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107030:	687b      	ldr	r3, [r7, #4]
 8107032:	2202      	movs	r2, #2
 8107034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107038:	687b      	ldr	r3, [r7, #4]
 810703a:	681a      	ldr	r2, [r3, #0]
 810703c:	687b      	ldr	r3, [r7, #4]
 810703e:	3304      	adds	r3, #4
 8107040:	4619      	mov	r1, r3
 8107042:	4610      	mov	r0, r2
 8107044:	f000 fc5c 	bl	8107900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107048:	687b      	ldr	r3, [r7, #4]
 810704a:	2201      	movs	r2, #1
 810704c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107050:	687b      	ldr	r3, [r7, #4]
 8107052:	2201      	movs	r2, #1
 8107054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8107058:	687b      	ldr	r3, [r7, #4]
 810705a:	2201      	movs	r2, #1
 810705c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8107060:	687b      	ldr	r3, [r7, #4]
 8107062:	2201      	movs	r2, #1
 8107064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8107068:	687b      	ldr	r3, [r7, #4]
 810706a:	2201      	movs	r2, #1
 810706c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8107070:	687b      	ldr	r3, [r7, #4]
 8107072:	2201      	movs	r2, #1
 8107074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8107078:	687b      	ldr	r3, [r7, #4]
 810707a:	2201      	movs	r2, #1
 810707c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107080:	687b      	ldr	r3, [r7, #4]
 8107082:	2201      	movs	r2, #1
 8107084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8107088:	687b      	ldr	r3, [r7, #4]
 810708a:	2201      	movs	r2, #1
 810708c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8107090:	687b      	ldr	r3, [r7, #4]
 8107092:	2201      	movs	r2, #1
 8107094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8107098:	687b      	ldr	r3, [r7, #4]
 810709a:	2201      	movs	r2, #1
 810709c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81070a0:	687b      	ldr	r3, [r7, #4]
 81070a2:	2201      	movs	r2, #1
 81070a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 81070a8:	2300      	movs	r3, #0
}
 81070aa:	4618      	mov	r0, r3
 81070ac:	3708      	adds	r7, #8
 81070ae:	46bd      	mov	sp, r7
 81070b0:	bd80      	pop	{r7, pc}
	...

081070b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81070b4:	b480      	push	{r7}
 81070b6:	b085      	sub	sp, #20
 81070b8:	af00      	add	r7, sp, #0
 81070ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81070bc:	687b      	ldr	r3, [r7, #4]
 81070be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81070c2:	b2db      	uxtb	r3, r3
 81070c4:	2b01      	cmp	r3, #1
 81070c6:	d001      	beq.n	81070cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81070c8:	2301      	movs	r3, #1
 81070ca:	e054      	b.n	8107176 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81070cc:	687b      	ldr	r3, [r7, #4]
 81070ce:	2202      	movs	r2, #2
 81070d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81070d4:	687b      	ldr	r3, [r7, #4]
 81070d6:	681b      	ldr	r3, [r3, #0]
 81070d8:	68da      	ldr	r2, [r3, #12]
 81070da:	687b      	ldr	r3, [r7, #4]
 81070dc:	681b      	ldr	r3, [r3, #0]
 81070de:	f042 0201 	orr.w	r2, r2, #1
 81070e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81070e4:	687b      	ldr	r3, [r7, #4]
 81070e6:	681b      	ldr	r3, [r3, #0]
 81070e8:	4a26      	ldr	r2, [pc, #152]	@ (8107184 <HAL_TIM_Base_Start_IT+0xd0>)
 81070ea:	4293      	cmp	r3, r2
 81070ec:	d022      	beq.n	8107134 <HAL_TIM_Base_Start_IT+0x80>
 81070ee:	687b      	ldr	r3, [r7, #4]
 81070f0:	681b      	ldr	r3, [r3, #0]
 81070f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81070f6:	d01d      	beq.n	8107134 <HAL_TIM_Base_Start_IT+0x80>
 81070f8:	687b      	ldr	r3, [r7, #4]
 81070fa:	681b      	ldr	r3, [r3, #0]
 81070fc:	4a22      	ldr	r2, [pc, #136]	@ (8107188 <HAL_TIM_Base_Start_IT+0xd4>)
 81070fe:	4293      	cmp	r3, r2
 8107100:	d018      	beq.n	8107134 <HAL_TIM_Base_Start_IT+0x80>
 8107102:	687b      	ldr	r3, [r7, #4]
 8107104:	681b      	ldr	r3, [r3, #0]
 8107106:	4a21      	ldr	r2, [pc, #132]	@ (810718c <HAL_TIM_Base_Start_IT+0xd8>)
 8107108:	4293      	cmp	r3, r2
 810710a:	d013      	beq.n	8107134 <HAL_TIM_Base_Start_IT+0x80>
 810710c:	687b      	ldr	r3, [r7, #4]
 810710e:	681b      	ldr	r3, [r3, #0]
 8107110:	4a1f      	ldr	r2, [pc, #124]	@ (8107190 <HAL_TIM_Base_Start_IT+0xdc>)
 8107112:	4293      	cmp	r3, r2
 8107114:	d00e      	beq.n	8107134 <HAL_TIM_Base_Start_IT+0x80>
 8107116:	687b      	ldr	r3, [r7, #4]
 8107118:	681b      	ldr	r3, [r3, #0]
 810711a:	4a1e      	ldr	r2, [pc, #120]	@ (8107194 <HAL_TIM_Base_Start_IT+0xe0>)
 810711c:	4293      	cmp	r3, r2
 810711e:	d009      	beq.n	8107134 <HAL_TIM_Base_Start_IT+0x80>
 8107120:	687b      	ldr	r3, [r7, #4]
 8107122:	681b      	ldr	r3, [r3, #0]
 8107124:	4a1c      	ldr	r2, [pc, #112]	@ (8107198 <HAL_TIM_Base_Start_IT+0xe4>)
 8107126:	4293      	cmp	r3, r2
 8107128:	d004      	beq.n	8107134 <HAL_TIM_Base_Start_IT+0x80>
 810712a:	687b      	ldr	r3, [r7, #4]
 810712c:	681b      	ldr	r3, [r3, #0]
 810712e:	4a1b      	ldr	r2, [pc, #108]	@ (810719c <HAL_TIM_Base_Start_IT+0xe8>)
 8107130:	4293      	cmp	r3, r2
 8107132:	d115      	bne.n	8107160 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8107134:	687b      	ldr	r3, [r7, #4]
 8107136:	681b      	ldr	r3, [r3, #0]
 8107138:	689a      	ldr	r2, [r3, #8]
 810713a:	4b19      	ldr	r3, [pc, #100]	@ (81071a0 <HAL_TIM_Base_Start_IT+0xec>)
 810713c:	4013      	ands	r3, r2
 810713e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107140:	68fb      	ldr	r3, [r7, #12]
 8107142:	2b06      	cmp	r3, #6
 8107144:	d015      	beq.n	8107172 <HAL_TIM_Base_Start_IT+0xbe>
 8107146:	68fb      	ldr	r3, [r7, #12]
 8107148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810714c:	d011      	beq.n	8107172 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810714e:	687b      	ldr	r3, [r7, #4]
 8107150:	681b      	ldr	r3, [r3, #0]
 8107152:	681a      	ldr	r2, [r3, #0]
 8107154:	687b      	ldr	r3, [r7, #4]
 8107156:	681b      	ldr	r3, [r3, #0]
 8107158:	f042 0201 	orr.w	r2, r2, #1
 810715c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810715e:	e008      	b.n	8107172 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8107160:	687b      	ldr	r3, [r7, #4]
 8107162:	681b      	ldr	r3, [r3, #0]
 8107164:	681a      	ldr	r2, [r3, #0]
 8107166:	687b      	ldr	r3, [r7, #4]
 8107168:	681b      	ldr	r3, [r3, #0]
 810716a:	f042 0201 	orr.w	r2, r2, #1
 810716e:	601a      	str	r2, [r3, #0]
 8107170:	e000      	b.n	8107174 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107172:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8107174:	2300      	movs	r3, #0
}
 8107176:	4618      	mov	r0, r3
 8107178:	3714      	adds	r7, #20
 810717a:	46bd      	mov	sp, r7
 810717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107180:	4770      	bx	lr
 8107182:	bf00      	nop
 8107184:	40010000 	.word	0x40010000
 8107188:	40000400 	.word	0x40000400
 810718c:	40000800 	.word	0x40000800
 8107190:	40000c00 	.word	0x40000c00
 8107194:	40010400 	.word	0x40010400
 8107198:	40001800 	.word	0x40001800
 810719c:	40014000 	.word	0x40014000
 81071a0:	00010007 	.word	0x00010007

081071a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81071a4:	b580      	push	{r7, lr}
 81071a6:	b082      	sub	sp, #8
 81071a8:	af00      	add	r7, sp, #0
 81071aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81071ac:	687b      	ldr	r3, [r7, #4]
 81071ae:	2b00      	cmp	r3, #0
 81071b0:	d101      	bne.n	81071b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 81071b2:	2301      	movs	r3, #1
 81071b4:	e049      	b.n	810724a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81071b6:	687b      	ldr	r3, [r7, #4]
 81071b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81071bc:	b2db      	uxtb	r3, r3
 81071be:	2b00      	cmp	r3, #0
 81071c0:	d106      	bne.n	81071d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81071c2:	687b      	ldr	r3, [r7, #4]
 81071c4:	2200      	movs	r2, #0
 81071c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 81071ca:	6878      	ldr	r0, [r7, #4]
 81071cc:	f7fc fa16 	bl	81035fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81071d0:	687b      	ldr	r3, [r7, #4]
 81071d2:	2202      	movs	r2, #2
 81071d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81071d8:	687b      	ldr	r3, [r7, #4]
 81071da:	681a      	ldr	r2, [r3, #0]
 81071dc:	687b      	ldr	r3, [r7, #4]
 81071de:	3304      	adds	r3, #4
 81071e0:	4619      	mov	r1, r3
 81071e2:	4610      	mov	r0, r2
 81071e4:	f000 fb8c 	bl	8107900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81071e8:	687b      	ldr	r3, [r7, #4]
 81071ea:	2201      	movs	r2, #1
 81071ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81071f0:	687b      	ldr	r3, [r7, #4]
 81071f2:	2201      	movs	r2, #1
 81071f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 81071f8:	687b      	ldr	r3, [r7, #4]
 81071fa:	2201      	movs	r2, #1
 81071fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8107200:	687b      	ldr	r3, [r7, #4]
 8107202:	2201      	movs	r2, #1
 8107204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8107208:	687b      	ldr	r3, [r7, #4]
 810720a:	2201      	movs	r2, #1
 810720c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8107210:	687b      	ldr	r3, [r7, #4]
 8107212:	2201      	movs	r2, #1
 8107214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8107218:	687b      	ldr	r3, [r7, #4]
 810721a:	2201      	movs	r2, #1
 810721c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107220:	687b      	ldr	r3, [r7, #4]
 8107222:	2201      	movs	r2, #1
 8107224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8107228:	687b      	ldr	r3, [r7, #4]
 810722a:	2201      	movs	r2, #1
 810722c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8107230:	687b      	ldr	r3, [r7, #4]
 8107232:	2201      	movs	r2, #1
 8107234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8107238:	687b      	ldr	r3, [r7, #4]
 810723a:	2201      	movs	r2, #1
 810723c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107240:	687b      	ldr	r3, [r7, #4]
 8107242:	2201      	movs	r2, #1
 8107244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8107248:	2300      	movs	r3, #0
}
 810724a:	4618      	mov	r0, r3
 810724c:	3708      	adds	r7, #8
 810724e:	46bd      	mov	sp, r7
 8107250:	bd80      	pop	{r7, pc}
	...

08107254 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8107254:	b580      	push	{r7, lr}
 8107256:	b084      	sub	sp, #16
 8107258:	af00      	add	r7, sp, #0
 810725a:	6078      	str	r0, [r7, #4]
 810725c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810725e:	683b      	ldr	r3, [r7, #0]
 8107260:	2b00      	cmp	r3, #0
 8107262:	d109      	bne.n	8107278 <HAL_TIM_PWM_Start+0x24>
 8107264:	687b      	ldr	r3, [r7, #4]
 8107266:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 810726a:	b2db      	uxtb	r3, r3
 810726c:	2b01      	cmp	r3, #1
 810726e:	bf14      	ite	ne
 8107270:	2301      	movne	r3, #1
 8107272:	2300      	moveq	r3, #0
 8107274:	b2db      	uxtb	r3, r3
 8107276:	e03c      	b.n	81072f2 <HAL_TIM_PWM_Start+0x9e>
 8107278:	683b      	ldr	r3, [r7, #0]
 810727a:	2b04      	cmp	r3, #4
 810727c:	d109      	bne.n	8107292 <HAL_TIM_PWM_Start+0x3e>
 810727e:	687b      	ldr	r3, [r7, #4]
 8107280:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8107284:	b2db      	uxtb	r3, r3
 8107286:	2b01      	cmp	r3, #1
 8107288:	bf14      	ite	ne
 810728a:	2301      	movne	r3, #1
 810728c:	2300      	moveq	r3, #0
 810728e:	b2db      	uxtb	r3, r3
 8107290:	e02f      	b.n	81072f2 <HAL_TIM_PWM_Start+0x9e>
 8107292:	683b      	ldr	r3, [r7, #0]
 8107294:	2b08      	cmp	r3, #8
 8107296:	d109      	bne.n	81072ac <HAL_TIM_PWM_Start+0x58>
 8107298:	687b      	ldr	r3, [r7, #4]
 810729a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810729e:	b2db      	uxtb	r3, r3
 81072a0:	2b01      	cmp	r3, #1
 81072a2:	bf14      	ite	ne
 81072a4:	2301      	movne	r3, #1
 81072a6:	2300      	moveq	r3, #0
 81072a8:	b2db      	uxtb	r3, r3
 81072aa:	e022      	b.n	81072f2 <HAL_TIM_PWM_Start+0x9e>
 81072ac:	683b      	ldr	r3, [r7, #0]
 81072ae:	2b0c      	cmp	r3, #12
 81072b0:	d109      	bne.n	81072c6 <HAL_TIM_PWM_Start+0x72>
 81072b2:	687b      	ldr	r3, [r7, #4]
 81072b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81072b8:	b2db      	uxtb	r3, r3
 81072ba:	2b01      	cmp	r3, #1
 81072bc:	bf14      	ite	ne
 81072be:	2301      	movne	r3, #1
 81072c0:	2300      	moveq	r3, #0
 81072c2:	b2db      	uxtb	r3, r3
 81072c4:	e015      	b.n	81072f2 <HAL_TIM_PWM_Start+0x9e>
 81072c6:	683b      	ldr	r3, [r7, #0]
 81072c8:	2b10      	cmp	r3, #16
 81072ca:	d109      	bne.n	81072e0 <HAL_TIM_PWM_Start+0x8c>
 81072cc:	687b      	ldr	r3, [r7, #4]
 81072ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81072d2:	b2db      	uxtb	r3, r3
 81072d4:	2b01      	cmp	r3, #1
 81072d6:	bf14      	ite	ne
 81072d8:	2301      	movne	r3, #1
 81072da:	2300      	moveq	r3, #0
 81072dc:	b2db      	uxtb	r3, r3
 81072de:	e008      	b.n	81072f2 <HAL_TIM_PWM_Start+0x9e>
 81072e0:	687b      	ldr	r3, [r7, #4]
 81072e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 81072e6:	b2db      	uxtb	r3, r3
 81072e8:	2b01      	cmp	r3, #1
 81072ea:	bf14      	ite	ne
 81072ec:	2301      	movne	r3, #1
 81072ee:	2300      	moveq	r3, #0
 81072f0:	b2db      	uxtb	r3, r3
 81072f2:	2b00      	cmp	r3, #0
 81072f4:	d001      	beq.n	81072fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 81072f6:	2301      	movs	r3, #1
 81072f8:	e0a1      	b.n	810743e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 81072fa:	683b      	ldr	r3, [r7, #0]
 81072fc:	2b00      	cmp	r3, #0
 81072fe:	d104      	bne.n	810730a <HAL_TIM_PWM_Start+0xb6>
 8107300:	687b      	ldr	r3, [r7, #4]
 8107302:	2202      	movs	r2, #2
 8107304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8107308:	e023      	b.n	8107352 <HAL_TIM_PWM_Start+0xfe>
 810730a:	683b      	ldr	r3, [r7, #0]
 810730c:	2b04      	cmp	r3, #4
 810730e:	d104      	bne.n	810731a <HAL_TIM_PWM_Start+0xc6>
 8107310:	687b      	ldr	r3, [r7, #4]
 8107312:	2202      	movs	r2, #2
 8107314:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8107318:	e01b      	b.n	8107352 <HAL_TIM_PWM_Start+0xfe>
 810731a:	683b      	ldr	r3, [r7, #0]
 810731c:	2b08      	cmp	r3, #8
 810731e:	d104      	bne.n	810732a <HAL_TIM_PWM_Start+0xd6>
 8107320:	687b      	ldr	r3, [r7, #4]
 8107322:	2202      	movs	r2, #2
 8107324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8107328:	e013      	b.n	8107352 <HAL_TIM_PWM_Start+0xfe>
 810732a:	683b      	ldr	r3, [r7, #0]
 810732c:	2b0c      	cmp	r3, #12
 810732e:	d104      	bne.n	810733a <HAL_TIM_PWM_Start+0xe6>
 8107330:	687b      	ldr	r3, [r7, #4]
 8107332:	2202      	movs	r2, #2
 8107334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8107338:	e00b      	b.n	8107352 <HAL_TIM_PWM_Start+0xfe>
 810733a:	683b      	ldr	r3, [r7, #0]
 810733c:	2b10      	cmp	r3, #16
 810733e:	d104      	bne.n	810734a <HAL_TIM_PWM_Start+0xf6>
 8107340:	687b      	ldr	r3, [r7, #4]
 8107342:	2202      	movs	r2, #2
 8107344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8107348:	e003      	b.n	8107352 <HAL_TIM_PWM_Start+0xfe>
 810734a:	687b      	ldr	r3, [r7, #4]
 810734c:	2202      	movs	r2, #2
 810734e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8107352:	687b      	ldr	r3, [r7, #4]
 8107354:	681b      	ldr	r3, [r3, #0]
 8107356:	2201      	movs	r2, #1
 8107358:	6839      	ldr	r1, [r7, #0]
 810735a:	4618      	mov	r0, r3
 810735c:	f000 fe4c 	bl	8107ff8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8107360:	687b      	ldr	r3, [r7, #4]
 8107362:	681b      	ldr	r3, [r3, #0]
 8107364:	4a38      	ldr	r2, [pc, #224]	@ (8107448 <HAL_TIM_PWM_Start+0x1f4>)
 8107366:	4293      	cmp	r3, r2
 8107368:	d013      	beq.n	8107392 <HAL_TIM_PWM_Start+0x13e>
 810736a:	687b      	ldr	r3, [r7, #4]
 810736c:	681b      	ldr	r3, [r3, #0]
 810736e:	4a37      	ldr	r2, [pc, #220]	@ (810744c <HAL_TIM_PWM_Start+0x1f8>)
 8107370:	4293      	cmp	r3, r2
 8107372:	d00e      	beq.n	8107392 <HAL_TIM_PWM_Start+0x13e>
 8107374:	687b      	ldr	r3, [r7, #4]
 8107376:	681b      	ldr	r3, [r3, #0]
 8107378:	4a35      	ldr	r2, [pc, #212]	@ (8107450 <HAL_TIM_PWM_Start+0x1fc>)
 810737a:	4293      	cmp	r3, r2
 810737c:	d009      	beq.n	8107392 <HAL_TIM_PWM_Start+0x13e>
 810737e:	687b      	ldr	r3, [r7, #4]
 8107380:	681b      	ldr	r3, [r3, #0]
 8107382:	4a34      	ldr	r2, [pc, #208]	@ (8107454 <HAL_TIM_PWM_Start+0x200>)
 8107384:	4293      	cmp	r3, r2
 8107386:	d004      	beq.n	8107392 <HAL_TIM_PWM_Start+0x13e>
 8107388:	687b      	ldr	r3, [r7, #4]
 810738a:	681b      	ldr	r3, [r3, #0]
 810738c:	4a32      	ldr	r2, [pc, #200]	@ (8107458 <HAL_TIM_PWM_Start+0x204>)
 810738e:	4293      	cmp	r3, r2
 8107390:	d101      	bne.n	8107396 <HAL_TIM_PWM_Start+0x142>
 8107392:	2301      	movs	r3, #1
 8107394:	e000      	b.n	8107398 <HAL_TIM_PWM_Start+0x144>
 8107396:	2300      	movs	r3, #0
 8107398:	2b00      	cmp	r3, #0
 810739a:	d007      	beq.n	81073ac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 810739c:	687b      	ldr	r3, [r7, #4]
 810739e:	681b      	ldr	r3, [r3, #0]
 81073a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 81073a2:	687b      	ldr	r3, [r7, #4]
 81073a4:	681b      	ldr	r3, [r3, #0]
 81073a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 81073aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81073ac:	687b      	ldr	r3, [r7, #4]
 81073ae:	681b      	ldr	r3, [r3, #0]
 81073b0:	4a25      	ldr	r2, [pc, #148]	@ (8107448 <HAL_TIM_PWM_Start+0x1f4>)
 81073b2:	4293      	cmp	r3, r2
 81073b4:	d022      	beq.n	81073fc <HAL_TIM_PWM_Start+0x1a8>
 81073b6:	687b      	ldr	r3, [r7, #4]
 81073b8:	681b      	ldr	r3, [r3, #0]
 81073ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81073be:	d01d      	beq.n	81073fc <HAL_TIM_PWM_Start+0x1a8>
 81073c0:	687b      	ldr	r3, [r7, #4]
 81073c2:	681b      	ldr	r3, [r3, #0]
 81073c4:	4a25      	ldr	r2, [pc, #148]	@ (810745c <HAL_TIM_PWM_Start+0x208>)
 81073c6:	4293      	cmp	r3, r2
 81073c8:	d018      	beq.n	81073fc <HAL_TIM_PWM_Start+0x1a8>
 81073ca:	687b      	ldr	r3, [r7, #4]
 81073cc:	681b      	ldr	r3, [r3, #0]
 81073ce:	4a24      	ldr	r2, [pc, #144]	@ (8107460 <HAL_TIM_PWM_Start+0x20c>)
 81073d0:	4293      	cmp	r3, r2
 81073d2:	d013      	beq.n	81073fc <HAL_TIM_PWM_Start+0x1a8>
 81073d4:	687b      	ldr	r3, [r7, #4]
 81073d6:	681b      	ldr	r3, [r3, #0]
 81073d8:	4a22      	ldr	r2, [pc, #136]	@ (8107464 <HAL_TIM_PWM_Start+0x210>)
 81073da:	4293      	cmp	r3, r2
 81073dc:	d00e      	beq.n	81073fc <HAL_TIM_PWM_Start+0x1a8>
 81073de:	687b      	ldr	r3, [r7, #4]
 81073e0:	681b      	ldr	r3, [r3, #0]
 81073e2:	4a1a      	ldr	r2, [pc, #104]	@ (810744c <HAL_TIM_PWM_Start+0x1f8>)
 81073e4:	4293      	cmp	r3, r2
 81073e6:	d009      	beq.n	81073fc <HAL_TIM_PWM_Start+0x1a8>
 81073e8:	687b      	ldr	r3, [r7, #4]
 81073ea:	681b      	ldr	r3, [r3, #0]
 81073ec:	4a1e      	ldr	r2, [pc, #120]	@ (8107468 <HAL_TIM_PWM_Start+0x214>)
 81073ee:	4293      	cmp	r3, r2
 81073f0:	d004      	beq.n	81073fc <HAL_TIM_PWM_Start+0x1a8>
 81073f2:	687b      	ldr	r3, [r7, #4]
 81073f4:	681b      	ldr	r3, [r3, #0]
 81073f6:	4a16      	ldr	r2, [pc, #88]	@ (8107450 <HAL_TIM_PWM_Start+0x1fc>)
 81073f8:	4293      	cmp	r3, r2
 81073fa:	d115      	bne.n	8107428 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81073fc:	687b      	ldr	r3, [r7, #4]
 81073fe:	681b      	ldr	r3, [r3, #0]
 8107400:	689a      	ldr	r2, [r3, #8]
 8107402:	4b1a      	ldr	r3, [pc, #104]	@ (810746c <HAL_TIM_PWM_Start+0x218>)
 8107404:	4013      	ands	r3, r2
 8107406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107408:	68fb      	ldr	r3, [r7, #12]
 810740a:	2b06      	cmp	r3, #6
 810740c:	d015      	beq.n	810743a <HAL_TIM_PWM_Start+0x1e6>
 810740e:	68fb      	ldr	r3, [r7, #12]
 8107410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107414:	d011      	beq.n	810743a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8107416:	687b      	ldr	r3, [r7, #4]
 8107418:	681b      	ldr	r3, [r3, #0]
 810741a:	681a      	ldr	r2, [r3, #0]
 810741c:	687b      	ldr	r3, [r7, #4]
 810741e:	681b      	ldr	r3, [r3, #0]
 8107420:	f042 0201 	orr.w	r2, r2, #1
 8107424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107426:	e008      	b.n	810743a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8107428:	687b      	ldr	r3, [r7, #4]
 810742a:	681b      	ldr	r3, [r3, #0]
 810742c:	681a      	ldr	r2, [r3, #0]
 810742e:	687b      	ldr	r3, [r7, #4]
 8107430:	681b      	ldr	r3, [r3, #0]
 8107432:	f042 0201 	orr.w	r2, r2, #1
 8107436:	601a      	str	r2, [r3, #0]
 8107438:	e000      	b.n	810743c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810743a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810743c:	2300      	movs	r3, #0
}
 810743e:	4618      	mov	r0, r3
 8107440:	3710      	adds	r7, #16
 8107442:	46bd      	mov	sp, r7
 8107444:	bd80      	pop	{r7, pc}
 8107446:	bf00      	nop
 8107448:	40010000 	.word	0x40010000
 810744c:	40010400 	.word	0x40010400
 8107450:	40014000 	.word	0x40014000
 8107454:	40014400 	.word	0x40014400
 8107458:	40014800 	.word	0x40014800
 810745c:	40000400 	.word	0x40000400
 8107460:	40000800 	.word	0x40000800
 8107464:	40000c00 	.word	0x40000c00
 8107468:	40001800 	.word	0x40001800
 810746c:	00010007 	.word	0x00010007

08107470 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8107470:	b580      	push	{r7, lr}
 8107472:	b086      	sub	sp, #24
 8107474:	af00      	add	r7, sp, #0
 8107476:	6078      	str	r0, [r7, #4]
 8107478:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 810747a:	687b      	ldr	r3, [r7, #4]
 810747c:	2b00      	cmp	r3, #0
 810747e:	d101      	bne.n	8107484 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8107480:	2301      	movs	r3, #1
 8107482:	e097      	b.n	81075b4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107484:	687b      	ldr	r3, [r7, #4]
 8107486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810748a:	b2db      	uxtb	r3, r3
 810748c:	2b00      	cmp	r3, #0
 810748e:	d106      	bne.n	810749e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107490:	687b      	ldr	r3, [r7, #4]
 8107492:	2200      	movs	r2, #0
 8107494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8107498:	6878      	ldr	r0, [r7, #4]
 810749a:	f7fc f8d1 	bl	8103640 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810749e:	687b      	ldr	r3, [r7, #4]
 81074a0:	2202      	movs	r2, #2
 81074a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 81074a6:	687b      	ldr	r3, [r7, #4]
 81074a8:	681b      	ldr	r3, [r3, #0]
 81074aa:	689b      	ldr	r3, [r3, #8]
 81074ac:	687a      	ldr	r2, [r7, #4]
 81074ae:	6812      	ldr	r2, [r2, #0]
 81074b0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 81074b4:	f023 0307 	bic.w	r3, r3, #7
 81074b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81074ba:	687b      	ldr	r3, [r7, #4]
 81074bc:	681a      	ldr	r2, [r3, #0]
 81074be:	687b      	ldr	r3, [r7, #4]
 81074c0:	3304      	adds	r3, #4
 81074c2:	4619      	mov	r1, r3
 81074c4:	4610      	mov	r0, r2
 81074c6:	f000 fa1b 	bl	8107900 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81074ca:	687b      	ldr	r3, [r7, #4]
 81074cc:	681b      	ldr	r3, [r3, #0]
 81074ce:	689b      	ldr	r3, [r3, #8]
 81074d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 81074d2:	687b      	ldr	r3, [r7, #4]
 81074d4:	681b      	ldr	r3, [r3, #0]
 81074d6:	699b      	ldr	r3, [r3, #24]
 81074d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 81074da:	687b      	ldr	r3, [r7, #4]
 81074dc:	681b      	ldr	r3, [r3, #0]
 81074de:	6a1b      	ldr	r3, [r3, #32]
 81074e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 81074e2:	683b      	ldr	r3, [r7, #0]
 81074e4:	681b      	ldr	r3, [r3, #0]
 81074e6:	697a      	ldr	r2, [r7, #20]
 81074e8:	4313      	orrs	r3, r2
 81074ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 81074ec:	693b      	ldr	r3, [r7, #16]
 81074ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81074f2:	f023 0303 	bic.w	r3, r3, #3
 81074f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 81074f8:	683b      	ldr	r3, [r7, #0]
 81074fa:	689a      	ldr	r2, [r3, #8]
 81074fc:	683b      	ldr	r3, [r7, #0]
 81074fe:	699b      	ldr	r3, [r3, #24]
 8107500:	021b      	lsls	r3, r3, #8
 8107502:	4313      	orrs	r3, r2
 8107504:	693a      	ldr	r2, [r7, #16]
 8107506:	4313      	orrs	r3, r2
 8107508:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 810750a:	693b      	ldr	r3, [r7, #16]
 810750c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8107510:	f023 030c 	bic.w	r3, r3, #12
 8107514:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8107516:	693b      	ldr	r3, [r7, #16]
 8107518:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810751c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8107520:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8107522:	683b      	ldr	r3, [r7, #0]
 8107524:	68da      	ldr	r2, [r3, #12]
 8107526:	683b      	ldr	r3, [r7, #0]
 8107528:	69db      	ldr	r3, [r3, #28]
 810752a:	021b      	lsls	r3, r3, #8
 810752c:	4313      	orrs	r3, r2
 810752e:	693a      	ldr	r2, [r7, #16]
 8107530:	4313      	orrs	r3, r2
 8107532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8107534:	683b      	ldr	r3, [r7, #0]
 8107536:	691b      	ldr	r3, [r3, #16]
 8107538:	011a      	lsls	r2, r3, #4
 810753a:	683b      	ldr	r3, [r7, #0]
 810753c:	6a1b      	ldr	r3, [r3, #32]
 810753e:	031b      	lsls	r3, r3, #12
 8107540:	4313      	orrs	r3, r2
 8107542:	693a      	ldr	r2, [r7, #16]
 8107544:	4313      	orrs	r3, r2
 8107546:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8107548:	68fb      	ldr	r3, [r7, #12]
 810754a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 810754e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8107550:	68fb      	ldr	r3, [r7, #12]
 8107552:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8107556:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8107558:	683b      	ldr	r3, [r7, #0]
 810755a:	685a      	ldr	r2, [r3, #4]
 810755c:	683b      	ldr	r3, [r7, #0]
 810755e:	695b      	ldr	r3, [r3, #20]
 8107560:	011b      	lsls	r3, r3, #4
 8107562:	4313      	orrs	r3, r2
 8107564:	68fa      	ldr	r2, [r7, #12]
 8107566:	4313      	orrs	r3, r2
 8107568:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 810756a:	687b      	ldr	r3, [r7, #4]
 810756c:	681b      	ldr	r3, [r3, #0]
 810756e:	697a      	ldr	r2, [r7, #20]
 8107570:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8107572:	687b      	ldr	r3, [r7, #4]
 8107574:	681b      	ldr	r3, [r3, #0]
 8107576:	693a      	ldr	r2, [r7, #16]
 8107578:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 810757a:	687b      	ldr	r3, [r7, #4]
 810757c:	681b      	ldr	r3, [r3, #0]
 810757e:	68fa      	ldr	r2, [r7, #12]
 8107580:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107582:	687b      	ldr	r3, [r7, #4]
 8107584:	2201      	movs	r2, #1
 8107586:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 810758a:	687b      	ldr	r3, [r7, #4]
 810758c:	2201      	movs	r2, #1
 810758e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8107592:	687b      	ldr	r3, [r7, #4]
 8107594:	2201      	movs	r2, #1
 8107596:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 810759a:	687b      	ldr	r3, [r7, #4]
 810759c:	2201      	movs	r2, #1
 810759e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 81075a2:	687b      	ldr	r3, [r7, #4]
 81075a4:	2201      	movs	r2, #1
 81075a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81075aa:	687b      	ldr	r3, [r7, #4]
 81075ac:	2201      	movs	r2, #1
 81075ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 81075b2:	2300      	movs	r3, #0
}
 81075b4:	4618      	mov	r0, r3
 81075b6:	3718      	adds	r7, #24
 81075b8:	46bd      	mov	sp, r7
 81075ba:	bd80      	pop	{r7, pc}

081075bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81075bc:	b580      	push	{r7, lr}
 81075be:	b084      	sub	sp, #16
 81075c0:	af00      	add	r7, sp, #0
 81075c2:	6078      	str	r0, [r7, #4]
 81075c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 81075c6:	687b      	ldr	r3, [r7, #4]
 81075c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 81075cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 81075ce:	687b      	ldr	r3, [r7, #4]
 81075d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 81075d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 81075d6:	687b      	ldr	r3, [r7, #4]
 81075d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81075dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 81075de:	687b      	ldr	r3, [r7, #4]
 81075e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81075e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 81075e6:	683b      	ldr	r3, [r7, #0]
 81075e8:	2b00      	cmp	r3, #0
 81075ea:	d110      	bne.n	810760e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 81075ec:	7bfb      	ldrb	r3, [r7, #15]
 81075ee:	2b01      	cmp	r3, #1
 81075f0:	d102      	bne.n	81075f8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 81075f2:	7b7b      	ldrb	r3, [r7, #13]
 81075f4:	2b01      	cmp	r3, #1
 81075f6:	d001      	beq.n	81075fc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 81075f8:	2301      	movs	r3, #1
 81075fa:	e069      	b.n	81076d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 81075fc:	687b      	ldr	r3, [r7, #4]
 81075fe:	2202      	movs	r2, #2
 8107600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8107604:	687b      	ldr	r3, [r7, #4]
 8107606:	2202      	movs	r2, #2
 8107608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810760c:	e031      	b.n	8107672 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 810760e:	683b      	ldr	r3, [r7, #0]
 8107610:	2b04      	cmp	r3, #4
 8107612:	d110      	bne.n	8107636 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8107614:	7bbb      	ldrb	r3, [r7, #14]
 8107616:	2b01      	cmp	r3, #1
 8107618:	d102      	bne.n	8107620 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 810761a:	7b3b      	ldrb	r3, [r7, #12]
 810761c:	2b01      	cmp	r3, #1
 810761e:	d001      	beq.n	8107624 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8107620:	2301      	movs	r3, #1
 8107622:	e055      	b.n	81076d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8107624:	687b      	ldr	r3, [r7, #4]
 8107626:	2202      	movs	r2, #2
 8107628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 810762c:	687b      	ldr	r3, [r7, #4]
 810762e:	2202      	movs	r2, #2
 8107630:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8107634:	e01d      	b.n	8107672 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8107636:	7bfb      	ldrb	r3, [r7, #15]
 8107638:	2b01      	cmp	r3, #1
 810763a:	d108      	bne.n	810764e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 810763c:	7bbb      	ldrb	r3, [r7, #14]
 810763e:	2b01      	cmp	r3, #1
 8107640:	d105      	bne.n	810764e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8107642:	7b7b      	ldrb	r3, [r7, #13]
 8107644:	2b01      	cmp	r3, #1
 8107646:	d102      	bne.n	810764e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8107648:	7b3b      	ldrb	r3, [r7, #12]
 810764a:	2b01      	cmp	r3, #1
 810764c:	d001      	beq.n	8107652 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 810764e:	2301      	movs	r3, #1
 8107650:	e03e      	b.n	81076d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8107652:	687b      	ldr	r3, [r7, #4]
 8107654:	2202      	movs	r2, #2
 8107656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 810765a:	687b      	ldr	r3, [r7, #4]
 810765c:	2202      	movs	r2, #2
 810765e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8107662:	687b      	ldr	r3, [r7, #4]
 8107664:	2202      	movs	r2, #2
 8107666:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 810766a:	687b      	ldr	r3, [r7, #4]
 810766c:	2202      	movs	r2, #2
 810766e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8107672:	683b      	ldr	r3, [r7, #0]
 8107674:	2b00      	cmp	r3, #0
 8107676:	d003      	beq.n	8107680 <HAL_TIM_Encoder_Start+0xc4>
 8107678:	683b      	ldr	r3, [r7, #0]
 810767a:	2b04      	cmp	r3, #4
 810767c:	d008      	beq.n	8107690 <HAL_TIM_Encoder_Start+0xd4>
 810767e:	e00f      	b.n	81076a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8107680:	687b      	ldr	r3, [r7, #4]
 8107682:	681b      	ldr	r3, [r3, #0]
 8107684:	2201      	movs	r2, #1
 8107686:	2100      	movs	r1, #0
 8107688:	4618      	mov	r0, r3
 810768a:	f000 fcb5 	bl	8107ff8 <TIM_CCxChannelCmd>
      break;
 810768e:	e016      	b.n	81076be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8107690:	687b      	ldr	r3, [r7, #4]
 8107692:	681b      	ldr	r3, [r3, #0]
 8107694:	2201      	movs	r2, #1
 8107696:	2104      	movs	r1, #4
 8107698:	4618      	mov	r0, r3
 810769a:	f000 fcad 	bl	8107ff8 <TIM_CCxChannelCmd>
      break;
 810769e:	e00e      	b.n	81076be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 81076a0:	687b      	ldr	r3, [r7, #4]
 81076a2:	681b      	ldr	r3, [r3, #0]
 81076a4:	2201      	movs	r2, #1
 81076a6:	2100      	movs	r1, #0
 81076a8:	4618      	mov	r0, r3
 81076aa:	f000 fca5 	bl	8107ff8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 81076ae:	687b      	ldr	r3, [r7, #4]
 81076b0:	681b      	ldr	r3, [r3, #0]
 81076b2:	2201      	movs	r2, #1
 81076b4:	2104      	movs	r1, #4
 81076b6:	4618      	mov	r0, r3
 81076b8:	f000 fc9e 	bl	8107ff8 <TIM_CCxChannelCmd>
      break;
 81076bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 81076be:	687b      	ldr	r3, [r7, #4]
 81076c0:	681b      	ldr	r3, [r3, #0]
 81076c2:	681a      	ldr	r2, [r3, #0]
 81076c4:	687b      	ldr	r3, [r7, #4]
 81076c6:	681b      	ldr	r3, [r3, #0]
 81076c8:	f042 0201 	orr.w	r2, r2, #1
 81076cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 81076ce:	2300      	movs	r3, #0
}
 81076d0:	4618      	mov	r0, r3
 81076d2:	3710      	adds	r7, #16
 81076d4:	46bd      	mov	sp, r7
 81076d6:	bd80      	pop	{r7, pc}

081076d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 81076d8:	b580      	push	{r7, lr}
 81076da:	b086      	sub	sp, #24
 81076dc:	af00      	add	r7, sp, #0
 81076de:	60f8      	str	r0, [r7, #12]
 81076e0:	60b9      	str	r1, [r7, #8]
 81076e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81076e4:	2300      	movs	r3, #0
 81076e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 81076e8:	68fb      	ldr	r3, [r7, #12]
 81076ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 81076ee:	2b01      	cmp	r3, #1
 81076f0:	d101      	bne.n	81076f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 81076f2:	2302      	movs	r3, #2
 81076f4:	e0ff      	b.n	81078f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 81076f6:	68fb      	ldr	r3, [r7, #12]
 81076f8:	2201      	movs	r2, #1
 81076fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 81076fe:	687b      	ldr	r3, [r7, #4]
 8107700:	2b14      	cmp	r3, #20
 8107702:	f200 80f0 	bhi.w	81078e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8107706:	a201      	add	r2, pc, #4	@ (adr r2, 810770c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8107708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810770c:	08107761 	.word	0x08107761
 8107710:	081078e7 	.word	0x081078e7
 8107714:	081078e7 	.word	0x081078e7
 8107718:	081078e7 	.word	0x081078e7
 810771c:	081077a1 	.word	0x081077a1
 8107720:	081078e7 	.word	0x081078e7
 8107724:	081078e7 	.word	0x081078e7
 8107728:	081078e7 	.word	0x081078e7
 810772c:	081077e3 	.word	0x081077e3
 8107730:	081078e7 	.word	0x081078e7
 8107734:	081078e7 	.word	0x081078e7
 8107738:	081078e7 	.word	0x081078e7
 810773c:	08107823 	.word	0x08107823
 8107740:	081078e7 	.word	0x081078e7
 8107744:	081078e7 	.word	0x081078e7
 8107748:	081078e7 	.word	0x081078e7
 810774c:	08107865 	.word	0x08107865
 8107750:	081078e7 	.word	0x081078e7
 8107754:	081078e7 	.word	0x081078e7
 8107758:	081078e7 	.word	0x081078e7
 810775c:	081078a5 	.word	0x081078a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8107760:	68fb      	ldr	r3, [r7, #12]
 8107762:	681b      	ldr	r3, [r3, #0]
 8107764:	68b9      	ldr	r1, [r7, #8]
 8107766:	4618      	mov	r0, r3
 8107768:	f000 f970 	bl	8107a4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810776c:	68fb      	ldr	r3, [r7, #12]
 810776e:	681b      	ldr	r3, [r3, #0]
 8107770:	699a      	ldr	r2, [r3, #24]
 8107772:	68fb      	ldr	r3, [r7, #12]
 8107774:	681b      	ldr	r3, [r3, #0]
 8107776:	f042 0208 	orr.w	r2, r2, #8
 810777a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810777c:	68fb      	ldr	r3, [r7, #12]
 810777e:	681b      	ldr	r3, [r3, #0]
 8107780:	699a      	ldr	r2, [r3, #24]
 8107782:	68fb      	ldr	r3, [r7, #12]
 8107784:	681b      	ldr	r3, [r3, #0]
 8107786:	f022 0204 	bic.w	r2, r2, #4
 810778a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810778c:	68fb      	ldr	r3, [r7, #12]
 810778e:	681b      	ldr	r3, [r3, #0]
 8107790:	6999      	ldr	r1, [r3, #24]
 8107792:	68bb      	ldr	r3, [r7, #8]
 8107794:	691a      	ldr	r2, [r3, #16]
 8107796:	68fb      	ldr	r3, [r7, #12]
 8107798:	681b      	ldr	r3, [r3, #0]
 810779a:	430a      	orrs	r2, r1
 810779c:	619a      	str	r2, [r3, #24]
      break;
 810779e:	e0a5      	b.n	81078ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 81077a0:	68fb      	ldr	r3, [r7, #12]
 81077a2:	681b      	ldr	r3, [r3, #0]
 81077a4:	68b9      	ldr	r1, [r7, #8]
 81077a6:	4618      	mov	r0, r3
 81077a8:	f000 f9e0 	bl	8107b6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 81077ac:	68fb      	ldr	r3, [r7, #12]
 81077ae:	681b      	ldr	r3, [r3, #0]
 81077b0:	699a      	ldr	r2, [r3, #24]
 81077b2:	68fb      	ldr	r3, [r7, #12]
 81077b4:	681b      	ldr	r3, [r3, #0]
 81077b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81077ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 81077bc:	68fb      	ldr	r3, [r7, #12]
 81077be:	681b      	ldr	r3, [r3, #0]
 81077c0:	699a      	ldr	r2, [r3, #24]
 81077c2:	68fb      	ldr	r3, [r7, #12]
 81077c4:	681b      	ldr	r3, [r3, #0]
 81077c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 81077ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 81077cc:	68fb      	ldr	r3, [r7, #12]
 81077ce:	681b      	ldr	r3, [r3, #0]
 81077d0:	6999      	ldr	r1, [r3, #24]
 81077d2:	68bb      	ldr	r3, [r7, #8]
 81077d4:	691b      	ldr	r3, [r3, #16]
 81077d6:	021a      	lsls	r2, r3, #8
 81077d8:	68fb      	ldr	r3, [r7, #12]
 81077da:	681b      	ldr	r3, [r3, #0]
 81077dc:	430a      	orrs	r2, r1
 81077de:	619a      	str	r2, [r3, #24]
      break;
 81077e0:	e084      	b.n	81078ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81077e2:	68fb      	ldr	r3, [r7, #12]
 81077e4:	681b      	ldr	r3, [r3, #0]
 81077e6:	68b9      	ldr	r1, [r7, #8]
 81077e8:	4618      	mov	r0, r3
 81077ea:	f000 fa49 	bl	8107c80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81077ee:	68fb      	ldr	r3, [r7, #12]
 81077f0:	681b      	ldr	r3, [r3, #0]
 81077f2:	69da      	ldr	r2, [r3, #28]
 81077f4:	68fb      	ldr	r3, [r7, #12]
 81077f6:	681b      	ldr	r3, [r3, #0]
 81077f8:	f042 0208 	orr.w	r2, r2, #8
 81077fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81077fe:	68fb      	ldr	r3, [r7, #12]
 8107800:	681b      	ldr	r3, [r3, #0]
 8107802:	69da      	ldr	r2, [r3, #28]
 8107804:	68fb      	ldr	r3, [r7, #12]
 8107806:	681b      	ldr	r3, [r3, #0]
 8107808:	f022 0204 	bic.w	r2, r2, #4
 810780c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810780e:	68fb      	ldr	r3, [r7, #12]
 8107810:	681b      	ldr	r3, [r3, #0]
 8107812:	69d9      	ldr	r1, [r3, #28]
 8107814:	68bb      	ldr	r3, [r7, #8]
 8107816:	691a      	ldr	r2, [r3, #16]
 8107818:	68fb      	ldr	r3, [r7, #12]
 810781a:	681b      	ldr	r3, [r3, #0]
 810781c:	430a      	orrs	r2, r1
 810781e:	61da      	str	r2, [r3, #28]
      break;
 8107820:	e064      	b.n	81078ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8107822:	68fb      	ldr	r3, [r7, #12]
 8107824:	681b      	ldr	r3, [r3, #0]
 8107826:	68b9      	ldr	r1, [r7, #8]
 8107828:	4618      	mov	r0, r3
 810782a:	f000 fab1 	bl	8107d90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810782e:	68fb      	ldr	r3, [r7, #12]
 8107830:	681b      	ldr	r3, [r3, #0]
 8107832:	69da      	ldr	r2, [r3, #28]
 8107834:	68fb      	ldr	r3, [r7, #12]
 8107836:	681b      	ldr	r3, [r3, #0]
 8107838:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810783c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810783e:	68fb      	ldr	r3, [r7, #12]
 8107840:	681b      	ldr	r3, [r3, #0]
 8107842:	69da      	ldr	r2, [r3, #28]
 8107844:	68fb      	ldr	r3, [r7, #12]
 8107846:	681b      	ldr	r3, [r3, #0]
 8107848:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810784c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810784e:	68fb      	ldr	r3, [r7, #12]
 8107850:	681b      	ldr	r3, [r3, #0]
 8107852:	69d9      	ldr	r1, [r3, #28]
 8107854:	68bb      	ldr	r3, [r7, #8]
 8107856:	691b      	ldr	r3, [r3, #16]
 8107858:	021a      	lsls	r2, r3, #8
 810785a:	68fb      	ldr	r3, [r7, #12]
 810785c:	681b      	ldr	r3, [r3, #0]
 810785e:	430a      	orrs	r2, r1
 8107860:	61da      	str	r2, [r3, #28]
      break;
 8107862:	e043      	b.n	81078ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8107864:	68fb      	ldr	r3, [r7, #12]
 8107866:	681b      	ldr	r3, [r3, #0]
 8107868:	68b9      	ldr	r1, [r7, #8]
 810786a:	4618      	mov	r0, r3
 810786c:	f000 fafa 	bl	8107e64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8107870:	68fb      	ldr	r3, [r7, #12]
 8107872:	681b      	ldr	r3, [r3, #0]
 8107874:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8107876:	68fb      	ldr	r3, [r7, #12]
 8107878:	681b      	ldr	r3, [r3, #0]
 810787a:	f042 0208 	orr.w	r2, r2, #8
 810787e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8107880:	68fb      	ldr	r3, [r7, #12]
 8107882:	681b      	ldr	r3, [r3, #0]
 8107884:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8107886:	68fb      	ldr	r3, [r7, #12]
 8107888:	681b      	ldr	r3, [r3, #0]
 810788a:	f022 0204 	bic.w	r2, r2, #4
 810788e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8107890:	68fb      	ldr	r3, [r7, #12]
 8107892:	681b      	ldr	r3, [r3, #0]
 8107894:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8107896:	68bb      	ldr	r3, [r7, #8]
 8107898:	691a      	ldr	r2, [r3, #16]
 810789a:	68fb      	ldr	r3, [r7, #12]
 810789c:	681b      	ldr	r3, [r3, #0]
 810789e:	430a      	orrs	r2, r1
 81078a0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 81078a2:	e023      	b.n	81078ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 81078a4:	68fb      	ldr	r3, [r7, #12]
 81078a6:	681b      	ldr	r3, [r3, #0]
 81078a8:	68b9      	ldr	r1, [r7, #8]
 81078aa:	4618      	mov	r0, r3
 81078ac:	f000 fb3e 	bl	8107f2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 81078b0:	68fb      	ldr	r3, [r7, #12]
 81078b2:	681b      	ldr	r3, [r3, #0]
 81078b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81078b6:	68fb      	ldr	r3, [r7, #12]
 81078b8:	681b      	ldr	r3, [r3, #0]
 81078ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81078be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 81078c0:	68fb      	ldr	r3, [r7, #12]
 81078c2:	681b      	ldr	r3, [r3, #0]
 81078c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81078c6:	68fb      	ldr	r3, [r7, #12]
 81078c8:	681b      	ldr	r3, [r3, #0]
 81078ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 81078ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81078d0:	68fb      	ldr	r3, [r7, #12]
 81078d2:	681b      	ldr	r3, [r3, #0]
 81078d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 81078d6:	68bb      	ldr	r3, [r7, #8]
 81078d8:	691b      	ldr	r3, [r3, #16]
 81078da:	021a      	lsls	r2, r3, #8
 81078dc:	68fb      	ldr	r3, [r7, #12]
 81078de:	681b      	ldr	r3, [r3, #0]
 81078e0:	430a      	orrs	r2, r1
 81078e2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 81078e4:	e002      	b.n	81078ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 81078e6:	2301      	movs	r3, #1
 81078e8:	75fb      	strb	r3, [r7, #23]
      break;
 81078ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81078ec:	68fb      	ldr	r3, [r7, #12]
 81078ee:	2200      	movs	r2, #0
 81078f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 81078f4:	7dfb      	ldrb	r3, [r7, #23]
}
 81078f6:	4618      	mov	r0, r3
 81078f8:	3718      	adds	r7, #24
 81078fa:	46bd      	mov	sp, r7
 81078fc:	bd80      	pop	{r7, pc}
 81078fe:	bf00      	nop

08107900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8107900:	b480      	push	{r7}
 8107902:	b085      	sub	sp, #20
 8107904:	af00      	add	r7, sp, #0
 8107906:	6078      	str	r0, [r7, #4]
 8107908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810790a:	687b      	ldr	r3, [r7, #4]
 810790c:	681b      	ldr	r3, [r3, #0]
 810790e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8107910:	687b      	ldr	r3, [r7, #4]
 8107912:	4a46      	ldr	r2, [pc, #280]	@ (8107a2c <TIM_Base_SetConfig+0x12c>)
 8107914:	4293      	cmp	r3, r2
 8107916:	d013      	beq.n	8107940 <TIM_Base_SetConfig+0x40>
 8107918:	687b      	ldr	r3, [r7, #4]
 810791a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810791e:	d00f      	beq.n	8107940 <TIM_Base_SetConfig+0x40>
 8107920:	687b      	ldr	r3, [r7, #4]
 8107922:	4a43      	ldr	r2, [pc, #268]	@ (8107a30 <TIM_Base_SetConfig+0x130>)
 8107924:	4293      	cmp	r3, r2
 8107926:	d00b      	beq.n	8107940 <TIM_Base_SetConfig+0x40>
 8107928:	687b      	ldr	r3, [r7, #4]
 810792a:	4a42      	ldr	r2, [pc, #264]	@ (8107a34 <TIM_Base_SetConfig+0x134>)
 810792c:	4293      	cmp	r3, r2
 810792e:	d007      	beq.n	8107940 <TIM_Base_SetConfig+0x40>
 8107930:	687b      	ldr	r3, [r7, #4]
 8107932:	4a41      	ldr	r2, [pc, #260]	@ (8107a38 <TIM_Base_SetConfig+0x138>)
 8107934:	4293      	cmp	r3, r2
 8107936:	d003      	beq.n	8107940 <TIM_Base_SetConfig+0x40>
 8107938:	687b      	ldr	r3, [r7, #4]
 810793a:	4a40      	ldr	r2, [pc, #256]	@ (8107a3c <TIM_Base_SetConfig+0x13c>)
 810793c:	4293      	cmp	r3, r2
 810793e:	d108      	bne.n	8107952 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107940:	68fb      	ldr	r3, [r7, #12]
 8107942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8107946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107948:	683b      	ldr	r3, [r7, #0]
 810794a:	685b      	ldr	r3, [r3, #4]
 810794c:	68fa      	ldr	r2, [r7, #12]
 810794e:	4313      	orrs	r3, r2
 8107950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8107952:	687b      	ldr	r3, [r7, #4]
 8107954:	4a35      	ldr	r2, [pc, #212]	@ (8107a2c <TIM_Base_SetConfig+0x12c>)
 8107956:	4293      	cmp	r3, r2
 8107958:	d01f      	beq.n	810799a <TIM_Base_SetConfig+0x9a>
 810795a:	687b      	ldr	r3, [r7, #4]
 810795c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107960:	d01b      	beq.n	810799a <TIM_Base_SetConfig+0x9a>
 8107962:	687b      	ldr	r3, [r7, #4]
 8107964:	4a32      	ldr	r2, [pc, #200]	@ (8107a30 <TIM_Base_SetConfig+0x130>)
 8107966:	4293      	cmp	r3, r2
 8107968:	d017      	beq.n	810799a <TIM_Base_SetConfig+0x9a>
 810796a:	687b      	ldr	r3, [r7, #4]
 810796c:	4a31      	ldr	r2, [pc, #196]	@ (8107a34 <TIM_Base_SetConfig+0x134>)
 810796e:	4293      	cmp	r3, r2
 8107970:	d013      	beq.n	810799a <TIM_Base_SetConfig+0x9a>
 8107972:	687b      	ldr	r3, [r7, #4]
 8107974:	4a30      	ldr	r2, [pc, #192]	@ (8107a38 <TIM_Base_SetConfig+0x138>)
 8107976:	4293      	cmp	r3, r2
 8107978:	d00f      	beq.n	810799a <TIM_Base_SetConfig+0x9a>
 810797a:	687b      	ldr	r3, [r7, #4]
 810797c:	4a2f      	ldr	r2, [pc, #188]	@ (8107a3c <TIM_Base_SetConfig+0x13c>)
 810797e:	4293      	cmp	r3, r2
 8107980:	d00b      	beq.n	810799a <TIM_Base_SetConfig+0x9a>
 8107982:	687b      	ldr	r3, [r7, #4]
 8107984:	4a2e      	ldr	r2, [pc, #184]	@ (8107a40 <TIM_Base_SetConfig+0x140>)
 8107986:	4293      	cmp	r3, r2
 8107988:	d007      	beq.n	810799a <TIM_Base_SetConfig+0x9a>
 810798a:	687b      	ldr	r3, [r7, #4]
 810798c:	4a2d      	ldr	r2, [pc, #180]	@ (8107a44 <TIM_Base_SetConfig+0x144>)
 810798e:	4293      	cmp	r3, r2
 8107990:	d003      	beq.n	810799a <TIM_Base_SetConfig+0x9a>
 8107992:	687b      	ldr	r3, [r7, #4]
 8107994:	4a2c      	ldr	r2, [pc, #176]	@ (8107a48 <TIM_Base_SetConfig+0x148>)
 8107996:	4293      	cmp	r3, r2
 8107998:	d108      	bne.n	81079ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810799a:	68fb      	ldr	r3, [r7, #12]
 810799c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81079a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81079a2:	683b      	ldr	r3, [r7, #0]
 81079a4:	68db      	ldr	r3, [r3, #12]
 81079a6:	68fa      	ldr	r2, [r7, #12]
 81079a8:	4313      	orrs	r3, r2
 81079aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81079ac:	68fb      	ldr	r3, [r7, #12]
 81079ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 81079b2:	683b      	ldr	r3, [r7, #0]
 81079b4:	695b      	ldr	r3, [r3, #20]
 81079b6:	4313      	orrs	r3, r2
 81079b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81079ba:	687b      	ldr	r3, [r7, #4]
 81079bc:	68fa      	ldr	r2, [r7, #12]
 81079be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81079c0:	683b      	ldr	r3, [r7, #0]
 81079c2:	689a      	ldr	r2, [r3, #8]
 81079c4:	687b      	ldr	r3, [r7, #4]
 81079c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81079c8:	683b      	ldr	r3, [r7, #0]
 81079ca:	681a      	ldr	r2, [r3, #0]
 81079cc:	687b      	ldr	r3, [r7, #4]
 81079ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81079d0:	687b      	ldr	r3, [r7, #4]
 81079d2:	4a16      	ldr	r2, [pc, #88]	@ (8107a2c <TIM_Base_SetConfig+0x12c>)
 81079d4:	4293      	cmp	r3, r2
 81079d6:	d00f      	beq.n	81079f8 <TIM_Base_SetConfig+0xf8>
 81079d8:	687b      	ldr	r3, [r7, #4]
 81079da:	4a18      	ldr	r2, [pc, #96]	@ (8107a3c <TIM_Base_SetConfig+0x13c>)
 81079dc:	4293      	cmp	r3, r2
 81079de:	d00b      	beq.n	81079f8 <TIM_Base_SetConfig+0xf8>
 81079e0:	687b      	ldr	r3, [r7, #4]
 81079e2:	4a17      	ldr	r2, [pc, #92]	@ (8107a40 <TIM_Base_SetConfig+0x140>)
 81079e4:	4293      	cmp	r3, r2
 81079e6:	d007      	beq.n	81079f8 <TIM_Base_SetConfig+0xf8>
 81079e8:	687b      	ldr	r3, [r7, #4]
 81079ea:	4a16      	ldr	r2, [pc, #88]	@ (8107a44 <TIM_Base_SetConfig+0x144>)
 81079ec:	4293      	cmp	r3, r2
 81079ee:	d003      	beq.n	81079f8 <TIM_Base_SetConfig+0xf8>
 81079f0:	687b      	ldr	r3, [r7, #4]
 81079f2:	4a15      	ldr	r2, [pc, #84]	@ (8107a48 <TIM_Base_SetConfig+0x148>)
 81079f4:	4293      	cmp	r3, r2
 81079f6:	d103      	bne.n	8107a00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81079f8:	683b      	ldr	r3, [r7, #0]
 81079fa:	691a      	ldr	r2, [r3, #16]
 81079fc:	687b      	ldr	r3, [r7, #4]
 81079fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107a00:	687b      	ldr	r3, [r7, #4]
 8107a02:	2201      	movs	r2, #1
 8107a04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8107a06:	687b      	ldr	r3, [r7, #4]
 8107a08:	691b      	ldr	r3, [r3, #16]
 8107a0a:	f003 0301 	and.w	r3, r3, #1
 8107a0e:	2b01      	cmp	r3, #1
 8107a10:	d105      	bne.n	8107a1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8107a12:	687b      	ldr	r3, [r7, #4]
 8107a14:	691b      	ldr	r3, [r3, #16]
 8107a16:	f023 0201 	bic.w	r2, r3, #1
 8107a1a:	687b      	ldr	r3, [r7, #4]
 8107a1c:	611a      	str	r2, [r3, #16]
  }
}
 8107a1e:	bf00      	nop
 8107a20:	3714      	adds	r7, #20
 8107a22:	46bd      	mov	sp, r7
 8107a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a28:	4770      	bx	lr
 8107a2a:	bf00      	nop
 8107a2c:	40010000 	.word	0x40010000
 8107a30:	40000400 	.word	0x40000400
 8107a34:	40000800 	.word	0x40000800
 8107a38:	40000c00 	.word	0x40000c00
 8107a3c:	40010400 	.word	0x40010400
 8107a40:	40014000 	.word	0x40014000
 8107a44:	40014400 	.word	0x40014400
 8107a48:	40014800 	.word	0x40014800

08107a4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107a4c:	b480      	push	{r7}
 8107a4e:	b087      	sub	sp, #28
 8107a50:	af00      	add	r7, sp, #0
 8107a52:	6078      	str	r0, [r7, #4]
 8107a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107a56:	687b      	ldr	r3, [r7, #4]
 8107a58:	6a1b      	ldr	r3, [r3, #32]
 8107a5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8107a5c:	687b      	ldr	r3, [r7, #4]
 8107a5e:	6a1b      	ldr	r3, [r3, #32]
 8107a60:	f023 0201 	bic.w	r2, r3, #1
 8107a64:	687b      	ldr	r3, [r7, #4]
 8107a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107a68:	687b      	ldr	r3, [r7, #4]
 8107a6a:	685b      	ldr	r3, [r3, #4]
 8107a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107a6e:	687b      	ldr	r3, [r7, #4]
 8107a70:	699b      	ldr	r3, [r3, #24]
 8107a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8107a74:	68fb      	ldr	r3, [r7, #12]
 8107a76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8107a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8107a80:	68fb      	ldr	r3, [r7, #12]
 8107a82:	f023 0303 	bic.w	r3, r3, #3
 8107a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107a88:	683b      	ldr	r3, [r7, #0]
 8107a8a:	681b      	ldr	r3, [r3, #0]
 8107a8c:	68fa      	ldr	r2, [r7, #12]
 8107a8e:	4313      	orrs	r3, r2
 8107a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8107a92:	697b      	ldr	r3, [r7, #20]
 8107a94:	f023 0302 	bic.w	r3, r3, #2
 8107a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8107a9a:	683b      	ldr	r3, [r7, #0]
 8107a9c:	689b      	ldr	r3, [r3, #8]
 8107a9e:	697a      	ldr	r2, [r7, #20]
 8107aa0:	4313      	orrs	r3, r2
 8107aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8107aa4:	687b      	ldr	r3, [r7, #4]
 8107aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8107b58 <TIM_OC1_SetConfig+0x10c>)
 8107aa8:	4293      	cmp	r3, r2
 8107aaa:	d00f      	beq.n	8107acc <TIM_OC1_SetConfig+0x80>
 8107aac:	687b      	ldr	r3, [r7, #4]
 8107aae:	4a2b      	ldr	r2, [pc, #172]	@ (8107b5c <TIM_OC1_SetConfig+0x110>)
 8107ab0:	4293      	cmp	r3, r2
 8107ab2:	d00b      	beq.n	8107acc <TIM_OC1_SetConfig+0x80>
 8107ab4:	687b      	ldr	r3, [r7, #4]
 8107ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8107b60 <TIM_OC1_SetConfig+0x114>)
 8107ab8:	4293      	cmp	r3, r2
 8107aba:	d007      	beq.n	8107acc <TIM_OC1_SetConfig+0x80>
 8107abc:	687b      	ldr	r3, [r7, #4]
 8107abe:	4a29      	ldr	r2, [pc, #164]	@ (8107b64 <TIM_OC1_SetConfig+0x118>)
 8107ac0:	4293      	cmp	r3, r2
 8107ac2:	d003      	beq.n	8107acc <TIM_OC1_SetConfig+0x80>
 8107ac4:	687b      	ldr	r3, [r7, #4]
 8107ac6:	4a28      	ldr	r2, [pc, #160]	@ (8107b68 <TIM_OC1_SetConfig+0x11c>)
 8107ac8:	4293      	cmp	r3, r2
 8107aca:	d10c      	bne.n	8107ae6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8107acc:	697b      	ldr	r3, [r7, #20]
 8107ace:	f023 0308 	bic.w	r3, r3, #8
 8107ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8107ad4:	683b      	ldr	r3, [r7, #0]
 8107ad6:	68db      	ldr	r3, [r3, #12]
 8107ad8:	697a      	ldr	r2, [r7, #20]
 8107ada:	4313      	orrs	r3, r2
 8107adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8107ade:	697b      	ldr	r3, [r7, #20]
 8107ae0:	f023 0304 	bic.w	r3, r3, #4
 8107ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107ae6:	687b      	ldr	r3, [r7, #4]
 8107ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8107b58 <TIM_OC1_SetConfig+0x10c>)
 8107aea:	4293      	cmp	r3, r2
 8107aec:	d00f      	beq.n	8107b0e <TIM_OC1_SetConfig+0xc2>
 8107aee:	687b      	ldr	r3, [r7, #4]
 8107af0:	4a1a      	ldr	r2, [pc, #104]	@ (8107b5c <TIM_OC1_SetConfig+0x110>)
 8107af2:	4293      	cmp	r3, r2
 8107af4:	d00b      	beq.n	8107b0e <TIM_OC1_SetConfig+0xc2>
 8107af6:	687b      	ldr	r3, [r7, #4]
 8107af8:	4a19      	ldr	r2, [pc, #100]	@ (8107b60 <TIM_OC1_SetConfig+0x114>)
 8107afa:	4293      	cmp	r3, r2
 8107afc:	d007      	beq.n	8107b0e <TIM_OC1_SetConfig+0xc2>
 8107afe:	687b      	ldr	r3, [r7, #4]
 8107b00:	4a18      	ldr	r2, [pc, #96]	@ (8107b64 <TIM_OC1_SetConfig+0x118>)
 8107b02:	4293      	cmp	r3, r2
 8107b04:	d003      	beq.n	8107b0e <TIM_OC1_SetConfig+0xc2>
 8107b06:	687b      	ldr	r3, [r7, #4]
 8107b08:	4a17      	ldr	r2, [pc, #92]	@ (8107b68 <TIM_OC1_SetConfig+0x11c>)
 8107b0a:	4293      	cmp	r3, r2
 8107b0c:	d111      	bne.n	8107b32 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8107b0e:	693b      	ldr	r3, [r7, #16]
 8107b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8107b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8107b16:	693b      	ldr	r3, [r7, #16]
 8107b18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8107b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8107b1e:	683b      	ldr	r3, [r7, #0]
 8107b20:	695b      	ldr	r3, [r3, #20]
 8107b22:	693a      	ldr	r2, [r7, #16]
 8107b24:	4313      	orrs	r3, r2
 8107b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8107b28:	683b      	ldr	r3, [r7, #0]
 8107b2a:	699b      	ldr	r3, [r3, #24]
 8107b2c:	693a      	ldr	r2, [r7, #16]
 8107b2e:	4313      	orrs	r3, r2
 8107b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107b32:	687b      	ldr	r3, [r7, #4]
 8107b34:	693a      	ldr	r2, [r7, #16]
 8107b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107b38:	687b      	ldr	r3, [r7, #4]
 8107b3a:	68fa      	ldr	r2, [r7, #12]
 8107b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8107b3e:	683b      	ldr	r3, [r7, #0]
 8107b40:	685a      	ldr	r2, [r3, #4]
 8107b42:	687b      	ldr	r3, [r7, #4]
 8107b44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107b46:	687b      	ldr	r3, [r7, #4]
 8107b48:	697a      	ldr	r2, [r7, #20]
 8107b4a:	621a      	str	r2, [r3, #32]
}
 8107b4c:	bf00      	nop
 8107b4e:	371c      	adds	r7, #28
 8107b50:	46bd      	mov	sp, r7
 8107b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b56:	4770      	bx	lr
 8107b58:	40010000 	.word	0x40010000
 8107b5c:	40010400 	.word	0x40010400
 8107b60:	40014000 	.word	0x40014000
 8107b64:	40014400 	.word	0x40014400
 8107b68:	40014800 	.word	0x40014800

08107b6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107b6c:	b480      	push	{r7}
 8107b6e:	b087      	sub	sp, #28
 8107b70:	af00      	add	r7, sp, #0
 8107b72:	6078      	str	r0, [r7, #4]
 8107b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107b76:	687b      	ldr	r3, [r7, #4]
 8107b78:	6a1b      	ldr	r3, [r3, #32]
 8107b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8107b7c:	687b      	ldr	r3, [r7, #4]
 8107b7e:	6a1b      	ldr	r3, [r3, #32]
 8107b80:	f023 0210 	bic.w	r2, r3, #16
 8107b84:	687b      	ldr	r3, [r7, #4]
 8107b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107b88:	687b      	ldr	r3, [r7, #4]
 8107b8a:	685b      	ldr	r3, [r3, #4]
 8107b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107b8e:	687b      	ldr	r3, [r7, #4]
 8107b90:	699b      	ldr	r3, [r3, #24]
 8107b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8107b94:	68fb      	ldr	r3, [r7, #12]
 8107b96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8107b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8107b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8107ba0:	68fb      	ldr	r3, [r7, #12]
 8107ba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8107ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107ba8:	683b      	ldr	r3, [r7, #0]
 8107baa:	681b      	ldr	r3, [r3, #0]
 8107bac:	021b      	lsls	r3, r3, #8
 8107bae:	68fa      	ldr	r2, [r7, #12]
 8107bb0:	4313      	orrs	r3, r2
 8107bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8107bb4:	697b      	ldr	r3, [r7, #20]
 8107bb6:	f023 0320 	bic.w	r3, r3, #32
 8107bba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8107bbc:	683b      	ldr	r3, [r7, #0]
 8107bbe:	689b      	ldr	r3, [r3, #8]
 8107bc0:	011b      	lsls	r3, r3, #4
 8107bc2:	697a      	ldr	r2, [r7, #20]
 8107bc4:	4313      	orrs	r3, r2
 8107bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8107bc8:	687b      	ldr	r3, [r7, #4]
 8107bca:	4a28      	ldr	r2, [pc, #160]	@ (8107c6c <TIM_OC2_SetConfig+0x100>)
 8107bcc:	4293      	cmp	r3, r2
 8107bce:	d003      	beq.n	8107bd8 <TIM_OC2_SetConfig+0x6c>
 8107bd0:	687b      	ldr	r3, [r7, #4]
 8107bd2:	4a27      	ldr	r2, [pc, #156]	@ (8107c70 <TIM_OC2_SetConfig+0x104>)
 8107bd4:	4293      	cmp	r3, r2
 8107bd6:	d10d      	bne.n	8107bf4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8107bd8:	697b      	ldr	r3, [r7, #20]
 8107bda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8107bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8107be0:	683b      	ldr	r3, [r7, #0]
 8107be2:	68db      	ldr	r3, [r3, #12]
 8107be4:	011b      	lsls	r3, r3, #4
 8107be6:	697a      	ldr	r2, [r7, #20]
 8107be8:	4313      	orrs	r3, r2
 8107bea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8107bec:	697b      	ldr	r3, [r7, #20]
 8107bee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8107bf2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107bf4:	687b      	ldr	r3, [r7, #4]
 8107bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8107c6c <TIM_OC2_SetConfig+0x100>)
 8107bf8:	4293      	cmp	r3, r2
 8107bfa:	d00f      	beq.n	8107c1c <TIM_OC2_SetConfig+0xb0>
 8107bfc:	687b      	ldr	r3, [r7, #4]
 8107bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8107c70 <TIM_OC2_SetConfig+0x104>)
 8107c00:	4293      	cmp	r3, r2
 8107c02:	d00b      	beq.n	8107c1c <TIM_OC2_SetConfig+0xb0>
 8107c04:	687b      	ldr	r3, [r7, #4]
 8107c06:	4a1b      	ldr	r2, [pc, #108]	@ (8107c74 <TIM_OC2_SetConfig+0x108>)
 8107c08:	4293      	cmp	r3, r2
 8107c0a:	d007      	beq.n	8107c1c <TIM_OC2_SetConfig+0xb0>
 8107c0c:	687b      	ldr	r3, [r7, #4]
 8107c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8107c78 <TIM_OC2_SetConfig+0x10c>)
 8107c10:	4293      	cmp	r3, r2
 8107c12:	d003      	beq.n	8107c1c <TIM_OC2_SetConfig+0xb0>
 8107c14:	687b      	ldr	r3, [r7, #4]
 8107c16:	4a19      	ldr	r2, [pc, #100]	@ (8107c7c <TIM_OC2_SetConfig+0x110>)
 8107c18:	4293      	cmp	r3, r2
 8107c1a:	d113      	bne.n	8107c44 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8107c1c:	693b      	ldr	r3, [r7, #16]
 8107c1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8107c22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8107c24:	693b      	ldr	r3, [r7, #16]
 8107c26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8107c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8107c2c:	683b      	ldr	r3, [r7, #0]
 8107c2e:	695b      	ldr	r3, [r3, #20]
 8107c30:	009b      	lsls	r3, r3, #2
 8107c32:	693a      	ldr	r2, [r7, #16]
 8107c34:	4313      	orrs	r3, r2
 8107c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8107c38:	683b      	ldr	r3, [r7, #0]
 8107c3a:	699b      	ldr	r3, [r3, #24]
 8107c3c:	009b      	lsls	r3, r3, #2
 8107c3e:	693a      	ldr	r2, [r7, #16]
 8107c40:	4313      	orrs	r3, r2
 8107c42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107c44:	687b      	ldr	r3, [r7, #4]
 8107c46:	693a      	ldr	r2, [r7, #16]
 8107c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107c4a:	687b      	ldr	r3, [r7, #4]
 8107c4c:	68fa      	ldr	r2, [r7, #12]
 8107c4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8107c50:	683b      	ldr	r3, [r7, #0]
 8107c52:	685a      	ldr	r2, [r3, #4]
 8107c54:	687b      	ldr	r3, [r7, #4]
 8107c56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107c58:	687b      	ldr	r3, [r7, #4]
 8107c5a:	697a      	ldr	r2, [r7, #20]
 8107c5c:	621a      	str	r2, [r3, #32]
}
 8107c5e:	bf00      	nop
 8107c60:	371c      	adds	r7, #28
 8107c62:	46bd      	mov	sp, r7
 8107c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c68:	4770      	bx	lr
 8107c6a:	bf00      	nop
 8107c6c:	40010000 	.word	0x40010000
 8107c70:	40010400 	.word	0x40010400
 8107c74:	40014000 	.word	0x40014000
 8107c78:	40014400 	.word	0x40014400
 8107c7c:	40014800 	.word	0x40014800

08107c80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107c80:	b480      	push	{r7}
 8107c82:	b087      	sub	sp, #28
 8107c84:	af00      	add	r7, sp, #0
 8107c86:	6078      	str	r0, [r7, #4]
 8107c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107c8a:	687b      	ldr	r3, [r7, #4]
 8107c8c:	6a1b      	ldr	r3, [r3, #32]
 8107c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8107c90:	687b      	ldr	r3, [r7, #4]
 8107c92:	6a1b      	ldr	r3, [r3, #32]
 8107c94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8107c98:	687b      	ldr	r3, [r7, #4]
 8107c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	685b      	ldr	r3, [r3, #4]
 8107ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107ca2:	687b      	ldr	r3, [r7, #4]
 8107ca4:	69db      	ldr	r3, [r3, #28]
 8107ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8107ca8:	68fb      	ldr	r3, [r7, #12]
 8107caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8107cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8107cb4:	68fb      	ldr	r3, [r7, #12]
 8107cb6:	f023 0303 	bic.w	r3, r3, #3
 8107cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107cbc:	683b      	ldr	r3, [r7, #0]
 8107cbe:	681b      	ldr	r3, [r3, #0]
 8107cc0:	68fa      	ldr	r2, [r7, #12]
 8107cc2:	4313      	orrs	r3, r2
 8107cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8107cc6:	697b      	ldr	r3, [r7, #20]
 8107cc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8107ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8107cce:	683b      	ldr	r3, [r7, #0]
 8107cd0:	689b      	ldr	r3, [r3, #8]
 8107cd2:	021b      	lsls	r3, r3, #8
 8107cd4:	697a      	ldr	r2, [r7, #20]
 8107cd6:	4313      	orrs	r3, r2
 8107cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8107cda:	687b      	ldr	r3, [r7, #4]
 8107cdc:	4a27      	ldr	r2, [pc, #156]	@ (8107d7c <TIM_OC3_SetConfig+0xfc>)
 8107cde:	4293      	cmp	r3, r2
 8107ce0:	d003      	beq.n	8107cea <TIM_OC3_SetConfig+0x6a>
 8107ce2:	687b      	ldr	r3, [r7, #4]
 8107ce4:	4a26      	ldr	r2, [pc, #152]	@ (8107d80 <TIM_OC3_SetConfig+0x100>)
 8107ce6:	4293      	cmp	r3, r2
 8107ce8:	d10d      	bne.n	8107d06 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8107cea:	697b      	ldr	r3, [r7, #20]
 8107cec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8107cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8107cf2:	683b      	ldr	r3, [r7, #0]
 8107cf4:	68db      	ldr	r3, [r3, #12]
 8107cf6:	021b      	lsls	r3, r3, #8
 8107cf8:	697a      	ldr	r2, [r7, #20]
 8107cfa:	4313      	orrs	r3, r2
 8107cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8107cfe:	697b      	ldr	r3, [r7, #20]
 8107d00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8107d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107d06:	687b      	ldr	r3, [r7, #4]
 8107d08:	4a1c      	ldr	r2, [pc, #112]	@ (8107d7c <TIM_OC3_SetConfig+0xfc>)
 8107d0a:	4293      	cmp	r3, r2
 8107d0c:	d00f      	beq.n	8107d2e <TIM_OC3_SetConfig+0xae>
 8107d0e:	687b      	ldr	r3, [r7, #4]
 8107d10:	4a1b      	ldr	r2, [pc, #108]	@ (8107d80 <TIM_OC3_SetConfig+0x100>)
 8107d12:	4293      	cmp	r3, r2
 8107d14:	d00b      	beq.n	8107d2e <TIM_OC3_SetConfig+0xae>
 8107d16:	687b      	ldr	r3, [r7, #4]
 8107d18:	4a1a      	ldr	r2, [pc, #104]	@ (8107d84 <TIM_OC3_SetConfig+0x104>)
 8107d1a:	4293      	cmp	r3, r2
 8107d1c:	d007      	beq.n	8107d2e <TIM_OC3_SetConfig+0xae>
 8107d1e:	687b      	ldr	r3, [r7, #4]
 8107d20:	4a19      	ldr	r2, [pc, #100]	@ (8107d88 <TIM_OC3_SetConfig+0x108>)
 8107d22:	4293      	cmp	r3, r2
 8107d24:	d003      	beq.n	8107d2e <TIM_OC3_SetConfig+0xae>
 8107d26:	687b      	ldr	r3, [r7, #4]
 8107d28:	4a18      	ldr	r2, [pc, #96]	@ (8107d8c <TIM_OC3_SetConfig+0x10c>)
 8107d2a:	4293      	cmp	r3, r2
 8107d2c:	d113      	bne.n	8107d56 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8107d2e:	693b      	ldr	r3, [r7, #16]
 8107d30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8107d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8107d36:	693b      	ldr	r3, [r7, #16]
 8107d38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8107d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8107d3e:	683b      	ldr	r3, [r7, #0]
 8107d40:	695b      	ldr	r3, [r3, #20]
 8107d42:	011b      	lsls	r3, r3, #4
 8107d44:	693a      	ldr	r2, [r7, #16]
 8107d46:	4313      	orrs	r3, r2
 8107d48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8107d4a:	683b      	ldr	r3, [r7, #0]
 8107d4c:	699b      	ldr	r3, [r3, #24]
 8107d4e:	011b      	lsls	r3, r3, #4
 8107d50:	693a      	ldr	r2, [r7, #16]
 8107d52:	4313      	orrs	r3, r2
 8107d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107d56:	687b      	ldr	r3, [r7, #4]
 8107d58:	693a      	ldr	r2, [r7, #16]
 8107d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107d5c:	687b      	ldr	r3, [r7, #4]
 8107d5e:	68fa      	ldr	r2, [r7, #12]
 8107d60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8107d62:	683b      	ldr	r3, [r7, #0]
 8107d64:	685a      	ldr	r2, [r3, #4]
 8107d66:	687b      	ldr	r3, [r7, #4]
 8107d68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107d6a:	687b      	ldr	r3, [r7, #4]
 8107d6c:	697a      	ldr	r2, [r7, #20]
 8107d6e:	621a      	str	r2, [r3, #32]
}
 8107d70:	bf00      	nop
 8107d72:	371c      	adds	r7, #28
 8107d74:	46bd      	mov	sp, r7
 8107d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d7a:	4770      	bx	lr
 8107d7c:	40010000 	.word	0x40010000
 8107d80:	40010400 	.word	0x40010400
 8107d84:	40014000 	.word	0x40014000
 8107d88:	40014400 	.word	0x40014400
 8107d8c:	40014800 	.word	0x40014800

08107d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107d90:	b480      	push	{r7}
 8107d92:	b087      	sub	sp, #28
 8107d94:	af00      	add	r7, sp, #0
 8107d96:	6078      	str	r0, [r7, #4]
 8107d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107d9a:	687b      	ldr	r3, [r7, #4]
 8107d9c:	6a1b      	ldr	r3, [r3, #32]
 8107d9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8107da0:	687b      	ldr	r3, [r7, #4]
 8107da2:	6a1b      	ldr	r3, [r3, #32]
 8107da4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8107da8:	687b      	ldr	r3, [r7, #4]
 8107daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107dac:	687b      	ldr	r3, [r7, #4]
 8107dae:	685b      	ldr	r3, [r3, #4]
 8107db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107db2:	687b      	ldr	r3, [r7, #4]
 8107db4:	69db      	ldr	r3, [r3, #28]
 8107db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8107db8:	68fb      	ldr	r3, [r7, #12]
 8107dba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8107dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8107dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8107dc4:	68fb      	ldr	r3, [r7, #12]
 8107dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8107dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107dcc:	683b      	ldr	r3, [r7, #0]
 8107dce:	681b      	ldr	r3, [r3, #0]
 8107dd0:	021b      	lsls	r3, r3, #8
 8107dd2:	68fa      	ldr	r2, [r7, #12]
 8107dd4:	4313      	orrs	r3, r2
 8107dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8107dd8:	693b      	ldr	r3, [r7, #16]
 8107dda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8107dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8107de0:	683b      	ldr	r3, [r7, #0]
 8107de2:	689b      	ldr	r3, [r3, #8]
 8107de4:	031b      	lsls	r3, r3, #12
 8107de6:	693a      	ldr	r2, [r7, #16]
 8107de8:	4313      	orrs	r3, r2
 8107dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107dec:	687b      	ldr	r3, [r7, #4]
 8107dee:	4a18      	ldr	r2, [pc, #96]	@ (8107e50 <TIM_OC4_SetConfig+0xc0>)
 8107df0:	4293      	cmp	r3, r2
 8107df2:	d00f      	beq.n	8107e14 <TIM_OC4_SetConfig+0x84>
 8107df4:	687b      	ldr	r3, [r7, #4]
 8107df6:	4a17      	ldr	r2, [pc, #92]	@ (8107e54 <TIM_OC4_SetConfig+0xc4>)
 8107df8:	4293      	cmp	r3, r2
 8107dfa:	d00b      	beq.n	8107e14 <TIM_OC4_SetConfig+0x84>
 8107dfc:	687b      	ldr	r3, [r7, #4]
 8107dfe:	4a16      	ldr	r2, [pc, #88]	@ (8107e58 <TIM_OC4_SetConfig+0xc8>)
 8107e00:	4293      	cmp	r3, r2
 8107e02:	d007      	beq.n	8107e14 <TIM_OC4_SetConfig+0x84>
 8107e04:	687b      	ldr	r3, [r7, #4]
 8107e06:	4a15      	ldr	r2, [pc, #84]	@ (8107e5c <TIM_OC4_SetConfig+0xcc>)
 8107e08:	4293      	cmp	r3, r2
 8107e0a:	d003      	beq.n	8107e14 <TIM_OC4_SetConfig+0x84>
 8107e0c:	687b      	ldr	r3, [r7, #4]
 8107e0e:	4a14      	ldr	r2, [pc, #80]	@ (8107e60 <TIM_OC4_SetConfig+0xd0>)
 8107e10:	4293      	cmp	r3, r2
 8107e12:	d109      	bne.n	8107e28 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8107e14:	697b      	ldr	r3, [r7, #20]
 8107e16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8107e1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8107e1c:	683b      	ldr	r3, [r7, #0]
 8107e1e:	695b      	ldr	r3, [r3, #20]
 8107e20:	019b      	lsls	r3, r3, #6
 8107e22:	697a      	ldr	r2, [r7, #20]
 8107e24:	4313      	orrs	r3, r2
 8107e26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107e28:	687b      	ldr	r3, [r7, #4]
 8107e2a:	697a      	ldr	r2, [r7, #20]
 8107e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107e2e:	687b      	ldr	r3, [r7, #4]
 8107e30:	68fa      	ldr	r2, [r7, #12]
 8107e32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8107e34:	683b      	ldr	r3, [r7, #0]
 8107e36:	685a      	ldr	r2, [r3, #4]
 8107e38:	687b      	ldr	r3, [r7, #4]
 8107e3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107e3c:	687b      	ldr	r3, [r7, #4]
 8107e3e:	693a      	ldr	r2, [r7, #16]
 8107e40:	621a      	str	r2, [r3, #32]
}
 8107e42:	bf00      	nop
 8107e44:	371c      	adds	r7, #28
 8107e46:	46bd      	mov	sp, r7
 8107e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e4c:	4770      	bx	lr
 8107e4e:	bf00      	nop
 8107e50:	40010000 	.word	0x40010000
 8107e54:	40010400 	.word	0x40010400
 8107e58:	40014000 	.word	0x40014000
 8107e5c:	40014400 	.word	0x40014400
 8107e60:	40014800 	.word	0x40014800

08107e64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107e64:	b480      	push	{r7}
 8107e66:	b087      	sub	sp, #28
 8107e68:	af00      	add	r7, sp, #0
 8107e6a:	6078      	str	r0, [r7, #4]
 8107e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107e6e:	687b      	ldr	r3, [r7, #4]
 8107e70:	6a1b      	ldr	r3, [r3, #32]
 8107e72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8107e74:	687b      	ldr	r3, [r7, #4]
 8107e76:	6a1b      	ldr	r3, [r3, #32]
 8107e78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8107e7c:	687b      	ldr	r3, [r7, #4]
 8107e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107e80:	687b      	ldr	r3, [r7, #4]
 8107e82:	685b      	ldr	r3, [r3, #4]
 8107e84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107e86:	687b      	ldr	r3, [r7, #4]
 8107e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8107e8c:	68fb      	ldr	r3, [r7, #12]
 8107e8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8107e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107e98:	683b      	ldr	r3, [r7, #0]
 8107e9a:	681b      	ldr	r3, [r3, #0]
 8107e9c:	68fa      	ldr	r2, [r7, #12]
 8107e9e:	4313      	orrs	r3, r2
 8107ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8107ea2:	693b      	ldr	r3, [r7, #16]
 8107ea4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8107ea8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8107eaa:	683b      	ldr	r3, [r7, #0]
 8107eac:	689b      	ldr	r3, [r3, #8]
 8107eae:	041b      	lsls	r3, r3, #16
 8107eb0:	693a      	ldr	r2, [r7, #16]
 8107eb2:	4313      	orrs	r3, r2
 8107eb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107eb6:	687b      	ldr	r3, [r7, #4]
 8107eb8:	4a17      	ldr	r2, [pc, #92]	@ (8107f18 <TIM_OC5_SetConfig+0xb4>)
 8107eba:	4293      	cmp	r3, r2
 8107ebc:	d00f      	beq.n	8107ede <TIM_OC5_SetConfig+0x7a>
 8107ebe:	687b      	ldr	r3, [r7, #4]
 8107ec0:	4a16      	ldr	r2, [pc, #88]	@ (8107f1c <TIM_OC5_SetConfig+0xb8>)
 8107ec2:	4293      	cmp	r3, r2
 8107ec4:	d00b      	beq.n	8107ede <TIM_OC5_SetConfig+0x7a>
 8107ec6:	687b      	ldr	r3, [r7, #4]
 8107ec8:	4a15      	ldr	r2, [pc, #84]	@ (8107f20 <TIM_OC5_SetConfig+0xbc>)
 8107eca:	4293      	cmp	r3, r2
 8107ecc:	d007      	beq.n	8107ede <TIM_OC5_SetConfig+0x7a>
 8107ece:	687b      	ldr	r3, [r7, #4]
 8107ed0:	4a14      	ldr	r2, [pc, #80]	@ (8107f24 <TIM_OC5_SetConfig+0xc0>)
 8107ed2:	4293      	cmp	r3, r2
 8107ed4:	d003      	beq.n	8107ede <TIM_OC5_SetConfig+0x7a>
 8107ed6:	687b      	ldr	r3, [r7, #4]
 8107ed8:	4a13      	ldr	r2, [pc, #76]	@ (8107f28 <TIM_OC5_SetConfig+0xc4>)
 8107eda:	4293      	cmp	r3, r2
 8107edc:	d109      	bne.n	8107ef2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8107ede:	697b      	ldr	r3, [r7, #20]
 8107ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8107ee6:	683b      	ldr	r3, [r7, #0]
 8107ee8:	695b      	ldr	r3, [r3, #20]
 8107eea:	021b      	lsls	r3, r3, #8
 8107eec:	697a      	ldr	r2, [r7, #20]
 8107eee:	4313      	orrs	r3, r2
 8107ef0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107ef2:	687b      	ldr	r3, [r7, #4]
 8107ef4:	697a      	ldr	r2, [r7, #20]
 8107ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107ef8:	687b      	ldr	r3, [r7, #4]
 8107efa:	68fa      	ldr	r2, [r7, #12]
 8107efc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8107efe:	683b      	ldr	r3, [r7, #0]
 8107f00:	685a      	ldr	r2, [r3, #4]
 8107f02:	687b      	ldr	r3, [r7, #4]
 8107f04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107f06:	687b      	ldr	r3, [r7, #4]
 8107f08:	693a      	ldr	r2, [r7, #16]
 8107f0a:	621a      	str	r2, [r3, #32]
}
 8107f0c:	bf00      	nop
 8107f0e:	371c      	adds	r7, #28
 8107f10:	46bd      	mov	sp, r7
 8107f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f16:	4770      	bx	lr
 8107f18:	40010000 	.word	0x40010000
 8107f1c:	40010400 	.word	0x40010400
 8107f20:	40014000 	.word	0x40014000
 8107f24:	40014400 	.word	0x40014400
 8107f28:	40014800 	.word	0x40014800

08107f2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107f2c:	b480      	push	{r7}
 8107f2e:	b087      	sub	sp, #28
 8107f30:	af00      	add	r7, sp, #0
 8107f32:	6078      	str	r0, [r7, #4]
 8107f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107f36:	687b      	ldr	r3, [r7, #4]
 8107f38:	6a1b      	ldr	r3, [r3, #32]
 8107f3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8107f3c:	687b      	ldr	r3, [r7, #4]
 8107f3e:	6a1b      	ldr	r3, [r3, #32]
 8107f40:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8107f44:	687b      	ldr	r3, [r7, #4]
 8107f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107f48:	687b      	ldr	r3, [r7, #4]
 8107f4a:	685b      	ldr	r3, [r3, #4]
 8107f4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107f4e:	687b      	ldr	r3, [r7, #4]
 8107f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8107f54:	68fb      	ldr	r3, [r7, #12]
 8107f56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8107f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8107f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107f60:	683b      	ldr	r3, [r7, #0]
 8107f62:	681b      	ldr	r3, [r3, #0]
 8107f64:	021b      	lsls	r3, r3, #8
 8107f66:	68fa      	ldr	r2, [r7, #12]
 8107f68:	4313      	orrs	r3, r2
 8107f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8107f6c:	693b      	ldr	r3, [r7, #16]
 8107f6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8107f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8107f74:	683b      	ldr	r3, [r7, #0]
 8107f76:	689b      	ldr	r3, [r3, #8]
 8107f78:	051b      	lsls	r3, r3, #20
 8107f7a:	693a      	ldr	r2, [r7, #16]
 8107f7c:	4313      	orrs	r3, r2
 8107f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107f80:	687b      	ldr	r3, [r7, #4]
 8107f82:	4a18      	ldr	r2, [pc, #96]	@ (8107fe4 <TIM_OC6_SetConfig+0xb8>)
 8107f84:	4293      	cmp	r3, r2
 8107f86:	d00f      	beq.n	8107fa8 <TIM_OC6_SetConfig+0x7c>
 8107f88:	687b      	ldr	r3, [r7, #4]
 8107f8a:	4a17      	ldr	r2, [pc, #92]	@ (8107fe8 <TIM_OC6_SetConfig+0xbc>)
 8107f8c:	4293      	cmp	r3, r2
 8107f8e:	d00b      	beq.n	8107fa8 <TIM_OC6_SetConfig+0x7c>
 8107f90:	687b      	ldr	r3, [r7, #4]
 8107f92:	4a16      	ldr	r2, [pc, #88]	@ (8107fec <TIM_OC6_SetConfig+0xc0>)
 8107f94:	4293      	cmp	r3, r2
 8107f96:	d007      	beq.n	8107fa8 <TIM_OC6_SetConfig+0x7c>
 8107f98:	687b      	ldr	r3, [r7, #4]
 8107f9a:	4a15      	ldr	r2, [pc, #84]	@ (8107ff0 <TIM_OC6_SetConfig+0xc4>)
 8107f9c:	4293      	cmp	r3, r2
 8107f9e:	d003      	beq.n	8107fa8 <TIM_OC6_SetConfig+0x7c>
 8107fa0:	687b      	ldr	r3, [r7, #4]
 8107fa2:	4a14      	ldr	r2, [pc, #80]	@ (8107ff4 <TIM_OC6_SetConfig+0xc8>)
 8107fa4:	4293      	cmp	r3, r2
 8107fa6:	d109      	bne.n	8107fbc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8107fa8:	697b      	ldr	r3, [r7, #20]
 8107faa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8107fae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8107fb0:	683b      	ldr	r3, [r7, #0]
 8107fb2:	695b      	ldr	r3, [r3, #20]
 8107fb4:	029b      	lsls	r3, r3, #10
 8107fb6:	697a      	ldr	r2, [r7, #20]
 8107fb8:	4313      	orrs	r3, r2
 8107fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107fbc:	687b      	ldr	r3, [r7, #4]
 8107fbe:	697a      	ldr	r2, [r7, #20]
 8107fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107fc2:	687b      	ldr	r3, [r7, #4]
 8107fc4:	68fa      	ldr	r2, [r7, #12]
 8107fc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8107fc8:	683b      	ldr	r3, [r7, #0]
 8107fca:	685a      	ldr	r2, [r3, #4]
 8107fcc:	687b      	ldr	r3, [r7, #4]
 8107fce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107fd0:	687b      	ldr	r3, [r7, #4]
 8107fd2:	693a      	ldr	r2, [r7, #16]
 8107fd4:	621a      	str	r2, [r3, #32]
}
 8107fd6:	bf00      	nop
 8107fd8:	371c      	adds	r7, #28
 8107fda:	46bd      	mov	sp, r7
 8107fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fe0:	4770      	bx	lr
 8107fe2:	bf00      	nop
 8107fe4:	40010000 	.word	0x40010000
 8107fe8:	40010400 	.word	0x40010400
 8107fec:	40014000 	.word	0x40014000
 8107ff0:	40014400 	.word	0x40014400
 8107ff4:	40014800 	.word	0x40014800

08107ff8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8107ff8:	b480      	push	{r7}
 8107ffa:	b087      	sub	sp, #28
 8107ffc:	af00      	add	r7, sp, #0
 8107ffe:	60f8      	str	r0, [r7, #12]
 8108000:	60b9      	str	r1, [r7, #8]
 8108002:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8108004:	68bb      	ldr	r3, [r7, #8]
 8108006:	f003 031f 	and.w	r3, r3, #31
 810800a:	2201      	movs	r2, #1
 810800c:	fa02 f303 	lsl.w	r3, r2, r3
 8108010:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8108012:	68fb      	ldr	r3, [r7, #12]
 8108014:	6a1a      	ldr	r2, [r3, #32]
 8108016:	697b      	ldr	r3, [r7, #20]
 8108018:	43db      	mvns	r3, r3
 810801a:	401a      	ands	r2, r3
 810801c:	68fb      	ldr	r3, [r7, #12]
 810801e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8108020:	68fb      	ldr	r3, [r7, #12]
 8108022:	6a1a      	ldr	r2, [r3, #32]
 8108024:	68bb      	ldr	r3, [r7, #8]
 8108026:	f003 031f 	and.w	r3, r3, #31
 810802a:	6879      	ldr	r1, [r7, #4]
 810802c:	fa01 f303 	lsl.w	r3, r1, r3
 8108030:	431a      	orrs	r2, r3
 8108032:	68fb      	ldr	r3, [r7, #12]
 8108034:	621a      	str	r2, [r3, #32]
}
 8108036:	bf00      	nop
 8108038:	371c      	adds	r7, #28
 810803a:	46bd      	mov	sp, r7
 810803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108040:	4770      	bx	lr
	...

08108044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8108044:	b480      	push	{r7}
 8108046:	b085      	sub	sp, #20
 8108048:	af00      	add	r7, sp, #0
 810804a:	6078      	str	r0, [r7, #4]
 810804c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810804e:	687b      	ldr	r3, [r7, #4]
 8108050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8108054:	2b01      	cmp	r3, #1
 8108056:	d101      	bne.n	810805c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8108058:	2302      	movs	r3, #2
 810805a:	e06d      	b.n	8108138 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810805c:	687b      	ldr	r3, [r7, #4]
 810805e:	2201      	movs	r2, #1
 8108060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108064:	687b      	ldr	r3, [r7, #4]
 8108066:	2202      	movs	r2, #2
 8108068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810806c:	687b      	ldr	r3, [r7, #4]
 810806e:	681b      	ldr	r3, [r3, #0]
 8108070:	685b      	ldr	r3, [r3, #4]
 8108072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8108074:	687b      	ldr	r3, [r7, #4]
 8108076:	681b      	ldr	r3, [r3, #0]
 8108078:	689b      	ldr	r3, [r3, #8]
 810807a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810807c:	687b      	ldr	r3, [r7, #4]
 810807e:	681b      	ldr	r3, [r3, #0]
 8108080:	4a30      	ldr	r2, [pc, #192]	@ (8108144 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8108082:	4293      	cmp	r3, r2
 8108084:	d004      	beq.n	8108090 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8108086:	687b      	ldr	r3, [r7, #4]
 8108088:	681b      	ldr	r3, [r3, #0]
 810808a:	4a2f      	ldr	r2, [pc, #188]	@ (8108148 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810808c:	4293      	cmp	r3, r2
 810808e:	d108      	bne.n	81080a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8108090:	68fb      	ldr	r3, [r7, #12]
 8108092:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8108096:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8108098:	683b      	ldr	r3, [r7, #0]
 810809a:	685b      	ldr	r3, [r3, #4]
 810809c:	68fa      	ldr	r2, [r7, #12]
 810809e:	4313      	orrs	r3, r2
 81080a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81080a2:	68fb      	ldr	r3, [r7, #12]
 81080a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 81080a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81080aa:	683b      	ldr	r3, [r7, #0]
 81080ac:	681b      	ldr	r3, [r3, #0]
 81080ae:	68fa      	ldr	r2, [r7, #12]
 81080b0:	4313      	orrs	r3, r2
 81080b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81080b4:	687b      	ldr	r3, [r7, #4]
 81080b6:	681b      	ldr	r3, [r3, #0]
 81080b8:	68fa      	ldr	r2, [r7, #12]
 81080ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81080bc:	687b      	ldr	r3, [r7, #4]
 81080be:	681b      	ldr	r3, [r3, #0]
 81080c0:	4a20      	ldr	r2, [pc, #128]	@ (8108144 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81080c2:	4293      	cmp	r3, r2
 81080c4:	d022      	beq.n	810810c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81080c6:	687b      	ldr	r3, [r7, #4]
 81080c8:	681b      	ldr	r3, [r3, #0]
 81080ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81080ce:	d01d      	beq.n	810810c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81080d0:	687b      	ldr	r3, [r7, #4]
 81080d2:	681b      	ldr	r3, [r3, #0]
 81080d4:	4a1d      	ldr	r2, [pc, #116]	@ (810814c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81080d6:	4293      	cmp	r3, r2
 81080d8:	d018      	beq.n	810810c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81080da:	687b      	ldr	r3, [r7, #4]
 81080dc:	681b      	ldr	r3, [r3, #0]
 81080de:	4a1c      	ldr	r2, [pc, #112]	@ (8108150 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81080e0:	4293      	cmp	r3, r2
 81080e2:	d013      	beq.n	810810c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81080e4:	687b      	ldr	r3, [r7, #4]
 81080e6:	681b      	ldr	r3, [r3, #0]
 81080e8:	4a1a      	ldr	r2, [pc, #104]	@ (8108154 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81080ea:	4293      	cmp	r3, r2
 81080ec:	d00e      	beq.n	810810c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81080ee:	687b      	ldr	r3, [r7, #4]
 81080f0:	681b      	ldr	r3, [r3, #0]
 81080f2:	4a15      	ldr	r2, [pc, #84]	@ (8108148 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81080f4:	4293      	cmp	r3, r2
 81080f6:	d009      	beq.n	810810c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81080f8:	687b      	ldr	r3, [r7, #4]
 81080fa:	681b      	ldr	r3, [r3, #0]
 81080fc:	4a16      	ldr	r2, [pc, #88]	@ (8108158 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 81080fe:	4293      	cmp	r3, r2
 8108100:	d004      	beq.n	810810c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108102:	687b      	ldr	r3, [r7, #4]
 8108104:	681b      	ldr	r3, [r3, #0]
 8108106:	4a15      	ldr	r2, [pc, #84]	@ (810815c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8108108:	4293      	cmp	r3, r2
 810810a:	d10c      	bne.n	8108126 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810810c:	68bb      	ldr	r3, [r7, #8]
 810810e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8108112:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8108114:	683b      	ldr	r3, [r7, #0]
 8108116:	689b      	ldr	r3, [r3, #8]
 8108118:	68ba      	ldr	r2, [r7, #8]
 810811a:	4313      	orrs	r3, r2
 810811c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810811e:	687b      	ldr	r3, [r7, #4]
 8108120:	681b      	ldr	r3, [r3, #0]
 8108122:	68ba      	ldr	r2, [r7, #8]
 8108124:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8108126:	687b      	ldr	r3, [r7, #4]
 8108128:	2201      	movs	r2, #1
 810812a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810812e:	687b      	ldr	r3, [r7, #4]
 8108130:	2200      	movs	r2, #0
 8108132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8108136:	2300      	movs	r3, #0
}
 8108138:	4618      	mov	r0, r3
 810813a:	3714      	adds	r7, #20
 810813c:	46bd      	mov	sp, r7
 810813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108142:	4770      	bx	lr
 8108144:	40010000 	.word	0x40010000
 8108148:	40010400 	.word	0x40010400
 810814c:	40000400 	.word	0x40000400
 8108150:	40000800 	.word	0x40000800
 8108154:	40000c00 	.word	0x40000c00
 8108158:	40001800 	.word	0x40001800
 810815c:	40014000 	.word	0x40014000

08108160 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8108160:	b480      	push	{r7}
 8108162:	b085      	sub	sp, #20
 8108164:	af00      	add	r7, sp, #0
 8108166:	6078      	str	r0, [r7, #4]
 8108168:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810816a:	2300      	movs	r3, #0
 810816c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 810816e:	687b      	ldr	r3, [r7, #4]
 8108170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8108174:	2b01      	cmp	r3, #1
 8108176:	d101      	bne.n	810817c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8108178:	2302      	movs	r3, #2
 810817a:	e065      	b.n	8108248 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810817c:	687b      	ldr	r3, [r7, #4]
 810817e:	2201      	movs	r2, #1
 8108180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8108184:	68fb      	ldr	r3, [r7, #12]
 8108186:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810818a:	683b      	ldr	r3, [r7, #0]
 810818c:	68db      	ldr	r3, [r3, #12]
 810818e:	4313      	orrs	r3, r2
 8108190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8108192:	68fb      	ldr	r3, [r7, #12]
 8108194:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8108198:	683b      	ldr	r3, [r7, #0]
 810819a:	689b      	ldr	r3, [r3, #8]
 810819c:	4313      	orrs	r3, r2
 810819e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 81081a0:	68fb      	ldr	r3, [r7, #12]
 81081a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 81081a6:	683b      	ldr	r3, [r7, #0]
 81081a8:	685b      	ldr	r3, [r3, #4]
 81081aa:	4313      	orrs	r3, r2
 81081ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 81081ae:	68fb      	ldr	r3, [r7, #12]
 81081b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 81081b4:	683b      	ldr	r3, [r7, #0]
 81081b6:	681b      	ldr	r3, [r3, #0]
 81081b8:	4313      	orrs	r3, r2
 81081ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 81081bc:	68fb      	ldr	r3, [r7, #12]
 81081be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 81081c2:	683b      	ldr	r3, [r7, #0]
 81081c4:	691b      	ldr	r3, [r3, #16]
 81081c6:	4313      	orrs	r3, r2
 81081c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 81081ca:	68fb      	ldr	r3, [r7, #12]
 81081cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 81081d0:	683b      	ldr	r3, [r7, #0]
 81081d2:	695b      	ldr	r3, [r3, #20]
 81081d4:	4313      	orrs	r3, r2
 81081d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 81081d8:	68fb      	ldr	r3, [r7, #12]
 81081da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 81081de:	683b      	ldr	r3, [r7, #0]
 81081e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81081e2:	4313      	orrs	r3, r2
 81081e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 81081e6:	68fb      	ldr	r3, [r7, #12]
 81081e8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 81081ec:	683b      	ldr	r3, [r7, #0]
 81081ee:	699b      	ldr	r3, [r3, #24]
 81081f0:	041b      	lsls	r3, r3, #16
 81081f2:	4313      	orrs	r3, r2
 81081f4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 81081f6:	687b      	ldr	r3, [r7, #4]
 81081f8:	681b      	ldr	r3, [r3, #0]
 81081fa:	4a16      	ldr	r2, [pc, #88]	@ (8108254 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 81081fc:	4293      	cmp	r3, r2
 81081fe:	d004      	beq.n	810820a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8108200:	687b      	ldr	r3, [r7, #4]
 8108202:	681b      	ldr	r3, [r3, #0]
 8108204:	4a14      	ldr	r2, [pc, #80]	@ (8108258 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8108206:	4293      	cmp	r3, r2
 8108208:	d115      	bne.n	8108236 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810820a:	68fb      	ldr	r3, [r7, #12]
 810820c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8108210:	683b      	ldr	r3, [r7, #0]
 8108212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108214:	051b      	lsls	r3, r3, #20
 8108216:	4313      	orrs	r3, r2
 8108218:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810821a:	68fb      	ldr	r3, [r7, #12]
 810821c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8108220:	683b      	ldr	r3, [r7, #0]
 8108222:	69db      	ldr	r3, [r3, #28]
 8108224:	4313      	orrs	r3, r2
 8108226:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8108228:	68fb      	ldr	r3, [r7, #12]
 810822a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 810822e:	683b      	ldr	r3, [r7, #0]
 8108230:	6a1b      	ldr	r3, [r3, #32]
 8108232:	4313      	orrs	r3, r2
 8108234:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8108236:	687b      	ldr	r3, [r7, #4]
 8108238:	681b      	ldr	r3, [r3, #0]
 810823a:	68fa      	ldr	r2, [r7, #12]
 810823c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 810823e:	687b      	ldr	r3, [r7, #4]
 8108240:	2200      	movs	r2, #0
 8108242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8108246:	2300      	movs	r3, #0
}
 8108248:	4618      	mov	r0, r3
 810824a:	3714      	adds	r7, #20
 810824c:	46bd      	mov	sp, r7
 810824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108252:	4770      	bx	lr
 8108254:	40010000 	.word	0x40010000
 8108258:	40010400 	.word	0x40010400

0810825c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810825c:	b580      	push	{r7, lr}
 810825e:	b082      	sub	sp, #8
 8108260:	af00      	add	r7, sp, #0
 8108262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8108264:	687b      	ldr	r3, [r7, #4]
 8108266:	2b00      	cmp	r3, #0
 8108268:	d101      	bne.n	810826e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810826a:	2301      	movs	r3, #1
 810826c:	e042      	b.n	81082f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810826e:	687b      	ldr	r3, [r7, #4]
 8108270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108274:	2b00      	cmp	r3, #0
 8108276:	d106      	bne.n	8108286 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8108278:	687b      	ldr	r3, [r7, #4]
 810827a:	2200      	movs	r2, #0
 810827c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8108280:	6878      	ldr	r0, [r7, #4]
 8108282:	f7fb fa85 	bl	8103790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8108286:	687b      	ldr	r3, [r7, #4]
 8108288:	2224      	movs	r2, #36	@ 0x24
 810828a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810828e:	687b      	ldr	r3, [r7, #4]
 8108290:	681b      	ldr	r3, [r3, #0]
 8108292:	681a      	ldr	r2, [r3, #0]
 8108294:	687b      	ldr	r3, [r7, #4]
 8108296:	681b      	ldr	r3, [r3, #0]
 8108298:	f022 0201 	bic.w	r2, r2, #1
 810829c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810829e:	687b      	ldr	r3, [r7, #4]
 81082a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81082a2:	2b00      	cmp	r3, #0
 81082a4:	d002      	beq.n	81082ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 81082a6:	6878      	ldr	r0, [r7, #4]
 81082a8:	f000 fee6 	bl	8109078 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81082ac:	6878      	ldr	r0, [r7, #4]
 81082ae:	f000 f97b 	bl	81085a8 <UART_SetConfig>
 81082b2:	4603      	mov	r3, r0
 81082b4:	2b01      	cmp	r3, #1
 81082b6:	d101      	bne.n	81082bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 81082b8:	2301      	movs	r3, #1
 81082ba:	e01b      	b.n	81082f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81082bc:	687b      	ldr	r3, [r7, #4]
 81082be:	681b      	ldr	r3, [r3, #0]
 81082c0:	685a      	ldr	r2, [r3, #4]
 81082c2:	687b      	ldr	r3, [r7, #4]
 81082c4:	681b      	ldr	r3, [r3, #0]
 81082c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 81082ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81082cc:	687b      	ldr	r3, [r7, #4]
 81082ce:	681b      	ldr	r3, [r3, #0]
 81082d0:	689a      	ldr	r2, [r3, #8]
 81082d2:	687b      	ldr	r3, [r7, #4]
 81082d4:	681b      	ldr	r3, [r3, #0]
 81082d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 81082da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81082dc:	687b      	ldr	r3, [r7, #4]
 81082de:	681b      	ldr	r3, [r3, #0]
 81082e0:	681a      	ldr	r2, [r3, #0]
 81082e2:	687b      	ldr	r3, [r7, #4]
 81082e4:	681b      	ldr	r3, [r3, #0]
 81082e6:	f042 0201 	orr.w	r2, r2, #1
 81082ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81082ec:	6878      	ldr	r0, [r7, #4]
 81082ee:	f000 ff65 	bl	81091bc <UART_CheckIdleState>
 81082f2:	4603      	mov	r3, r0
}
 81082f4:	4618      	mov	r0, r3
 81082f6:	3708      	adds	r7, #8
 81082f8:	46bd      	mov	sp, r7
 81082fa:	bd80      	pop	{r7, pc}

081082fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81082fc:	b580      	push	{r7, lr}
 81082fe:	b08a      	sub	sp, #40	@ 0x28
 8108300:	af02      	add	r7, sp, #8
 8108302:	60f8      	str	r0, [r7, #12]
 8108304:	60b9      	str	r1, [r7, #8]
 8108306:	603b      	str	r3, [r7, #0]
 8108308:	4613      	mov	r3, r2
 810830a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810830c:	68fb      	ldr	r3, [r7, #12]
 810830e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108312:	2b20      	cmp	r3, #32
 8108314:	d17b      	bne.n	810840e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8108316:	68bb      	ldr	r3, [r7, #8]
 8108318:	2b00      	cmp	r3, #0
 810831a:	d002      	beq.n	8108322 <HAL_UART_Transmit+0x26>
 810831c:	88fb      	ldrh	r3, [r7, #6]
 810831e:	2b00      	cmp	r3, #0
 8108320:	d101      	bne.n	8108326 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8108322:	2301      	movs	r3, #1
 8108324:	e074      	b.n	8108410 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108326:	68fb      	ldr	r3, [r7, #12]
 8108328:	2200      	movs	r2, #0
 810832a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810832e:	68fb      	ldr	r3, [r7, #12]
 8108330:	2221      	movs	r2, #33	@ 0x21
 8108332:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8108336:	f7fb fcd3 	bl	8103ce0 <HAL_GetTick>
 810833a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810833c:	68fb      	ldr	r3, [r7, #12]
 810833e:	88fa      	ldrh	r2, [r7, #6]
 8108340:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8108344:	68fb      	ldr	r3, [r7, #12]
 8108346:	88fa      	ldrh	r2, [r7, #6]
 8108348:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810834c:	68fb      	ldr	r3, [r7, #12]
 810834e:	689b      	ldr	r3, [r3, #8]
 8108350:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108354:	d108      	bne.n	8108368 <HAL_UART_Transmit+0x6c>
 8108356:	68fb      	ldr	r3, [r7, #12]
 8108358:	691b      	ldr	r3, [r3, #16]
 810835a:	2b00      	cmp	r3, #0
 810835c:	d104      	bne.n	8108368 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810835e:	2300      	movs	r3, #0
 8108360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8108362:	68bb      	ldr	r3, [r7, #8]
 8108364:	61bb      	str	r3, [r7, #24]
 8108366:	e003      	b.n	8108370 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8108368:	68bb      	ldr	r3, [r7, #8]
 810836a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810836c:	2300      	movs	r3, #0
 810836e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8108370:	e030      	b.n	81083d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8108372:	683b      	ldr	r3, [r7, #0]
 8108374:	9300      	str	r3, [sp, #0]
 8108376:	697b      	ldr	r3, [r7, #20]
 8108378:	2200      	movs	r2, #0
 810837a:	2180      	movs	r1, #128	@ 0x80
 810837c:	68f8      	ldr	r0, [r7, #12]
 810837e:	f000 ffc7 	bl	8109310 <UART_WaitOnFlagUntilTimeout>
 8108382:	4603      	mov	r3, r0
 8108384:	2b00      	cmp	r3, #0
 8108386:	d005      	beq.n	8108394 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8108388:	68fb      	ldr	r3, [r7, #12]
 810838a:	2220      	movs	r2, #32
 810838c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8108390:	2303      	movs	r3, #3
 8108392:	e03d      	b.n	8108410 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8108394:	69fb      	ldr	r3, [r7, #28]
 8108396:	2b00      	cmp	r3, #0
 8108398:	d10b      	bne.n	81083b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810839a:	69bb      	ldr	r3, [r7, #24]
 810839c:	881b      	ldrh	r3, [r3, #0]
 810839e:	461a      	mov	r2, r3
 81083a0:	68fb      	ldr	r3, [r7, #12]
 81083a2:	681b      	ldr	r3, [r3, #0]
 81083a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81083a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 81083aa:	69bb      	ldr	r3, [r7, #24]
 81083ac:	3302      	adds	r3, #2
 81083ae:	61bb      	str	r3, [r7, #24]
 81083b0:	e007      	b.n	81083c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81083b2:	69fb      	ldr	r3, [r7, #28]
 81083b4:	781a      	ldrb	r2, [r3, #0]
 81083b6:	68fb      	ldr	r3, [r7, #12]
 81083b8:	681b      	ldr	r3, [r3, #0]
 81083ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 81083bc:	69fb      	ldr	r3, [r7, #28]
 81083be:	3301      	adds	r3, #1
 81083c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81083c2:	68fb      	ldr	r3, [r7, #12]
 81083c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81083c8:	b29b      	uxth	r3, r3
 81083ca:	3b01      	subs	r3, #1
 81083cc:	b29a      	uxth	r2, r3
 81083ce:	68fb      	ldr	r3, [r7, #12]
 81083d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 81083d4:	68fb      	ldr	r3, [r7, #12]
 81083d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81083da:	b29b      	uxth	r3, r3
 81083dc:	2b00      	cmp	r3, #0
 81083de:	d1c8      	bne.n	8108372 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81083e0:	683b      	ldr	r3, [r7, #0]
 81083e2:	9300      	str	r3, [sp, #0]
 81083e4:	697b      	ldr	r3, [r7, #20]
 81083e6:	2200      	movs	r2, #0
 81083e8:	2140      	movs	r1, #64	@ 0x40
 81083ea:	68f8      	ldr	r0, [r7, #12]
 81083ec:	f000 ff90 	bl	8109310 <UART_WaitOnFlagUntilTimeout>
 81083f0:	4603      	mov	r3, r0
 81083f2:	2b00      	cmp	r3, #0
 81083f4:	d005      	beq.n	8108402 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 81083f6:	68fb      	ldr	r3, [r7, #12]
 81083f8:	2220      	movs	r2, #32
 81083fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 81083fe:	2303      	movs	r3, #3
 8108400:	e006      	b.n	8108410 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8108402:	68fb      	ldr	r3, [r7, #12]
 8108404:	2220      	movs	r2, #32
 8108406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810840a:	2300      	movs	r3, #0
 810840c:	e000      	b.n	8108410 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810840e:	2302      	movs	r3, #2
  }
}
 8108410:	4618      	mov	r0, r3
 8108412:	3720      	adds	r7, #32
 8108414:	46bd      	mov	sp, r7
 8108416:	bd80      	pop	{r7, pc}

08108418 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8108418:	b580      	push	{r7, lr}
 810841a:	b08a      	sub	sp, #40	@ 0x28
 810841c:	af02      	add	r7, sp, #8
 810841e:	60f8      	str	r0, [r7, #12]
 8108420:	60b9      	str	r1, [r7, #8]
 8108422:	603b      	str	r3, [r7, #0]
 8108424:	4613      	mov	r3, r2
 8108426:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8108428:	68fb      	ldr	r3, [r7, #12]
 810842a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810842e:	2b20      	cmp	r3, #32
 8108430:	f040 80b5 	bne.w	810859e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8108434:	68bb      	ldr	r3, [r7, #8]
 8108436:	2b00      	cmp	r3, #0
 8108438:	d002      	beq.n	8108440 <HAL_UART_Receive+0x28>
 810843a:	88fb      	ldrh	r3, [r7, #6]
 810843c:	2b00      	cmp	r3, #0
 810843e:	d101      	bne.n	8108444 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8108440:	2301      	movs	r3, #1
 8108442:	e0ad      	b.n	81085a0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108444:	68fb      	ldr	r3, [r7, #12]
 8108446:	2200      	movs	r2, #0
 8108448:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 810844c:	68fb      	ldr	r3, [r7, #12]
 810844e:	2222      	movs	r2, #34	@ 0x22
 8108450:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108454:	68fb      	ldr	r3, [r7, #12]
 8108456:	2200      	movs	r2, #0
 8108458:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810845a:	f7fb fc41 	bl	8103ce0 <HAL_GetTick>
 810845e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8108460:	68fb      	ldr	r3, [r7, #12]
 8108462:	88fa      	ldrh	r2, [r7, #6]
 8108464:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8108468:	68fb      	ldr	r3, [r7, #12]
 810846a:	88fa      	ldrh	r2, [r7, #6]
 810846c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8108470:	68fb      	ldr	r3, [r7, #12]
 8108472:	689b      	ldr	r3, [r3, #8]
 8108474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108478:	d10e      	bne.n	8108498 <HAL_UART_Receive+0x80>
 810847a:	68fb      	ldr	r3, [r7, #12]
 810847c:	691b      	ldr	r3, [r3, #16]
 810847e:	2b00      	cmp	r3, #0
 8108480:	d105      	bne.n	810848e <HAL_UART_Receive+0x76>
 8108482:	68fb      	ldr	r3, [r7, #12]
 8108484:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8108488:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810848c:	e02d      	b.n	81084ea <HAL_UART_Receive+0xd2>
 810848e:	68fb      	ldr	r3, [r7, #12]
 8108490:	22ff      	movs	r2, #255	@ 0xff
 8108492:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8108496:	e028      	b.n	81084ea <HAL_UART_Receive+0xd2>
 8108498:	68fb      	ldr	r3, [r7, #12]
 810849a:	689b      	ldr	r3, [r3, #8]
 810849c:	2b00      	cmp	r3, #0
 810849e:	d10d      	bne.n	81084bc <HAL_UART_Receive+0xa4>
 81084a0:	68fb      	ldr	r3, [r7, #12]
 81084a2:	691b      	ldr	r3, [r3, #16]
 81084a4:	2b00      	cmp	r3, #0
 81084a6:	d104      	bne.n	81084b2 <HAL_UART_Receive+0x9a>
 81084a8:	68fb      	ldr	r3, [r7, #12]
 81084aa:	22ff      	movs	r2, #255	@ 0xff
 81084ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 81084b0:	e01b      	b.n	81084ea <HAL_UART_Receive+0xd2>
 81084b2:	68fb      	ldr	r3, [r7, #12]
 81084b4:	227f      	movs	r2, #127	@ 0x7f
 81084b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 81084ba:	e016      	b.n	81084ea <HAL_UART_Receive+0xd2>
 81084bc:	68fb      	ldr	r3, [r7, #12]
 81084be:	689b      	ldr	r3, [r3, #8]
 81084c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81084c4:	d10d      	bne.n	81084e2 <HAL_UART_Receive+0xca>
 81084c6:	68fb      	ldr	r3, [r7, #12]
 81084c8:	691b      	ldr	r3, [r3, #16]
 81084ca:	2b00      	cmp	r3, #0
 81084cc:	d104      	bne.n	81084d8 <HAL_UART_Receive+0xc0>
 81084ce:	68fb      	ldr	r3, [r7, #12]
 81084d0:	227f      	movs	r2, #127	@ 0x7f
 81084d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 81084d6:	e008      	b.n	81084ea <HAL_UART_Receive+0xd2>
 81084d8:	68fb      	ldr	r3, [r7, #12]
 81084da:	223f      	movs	r2, #63	@ 0x3f
 81084dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 81084e0:	e003      	b.n	81084ea <HAL_UART_Receive+0xd2>
 81084e2:	68fb      	ldr	r3, [r7, #12]
 81084e4:	2200      	movs	r2, #0
 81084e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 81084ea:	68fb      	ldr	r3, [r7, #12]
 81084ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 81084f0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81084f2:	68fb      	ldr	r3, [r7, #12]
 81084f4:	689b      	ldr	r3, [r3, #8]
 81084f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81084fa:	d108      	bne.n	810850e <HAL_UART_Receive+0xf6>
 81084fc:	68fb      	ldr	r3, [r7, #12]
 81084fe:	691b      	ldr	r3, [r3, #16]
 8108500:	2b00      	cmp	r3, #0
 8108502:	d104      	bne.n	810850e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8108504:	2300      	movs	r3, #0
 8108506:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8108508:	68bb      	ldr	r3, [r7, #8]
 810850a:	61bb      	str	r3, [r7, #24]
 810850c:	e003      	b.n	8108516 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 810850e:	68bb      	ldr	r3, [r7, #8]
 8108510:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8108512:	2300      	movs	r3, #0
 8108514:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8108516:	e036      	b.n	8108586 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8108518:	683b      	ldr	r3, [r7, #0]
 810851a:	9300      	str	r3, [sp, #0]
 810851c:	697b      	ldr	r3, [r7, #20]
 810851e:	2200      	movs	r2, #0
 8108520:	2120      	movs	r1, #32
 8108522:	68f8      	ldr	r0, [r7, #12]
 8108524:	f000 fef4 	bl	8109310 <UART_WaitOnFlagUntilTimeout>
 8108528:	4603      	mov	r3, r0
 810852a:	2b00      	cmp	r3, #0
 810852c:	d005      	beq.n	810853a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 810852e:	68fb      	ldr	r3, [r7, #12]
 8108530:	2220      	movs	r2, #32
 8108532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8108536:	2303      	movs	r3, #3
 8108538:	e032      	b.n	81085a0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 810853a:	69fb      	ldr	r3, [r7, #28]
 810853c:	2b00      	cmp	r3, #0
 810853e:	d10c      	bne.n	810855a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8108540:	68fb      	ldr	r3, [r7, #12]
 8108542:	681b      	ldr	r3, [r3, #0]
 8108544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108546:	b29a      	uxth	r2, r3
 8108548:	8a7b      	ldrh	r3, [r7, #18]
 810854a:	4013      	ands	r3, r2
 810854c:	b29a      	uxth	r2, r3
 810854e:	69bb      	ldr	r3, [r7, #24]
 8108550:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8108552:	69bb      	ldr	r3, [r7, #24]
 8108554:	3302      	adds	r3, #2
 8108556:	61bb      	str	r3, [r7, #24]
 8108558:	e00c      	b.n	8108574 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 810855a:	68fb      	ldr	r3, [r7, #12]
 810855c:	681b      	ldr	r3, [r3, #0]
 810855e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108560:	b2da      	uxtb	r2, r3
 8108562:	8a7b      	ldrh	r3, [r7, #18]
 8108564:	b2db      	uxtb	r3, r3
 8108566:	4013      	ands	r3, r2
 8108568:	b2da      	uxtb	r2, r3
 810856a:	69fb      	ldr	r3, [r7, #28]
 810856c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 810856e:	69fb      	ldr	r3, [r7, #28]
 8108570:	3301      	adds	r3, #1
 8108572:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8108574:	68fb      	ldr	r3, [r7, #12]
 8108576:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810857a:	b29b      	uxth	r3, r3
 810857c:	3b01      	subs	r3, #1
 810857e:	b29a      	uxth	r2, r3
 8108580:	68fb      	ldr	r3, [r7, #12]
 8108582:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8108586:	68fb      	ldr	r3, [r7, #12]
 8108588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810858c:	b29b      	uxth	r3, r3
 810858e:	2b00      	cmp	r3, #0
 8108590:	d1c2      	bne.n	8108518 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8108592:	68fb      	ldr	r3, [r7, #12]
 8108594:	2220      	movs	r2, #32
 8108596:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 810859a:	2300      	movs	r3, #0
 810859c:	e000      	b.n	81085a0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 810859e:	2302      	movs	r3, #2
  }
}
 81085a0:	4618      	mov	r0, r3
 81085a2:	3720      	adds	r7, #32
 81085a4:	46bd      	mov	sp, r7
 81085a6:	bd80      	pop	{r7, pc}

081085a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81085a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81085ac:	b092      	sub	sp, #72	@ 0x48
 81085ae:	af00      	add	r7, sp, #0
 81085b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81085b2:	2300      	movs	r3, #0
 81085b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81085b8:	697b      	ldr	r3, [r7, #20]
 81085ba:	689a      	ldr	r2, [r3, #8]
 81085bc:	697b      	ldr	r3, [r7, #20]
 81085be:	691b      	ldr	r3, [r3, #16]
 81085c0:	431a      	orrs	r2, r3
 81085c2:	697b      	ldr	r3, [r7, #20]
 81085c4:	695b      	ldr	r3, [r3, #20]
 81085c6:	431a      	orrs	r2, r3
 81085c8:	697b      	ldr	r3, [r7, #20]
 81085ca:	69db      	ldr	r3, [r3, #28]
 81085cc:	4313      	orrs	r3, r2
 81085ce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81085d0:	697b      	ldr	r3, [r7, #20]
 81085d2:	681b      	ldr	r3, [r3, #0]
 81085d4:	681a      	ldr	r2, [r3, #0]
 81085d6:	4bbd      	ldr	r3, [pc, #756]	@ (81088cc <UART_SetConfig+0x324>)
 81085d8:	4013      	ands	r3, r2
 81085da:	697a      	ldr	r2, [r7, #20]
 81085dc:	6812      	ldr	r2, [r2, #0]
 81085de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 81085e0:	430b      	orrs	r3, r1
 81085e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81085e4:	697b      	ldr	r3, [r7, #20]
 81085e6:	681b      	ldr	r3, [r3, #0]
 81085e8:	685b      	ldr	r3, [r3, #4]
 81085ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81085ee:	697b      	ldr	r3, [r7, #20]
 81085f0:	68da      	ldr	r2, [r3, #12]
 81085f2:	697b      	ldr	r3, [r7, #20]
 81085f4:	681b      	ldr	r3, [r3, #0]
 81085f6:	430a      	orrs	r2, r1
 81085f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81085fa:	697b      	ldr	r3, [r7, #20]
 81085fc:	699b      	ldr	r3, [r3, #24]
 81085fe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8108600:	697b      	ldr	r3, [r7, #20]
 8108602:	681b      	ldr	r3, [r3, #0]
 8108604:	4ab2      	ldr	r2, [pc, #712]	@ (81088d0 <UART_SetConfig+0x328>)
 8108606:	4293      	cmp	r3, r2
 8108608:	d004      	beq.n	8108614 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810860a:	697b      	ldr	r3, [r7, #20]
 810860c:	6a1b      	ldr	r3, [r3, #32]
 810860e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8108610:	4313      	orrs	r3, r2
 8108612:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8108614:	697b      	ldr	r3, [r7, #20]
 8108616:	681b      	ldr	r3, [r3, #0]
 8108618:	689b      	ldr	r3, [r3, #8]
 810861a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810861e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8108622:	697a      	ldr	r2, [r7, #20]
 8108624:	6812      	ldr	r2, [r2, #0]
 8108626:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8108628:	430b      	orrs	r3, r1
 810862a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810862c:	697b      	ldr	r3, [r7, #20]
 810862e:	681b      	ldr	r3, [r3, #0]
 8108630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108632:	f023 010f 	bic.w	r1, r3, #15
 8108636:	697b      	ldr	r3, [r7, #20]
 8108638:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810863a:	697b      	ldr	r3, [r7, #20]
 810863c:	681b      	ldr	r3, [r3, #0]
 810863e:	430a      	orrs	r2, r1
 8108640:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108642:	697b      	ldr	r3, [r7, #20]
 8108644:	681b      	ldr	r3, [r3, #0]
 8108646:	4aa3      	ldr	r2, [pc, #652]	@ (81088d4 <UART_SetConfig+0x32c>)
 8108648:	4293      	cmp	r3, r2
 810864a:	d177      	bne.n	810873c <UART_SetConfig+0x194>
 810864c:	4ba2      	ldr	r3, [pc, #648]	@ (81088d8 <UART_SetConfig+0x330>)
 810864e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108650:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8108654:	2b28      	cmp	r3, #40	@ 0x28
 8108656:	d86d      	bhi.n	8108734 <UART_SetConfig+0x18c>
 8108658:	a201      	add	r2, pc, #4	@ (adr r2, 8108660 <UART_SetConfig+0xb8>)
 810865a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810865e:	bf00      	nop
 8108660:	08108705 	.word	0x08108705
 8108664:	08108735 	.word	0x08108735
 8108668:	08108735 	.word	0x08108735
 810866c:	08108735 	.word	0x08108735
 8108670:	08108735 	.word	0x08108735
 8108674:	08108735 	.word	0x08108735
 8108678:	08108735 	.word	0x08108735
 810867c:	08108735 	.word	0x08108735
 8108680:	0810870d 	.word	0x0810870d
 8108684:	08108735 	.word	0x08108735
 8108688:	08108735 	.word	0x08108735
 810868c:	08108735 	.word	0x08108735
 8108690:	08108735 	.word	0x08108735
 8108694:	08108735 	.word	0x08108735
 8108698:	08108735 	.word	0x08108735
 810869c:	08108735 	.word	0x08108735
 81086a0:	08108715 	.word	0x08108715
 81086a4:	08108735 	.word	0x08108735
 81086a8:	08108735 	.word	0x08108735
 81086ac:	08108735 	.word	0x08108735
 81086b0:	08108735 	.word	0x08108735
 81086b4:	08108735 	.word	0x08108735
 81086b8:	08108735 	.word	0x08108735
 81086bc:	08108735 	.word	0x08108735
 81086c0:	0810871d 	.word	0x0810871d
 81086c4:	08108735 	.word	0x08108735
 81086c8:	08108735 	.word	0x08108735
 81086cc:	08108735 	.word	0x08108735
 81086d0:	08108735 	.word	0x08108735
 81086d4:	08108735 	.word	0x08108735
 81086d8:	08108735 	.word	0x08108735
 81086dc:	08108735 	.word	0x08108735
 81086e0:	08108725 	.word	0x08108725
 81086e4:	08108735 	.word	0x08108735
 81086e8:	08108735 	.word	0x08108735
 81086ec:	08108735 	.word	0x08108735
 81086f0:	08108735 	.word	0x08108735
 81086f4:	08108735 	.word	0x08108735
 81086f8:	08108735 	.word	0x08108735
 81086fc:	08108735 	.word	0x08108735
 8108700:	0810872d 	.word	0x0810872d
 8108704:	2301      	movs	r3, #1
 8108706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810870a:	e220      	b.n	8108b4e <UART_SetConfig+0x5a6>
 810870c:	2304      	movs	r3, #4
 810870e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108712:	e21c      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108714:	2308      	movs	r3, #8
 8108716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810871a:	e218      	b.n	8108b4e <UART_SetConfig+0x5a6>
 810871c:	2310      	movs	r3, #16
 810871e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108722:	e214      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108724:	2320      	movs	r3, #32
 8108726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810872a:	e210      	b.n	8108b4e <UART_SetConfig+0x5a6>
 810872c:	2340      	movs	r3, #64	@ 0x40
 810872e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108732:	e20c      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108734:	2380      	movs	r3, #128	@ 0x80
 8108736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810873a:	e208      	b.n	8108b4e <UART_SetConfig+0x5a6>
 810873c:	697b      	ldr	r3, [r7, #20]
 810873e:	681b      	ldr	r3, [r3, #0]
 8108740:	4a66      	ldr	r2, [pc, #408]	@ (81088dc <UART_SetConfig+0x334>)
 8108742:	4293      	cmp	r3, r2
 8108744:	d130      	bne.n	81087a8 <UART_SetConfig+0x200>
 8108746:	4b64      	ldr	r3, [pc, #400]	@ (81088d8 <UART_SetConfig+0x330>)
 8108748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810874a:	f003 0307 	and.w	r3, r3, #7
 810874e:	2b05      	cmp	r3, #5
 8108750:	d826      	bhi.n	81087a0 <UART_SetConfig+0x1f8>
 8108752:	a201      	add	r2, pc, #4	@ (adr r2, 8108758 <UART_SetConfig+0x1b0>)
 8108754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108758:	08108771 	.word	0x08108771
 810875c:	08108779 	.word	0x08108779
 8108760:	08108781 	.word	0x08108781
 8108764:	08108789 	.word	0x08108789
 8108768:	08108791 	.word	0x08108791
 810876c:	08108799 	.word	0x08108799
 8108770:	2300      	movs	r3, #0
 8108772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108776:	e1ea      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108778:	2304      	movs	r3, #4
 810877a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810877e:	e1e6      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108780:	2308      	movs	r3, #8
 8108782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108786:	e1e2      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108788:	2310      	movs	r3, #16
 810878a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810878e:	e1de      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108790:	2320      	movs	r3, #32
 8108792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108796:	e1da      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108798:	2340      	movs	r3, #64	@ 0x40
 810879a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810879e:	e1d6      	b.n	8108b4e <UART_SetConfig+0x5a6>
 81087a0:	2380      	movs	r3, #128	@ 0x80
 81087a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81087a6:	e1d2      	b.n	8108b4e <UART_SetConfig+0x5a6>
 81087a8:	697b      	ldr	r3, [r7, #20]
 81087aa:	681b      	ldr	r3, [r3, #0]
 81087ac:	4a4c      	ldr	r2, [pc, #304]	@ (81088e0 <UART_SetConfig+0x338>)
 81087ae:	4293      	cmp	r3, r2
 81087b0:	d130      	bne.n	8108814 <UART_SetConfig+0x26c>
 81087b2:	4b49      	ldr	r3, [pc, #292]	@ (81088d8 <UART_SetConfig+0x330>)
 81087b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81087b6:	f003 0307 	and.w	r3, r3, #7
 81087ba:	2b05      	cmp	r3, #5
 81087bc:	d826      	bhi.n	810880c <UART_SetConfig+0x264>
 81087be:	a201      	add	r2, pc, #4	@ (adr r2, 81087c4 <UART_SetConfig+0x21c>)
 81087c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81087c4:	081087dd 	.word	0x081087dd
 81087c8:	081087e5 	.word	0x081087e5
 81087cc:	081087ed 	.word	0x081087ed
 81087d0:	081087f5 	.word	0x081087f5
 81087d4:	081087fd 	.word	0x081087fd
 81087d8:	08108805 	.word	0x08108805
 81087dc:	2300      	movs	r3, #0
 81087de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81087e2:	e1b4      	b.n	8108b4e <UART_SetConfig+0x5a6>
 81087e4:	2304      	movs	r3, #4
 81087e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81087ea:	e1b0      	b.n	8108b4e <UART_SetConfig+0x5a6>
 81087ec:	2308      	movs	r3, #8
 81087ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81087f2:	e1ac      	b.n	8108b4e <UART_SetConfig+0x5a6>
 81087f4:	2310      	movs	r3, #16
 81087f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81087fa:	e1a8      	b.n	8108b4e <UART_SetConfig+0x5a6>
 81087fc:	2320      	movs	r3, #32
 81087fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108802:	e1a4      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108804:	2340      	movs	r3, #64	@ 0x40
 8108806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810880a:	e1a0      	b.n	8108b4e <UART_SetConfig+0x5a6>
 810880c:	2380      	movs	r3, #128	@ 0x80
 810880e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108812:	e19c      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108814:	697b      	ldr	r3, [r7, #20]
 8108816:	681b      	ldr	r3, [r3, #0]
 8108818:	4a32      	ldr	r2, [pc, #200]	@ (81088e4 <UART_SetConfig+0x33c>)
 810881a:	4293      	cmp	r3, r2
 810881c:	d130      	bne.n	8108880 <UART_SetConfig+0x2d8>
 810881e:	4b2e      	ldr	r3, [pc, #184]	@ (81088d8 <UART_SetConfig+0x330>)
 8108820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108822:	f003 0307 	and.w	r3, r3, #7
 8108826:	2b05      	cmp	r3, #5
 8108828:	d826      	bhi.n	8108878 <UART_SetConfig+0x2d0>
 810882a:	a201      	add	r2, pc, #4	@ (adr r2, 8108830 <UART_SetConfig+0x288>)
 810882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108830:	08108849 	.word	0x08108849
 8108834:	08108851 	.word	0x08108851
 8108838:	08108859 	.word	0x08108859
 810883c:	08108861 	.word	0x08108861
 8108840:	08108869 	.word	0x08108869
 8108844:	08108871 	.word	0x08108871
 8108848:	2300      	movs	r3, #0
 810884a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810884e:	e17e      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108850:	2304      	movs	r3, #4
 8108852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108856:	e17a      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108858:	2308      	movs	r3, #8
 810885a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810885e:	e176      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108860:	2310      	movs	r3, #16
 8108862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108866:	e172      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108868:	2320      	movs	r3, #32
 810886a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810886e:	e16e      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108870:	2340      	movs	r3, #64	@ 0x40
 8108872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108876:	e16a      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108878:	2380      	movs	r3, #128	@ 0x80
 810887a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810887e:	e166      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108880:	697b      	ldr	r3, [r7, #20]
 8108882:	681b      	ldr	r3, [r3, #0]
 8108884:	4a18      	ldr	r2, [pc, #96]	@ (81088e8 <UART_SetConfig+0x340>)
 8108886:	4293      	cmp	r3, r2
 8108888:	d140      	bne.n	810890c <UART_SetConfig+0x364>
 810888a:	4b13      	ldr	r3, [pc, #76]	@ (81088d8 <UART_SetConfig+0x330>)
 810888c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810888e:	f003 0307 	and.w	r3, r3, #7
 8108892:	2b05      	cmp	r3, #5
 8108894:	d836      	bhi.n	8108904 <UART_SetConfig+0x35c>
 8108896:	a201      	add	r2, pc, #4	@ (adr r2, 810889c <UART_SetConfig+0x2f4>)
 8108898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810889c:	081088b5 	.word	0x081088b5
 81088a0:	081088bd 	.word	0x081088bd
 81088a4:	081088c5 	.word	0x081088c5
 81088a8:	081088ed 	.word	0x081088ed
 81088ac:	081088f5 	.word	0x081088f5
 81088b0:	081088fd 	.word	0x081088fd
 81088b4:	2300      	movs	r3, #0
 81088b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81088ba:	e148      	b.n	8108b4e <UART_SetConfig+0x5a6>
 81088bc:	2304      	movs	r3, #4
 81088be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81088c2:	e144      	b.n	8108b4e <UART_SetConfig+0x5a6>
 81088c4:	2308      	movs	r3, #8
 81088c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81088ca:	e140      	b.n	8108b4e <UART_SetConfig+0x5a6>
 81088cc:	cfff69f3 	.word	0xcfff69f3
 81088d0:	58000c00 	.word	0x58000c00
 81088d4:	40011000 	.word	0x40011000
 81088d8:	58024400 	.word	0x58024400
 81088dc:	40004400 	.word	0x40004400
 81088e0:	40004800 	.word	0x40004800
 81088e4:	40004c00 	.word	0x40004c00
 81088e8:	40005000 	.word	0x40005000
 81088ec:	2310      	movs	r3, #16
 81088ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81088f2:	e12c      	b.n	8108b4e <UART_SetConfig+0x5a6>
 81088f4:	2320      	movs	r3, #32
 81088f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81088fa:	e128      	b.n	8108b4e <UART_SetConfig+0x5a6>
 81088fc:	2340      	movs	r3, #64	@ 0x40
 81088fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108902:	e124      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108904:	2380      	movs	r3, #128	@ 0x80
 8108906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810890a:	e120      	b.n	8108b4e <UART_SetConfig+0x5a6>
 810890c:	697b      	ldr	r3, [r7, #20]
 810890e:	681b      	ldr	r3, [r3, #0]
 8108910:	4acb      	ldr	r2, [pc, #812]	@ (8108c40 <UART_SetConfig+0x698>)
 8108912:	4293      	cmp	r3, r2
 8108914:	d176      	bne.n	8108a04 <UART_SetConfig+0x45c>
 8108916:	4bcb      	ldr	r3, [pc, #812]	@ (8108c44 <UART_SetConfig+0x69c>)
 8108918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810891a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810891e:	2b28      	cmp	r3, #40	@ 0x28
 8108920:	d86c      	bhi.n	81089fc <UART_SetConfig+0x454>
 8108922:	a201      	add	r2, pc, #4	@ (adr r2, 8108928 <UART_SetConfig+0x380>)
 8108924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108928:	081089cd 	.word	0x081089cd
 810892c:	081089fd 	.word	0x081089fd
 8108930:	081089fd 	.word	0x081089fd
 8108934:	081089fd 	.word	0x081089fd
 8108938:	081089fd 	.word	0x081089fd
 810893c:	081089fd 	.word	0x081089fd
 8108940:	081089fd 	.word	0x081089fd
 8108944:	081089fd 	.word	0x081089fd
 8108948:	081089d5 	.word	0x081089d5
 810894c:	081089fd 	.word	0x081089fd
 8108950:	081089fd 	.word	0x081089fd
 8108954:	081089fd 	.word	0x081089fd
 8108958:	081089fd 	.word	0x081089fd
 810895c:	081089fd 	.word	0x081089fd
 8108960:	081089fd 	.word	0x081089fd
 8108964:	081089fd 	.word	0x081089fd
 8108968:	081089dd 	.word	0x081089dd
 810896c:	081089fd 	.word	0x081089fd
 8108970:	081089fd 	.word	0x081089fd
 8108974:	081089fd 	.word	0x081089fd
 8108978:	081089fd 	.word	0x081089fd
 810897c:	081089fd 	.word	0x081089fd
 8108980:	081089fd 	.word	0x081089fd
 8108984:	081089fd 	.word	0x081089fd
 8108988:	081089e5 	.word	0x081089e5
 810898c:	081089fd 	.word	0x081089fd
 8108990:	081089fd 	.word	0x081089fd
 8108994:	081089fd 	.word	0x081089fd
 8108998:	081089fd 	.word	0x081089fd
 810899c:	081089fd 	.word	0x081089fd
 81089a0:	081089fd 	.word	0x081089fd
 81089a4:	081089fd 	.word	0x081089fd
 81089a8:	081089ed 	.word	0x081089ed
 81089ac:	081089fd 	.word	0x081089fd
 81089b0:	081089fd 	.word	0x081089fd
 81089b4:	081089fd 	.word	0x081089fd
 81089b8:	081089fd 	.word	0x081089fd
 81089bc:	081089fd 	.word	0x081089fd
 81089c0:	081089fd 	.word	0x081089fd
 81089c4:	081089fd 	.word	0x081089fd
 81089c8:	081089f5 	.word	0x081089f5
 81089cc:	2301      	movs	r3, #1
 81089ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089d2:	e0bc      	b.n	8108b4e <UART_SetConfig+0x5a6>
 81089d4:	2304      	movs	r3, #4
 81089d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089da:	e0b8      	b.n	8108b4e <UART_SetConfig+0x5a6>
 81089dc:	2308      	movs	r3, #8
 81089de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089e2:	e0b4      	b.n	8108b4e <UART_SetConfig+0x5a6>
 81089e4:	2310      	movs	r3, #16
 81089e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089ea:	e0b0      	b.n	8108b4e <UART_SetConfig+0x5a6>
 81089ec:	2320      	movs	r3, #32
 81089ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089f2:	e0ac      	b.n	8108b4e <UART_SetConfig+0x5a6>
 81089f4:	2340      	movs	r3, #64	@ 0x40
 81089f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089fa:	e0a8      	b.n	8108b4e <UART_SetConfig+0x5a6>
 81089fc:	2380      	movs	r3, #128	@ 0x80
 81089fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a02:	e0a4      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108a04:	697b      	ldr	r3, [r7, #20]
 8108a06:	681b      	ldr	r3, [r3, #0]
 8108a08:	4a8f      	ldr	r2, [pc, #572]	@ (8108c48 <UART_SetConfig+0x6a0>)
 8108a0a:	4293      	cmp	r3, r2
 8108a0c:	d130      	bne.n	8108a70 <UART_SetConfig+0x4c8>
 8108a0e:	4b8d      	ldr	r3, [pc, #564]	@ (8108c44 <UART_SetConfig+0x69c>)
 8108a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108a12:	f003 0307 	and.w	r3, r3, #7
 8108a16:	2b05      	cmp	r3, #5
 8108a18:	d826      	bhi.n	8108a68 <UART_SetConfig+0x4c0>
 8108a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8108a20 <UART_SetConfig+0x478>)
 8108a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108a20:	08108a39 	.word	0x08108a39
 8108a24:	08108a41 	.word	0x08108a41
 8108a28:	08108a49 	.word	0x08108a49
 8108a2c:	08108a51 	.word	0x08108a51
 8108a30:	08108a59 	.word	0x08108a59
 8108a34:	08108a61 	.word	0x08108a61
 8108a38:	2300      	movs	r3, #0
 8108a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a3e:	e086      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108a40:	2304      	movs	r3, #4
 8108a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a46:	e082      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108a48:	2308      	movs	r3, #8
 8108a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a4e:	e07e      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108a50:	2310      	movs	r3, #16
 8108a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a56:	e07a      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108a58:	2320      	movs	r3, #32
 8108a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a5e:	e076      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108a60:	2340      	movs	r3, #64	@ 0x40
 8108a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a66:	e072      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108a68:	2380      	movs	r3, #128	@ 0x80
 8108a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a6e:	e06e      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108a70:	697b      	ldr	r3, [r7, #20]
 8108a72:	681b      	ldr	r3, [r3, #0]
 8108a74:	4a75      	ldr	r2, [pc, #468]	@ (8108c4c <UART_SetConfig+0x6a4>)
 8108a76:	4293      	cmp	r3, r2
 8108a78:	d130      	bne.n	8108adc <UART_SetConfig+0x534>
 8108a7a:	4b72      	ldr	r3, [pc, #456]	@ (8108c44 <UART_SetConfig+0x69c>)
 8108a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108a7e:	f003 0307 	and.w	r3, r3, #7
 8108a82:	2b05      	cmp	r3, #5
 8108a84:	d826      	bhi.n	8108ad4 <UART_SetConfig+0x52c>
 8108a86:	a201      	add	r2, pc, #4	@ (adr r2, 8108a8c <UART_SetConfig+0x4e4>)
 8108a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108a8c:	08108aa5 	.word	0x08108aa5
 8108a90:	08108aad 	.word	0x08108aad
 8108a94:	08108ab5 	.word	0x08108ab5
 8108a98:	08108abd 	.word	0x08108abd
 8108a9c:	08108ac5 	.word	0x08108ac5
 8108aa0:	08108acd 	.word	0x08108acd
 8108aa4:	2300      	movs	r3, #0
 8108aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108aaa:	e050      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108aac:	2304      	movs	r3, #4
 8108aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108ab2:	e04c      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108ab4:	2308      	movs	r3, #8
 8108ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108aba:	e048      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108abc:	2310      	movs	r3, #16
 8108abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108ac2:	e044      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108ac4:	2320      	movs	r3, #32
 8108ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108aca:	e040      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108acc:	2340      	movs	r3, #64	@ 0x40
 8108ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108ad2:	e03c      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108ad4:	2380      	movs	r3, #128	@ 0x80
 8108ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108ada:	e038      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108adc:	697b      	ldr	r3, [r7, #20]
 8108ade:	681b      	ldr	r3, [r3, #0]
 8108ae0:	4a5b      	ldr	r2, [pc, #364]	@ (8108c50 <UART_SetConfig+0x6a8>)
 8108ae2:	4293      	cmp	r3, r2
 8108ae4:	d130      	bne.n	8108b48 <UART_SetConfig+0x5a0>
 8108ae6:	4b57      	ldr	r3, [pc, #348]	@ (8108c44 <UART_SetConfig+0x69c>)
 8108ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108aea:	f003 0307 	and.w	r3, r3, #7
 8108aee:	2b05      	cmp	r3, #5
 8108af0:	d826      	bhi.n	8108b40 <UART_SetConfig+0x598>
 8108af2:	a201      	add	r2, pc, #4	@ (adr r2, 8108af8 <UART_SetConfig+0x550>)
 8108af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108af8:	08108b11 	.word	0x08108b11
 8108afc:	08108b19 	.word	0x08108b19
 8108b00:	08108b21 	.word	0x08108b21
 8108b04:	08108b29 	.word	0x08108b29
 8108b08:	08108b31 	.word	0x08108b31
 8108b0c:	08108b39 	.word	0x08108b39
 8108b10:	2302      	movs	r3, #2
 8108b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b16:	e01a      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108b18:	2304      	movs	r3, #4
 8108b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b1e:	e016      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108b20:	2308      	movs	r3, #8
 8108b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b26:	e012      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108b28:	2310      	movs	r3, #16
 8108b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b2e:	e00e      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108b30:	2320      	movs	r3, #32
 8108b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b36:	e00a      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108b38:	2340      	movs	r3, #64	@ 0x40
 8108b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b3e:	e006      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108b40:	2380      	movs	r3, #128	@ 0x80
 8108b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b46:	e002      	b.n	8108b4e <UART_SetConfig+0x5a6>
 8108b48:	2380      	movs	r3, #128	@ 0x80
 8108b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8108b4e:	697b      	ldr	r3, [r7, #20]
 8108b50:	681b      	ldr	r3, [r3, #0]
 8108b52:	4a3f      	ldr	r2, [pc, #252]	@ (8108c50 <UART_SetConfig+0x6a8>)
 8108b54:	4293      	cmp	r3, r2
 8108b56:	f040 80f8 	bne.w	8108d4a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8108b5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8108b5e:	2b20      	cmp	r3, #32
 8108b60:	dc46      	bgt.n	8108bf0 <UART_SetConfig+0x648>
 8108b62:	2b02      	cmp	r3, #2
 8108b64:	f2c0 8082 	blt.w	8108c6c <UART_SetConfig+0x6c4>
 8108b68:	3b02      	subs	r3, #2
 8108b6a:	2b1e      	cmp	r3, #30
 8108b6c:	d87e      	bhi.n	8108c6c <UART_SetConfig+0x6c4>
 8108b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8108b74 <UART_SetConfig+0x5cc>)
 8108b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108b74:	08108bf7 	.word	0x08108bf7
 8108b78:	08108c6d 	.word	0x08108c6d
 8108b7c:	08108bff 	.word	0x08108bff
 8108b80:	08108c6d 	.word	0x08108c6d
 8108b84:	08108c6d 	.word	0x08108c6d
 8108b88:	08108c6d 	.word	0x08108c6d
 8108b8c:	08108c0f 	.word	0x08108c0f
 8108b90:	08108c6d 	.word	0x08108c6d
 8108b94:	08108c6d 	.word	0x08108c6d
 8108b98:	08108c6d 	.word	0x08108c6d
 8108b9c:	08108c6d 	.word	0x08108c6d
 8108ba0:	08108c6d 	.word	0x08108c6d
 8108ba4:	08108c6d 	.word	0x08108c6d
 8108ba8:	08108c6d 	.word	0x08108c6d
 8108bac:	08108c1f 	.word	0x08108c1f
 8108bb0:	08108c6d 	.word	0x08108c6d
 8108bb4:	08108c6d 	.word	0x08108c6d
 8108bb8:	08108c6d 	.word	0x08108c6d
 8108bbc:	08108c6d 	.word	0x08108c6d
 8108bc0:	08108c6d 	.word	0x08108c6d
 8108bc4:	08108c6d 	.word	0x08108c6d
 8108bc8:	08108c6d 	.word	0x08108c6d
 8108bcc:	08108c6d 	.word	0x08108c6d
 8108bd0:	08108c6d 	.word	0x08108c6d
 8108bd4:	08108c6d 	.word	0x08108c6d
 8108bd8:	08108c6d 	.word	0x08108c6d
 8108bdc:	08108c6d 	.word	0x08108c6d
 8108be0:	08108c6d 	.word	0x08108c6d
 8108be4:	08108c6d 	.word	0x08108c6d
 8108be8:	08108c6d 	.word	0x08108c6d
 8108bec:	08108c5f 	.word	0x08108c5f
 8108bf0:	2b40      	cmp	r3, #64	@ 0x40
 8108bf2:	d037      	beq.n	8108c64 <UART_SetConfig+0x6bc>
 8108bf4:	e03a      	b.n	8108c6c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8108bf6:	f7fd fde3 	bl	81067c0 <HAL_RCCEx_GetD3PCLK1Freq>
 8108bfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108bfc:	e03c      	b.n	8108c78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108c02:	4618      	mov	r0, r3
 8108c04:	f7fd fdf2 	bl	81067ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108c0c:	e034      	b.n	8108c78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108c0e:	f107 0318 	add.w	r3, r7, #24
 8108c12:	4618      	mov	r0, r3
 8108c14:	f7fd ff3e 	bl	8106a94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108c18:	69fb      	ldr	r3, [r7, #28]
 8108c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108c1c:	e02c      	b.n	8108c78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108c1e:	4b09      	ldr	r3, [pc, #36]	@ (8108c44 <UART_SetConfig+0x69c>)
 8108c20:	681b      	ldr	r3, [r3, #0]
 8108c22:	f003 0320 	and.w	r3, r3, #32
 8108c26:	2b00      	cmp	r3, #0
 8108c28:	d016      	beq.n	8108c58 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108c2a:	4b06      	ldr	r3, [pc, #24]	@ (8108c44 <UART_SetConfig+0x69c>)
 8108c2c:	681b      	ldr	r3, [r3, #0]
 8108c2e:	08db      	lsrs	r3, r3, #3
 8108c30:	f003 0303 	and.w	r3, r3, #3
 8108c34:	4a07      	ldr	r2, [pc, #28]	@ (8108c54 <UART_SetConfig+0x6ac>)
 8108c36:	fa22 f303 	lsr.w	r3, r2, r3
 8108c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108c3c:	e01c      	b.n	8108c78 <UART_SetConfig+0x6d0>
 8108c3e:	bf00      	nop
 8108c40:	40011400 	.word	0x40011400
 8108c44:	58024400 	.word	0x58024400
 8108c48:	40007800 	.word	0x40007800
 8108c4c:	40007c00 	.word	0x40007c00
 8108c50:	58000c00 	.word	0x58000c00
 8108c54:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8108c58:	4b9d      	ldr	r3, [pc, #628]	@ (8108ed0 <UART_SetConfig+0x928>)
 8108c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108c5c:	e00c      	b.n	8108c78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108c5e:	4b9d      	ldr	r3, [pc, #628]	@ (8108ed4 <UART_SetConfig+0x92c>)
 8108c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108c62:	e009      	b.n	8108c78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108c64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8108c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108c6a:	e005      	b.n	8108c78 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8108c6c:	2300      	movs	r3, #0
 8108c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8108c70:	2301      	movs	r3, #1
 8108c72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8108c76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8108c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108c7a:	2b00      	cmp	r3, #0
 8108c7c:	f000 81de 	beq.w	810903c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8108c80:	697b      	ldr	r3, [r7, #20]
 8108c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108c84:	4a94      	ldr	r2, [pc, #592]	@ (8108ed8 <UART_SetConfig+0x930>)
 8108c86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108c8a:	461a      	mov	r2, r3
 8108c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108c8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8108c92:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108c94:	697b      	ldr	r3, [r7, #20]
 8108c96:	685a      	ldr	r2, [r3, #4]
 8108c98:	4613      	mov	r3, r2
 8108c9a:	005b      	lsls	r3, r3, #1
 8108c9c:	4413      	add	r3, r2
 8108c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108ca0:	429a      	cmp	r2, r3
 8108ca2:	d305      	bcc.n	8108cb0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108ca4:	697b      	ldr	r3, [r7, #20]
 8108ca6:	685b      	ldr	r3, [r3, #4]
 8108ca8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108caa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108cac:	429a      	cmp	r2, r3
 8108cae:	d903      	bls.n	8108cb8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8108cb0:	2301      	movs	r3, #1
 8108cb2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8108cb6:	e1c1      	b.n	810903c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108cba:	2200      	movs	r2, #0
 8108cbc:	60bb      	str	r3, [r7, #8]
 8108cbe:	60fa      	str	r2, [r7, #12]
 8108cc0:	697b      	ldr	r3, [r7, #20]
 8108cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108cc4:	4a84      	ldr	r2, [pc, #528]	@ (8108ed8 <UART_SetConfig+0x930>)
 8108cc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108cca:	b29b      	uxth	r3, r3
 8108ccc:	2200      	movs	r2, #0
 8108cce:	603b      	str	r3, [r7, #0]
 8108cd0:	607a      	str	r2, [r7, #4]
 8108cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108cd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8108cda:	f7f8 f85d 	bl	8100d98 <__aeabi_uldivmod>
 8108cde:	4602      	mov	r2, r0
 8108ce0:	460b      	mov	r3, r1
 8108ce2:	4610      	mov	r0, r2
 8108ce4:	4619      	mov	r1, r3
 8108ce6:	f04f 0200 	mov.w	r2, #0
 8108cea:	f04f 0300 	mov.w	r3, #0
 8108cee:	020b      	lsls	r3, r1, #8
 8108cf0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8108cf4:	0202      	lsls	r2, r0, #8
 8108cf6:	6979      	ldr	r1, [r7, #20]
 8108cf8:	6849      	ldr	r1, [r1, #4]
 8108cfa:	0849      	lsrs	r1, r1, #1
 8108cfc:	2000      	movs	r0, #0
 8108cfe:	460c      	mov	r4, r1
 8108d00:	4605      	mov	r5, r0
 8108d02:	eb12 0804 	adds.w	r8, r2, r4
 8108d06:	eb43 0905 	adc.w	r9, r3, r5
 8108d0a:	697b      	ldr	r3, [r7, #20]
 8108d0c:	685b      	ldr	r3, [r3, #4]
 8108d0e:	2200      	movs	r2, #0
 8108d10:	469a      	mov	sl, r3
 8108d12:	4693      	mov	fp, r2
 8108d14:	4652      	mov	r2, sl
 8108d16:	465b      	mov	r3, fp
 8108d18:	4640      	mov	r0, r8
 8108d1a:	4649      	mov	r1, r9
 8108d1c:	f7f8 f83c 	bl	8100d98 <__aeabi_uldivmod>
 8108d20:	4602      	mov	r2, r0
 8108d22:	460b      	mov	r3, r1
 8108d24:	4613      	mov	r3, r2
 8108d26:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8108d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108d2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8108d2e:	d308      	bcc.n	8108d42 <UART_SetConfig+0x79a>
 8108d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108d32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8108d36:	d204      	bcs.n	8108d42 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8108d38:	697b      	ldr	r3, [r7, #20]
 8108d3a:	681b      	ldr	r3, [r3, #0]
 8108d3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8108d3e:	60da      	str	r2, [r3, #12]
 8108d40:	e17c      	b.n	810903c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8108d42:	2301      	movs	r3, #1
 8108d44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8108d48:	e178      	b.n	810903c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8108d4a:	697b      	ldr	r3, [r7, #20]
 8108d4c:	69db      	ldr	r3, [r3, #28]
 8108d4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8108d52:	f040 80c5 	bne.w	8108ee0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8108d56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8108d5a:	2b20      	cmp	r3, #32
 8108d5c:	dc48      	bgt.n	8108df0 <UART_SetConfig+0x848>
 8108d5e:	2b00      	cmp	r3, #0
 8108d60:	db7b      	blt.n	8108e5a <UART_SetConfig+0x8b2>
 8108d62:	2b20      	cmp	r3, #32
 8108d64:	d879      	bhi.n	8108e5a <UART_SetConfig+0x8b2>
 8108d66:	a201      	add	r2, pc, #4	@ (adr r2, 8108d6c <UART_SetConfig+0x7c4>)
 8108d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108d6c:	08108df7 	.word	0x08108df7
 8108d70:	08108dff 	.word	0x08108dff
 8108d74:	08108e5b 	.word	0x08108e5b
 8108d78:	08108e5b 	.word	0x08108e5b
 8108d7c:	08108e07 	.word	0x08108e07
 8108d80:	08108e5b 	.word	0x08108e5b
 8108d84:	08108e5b 	.word	0x08108e5b
 8108d88:	08108e5b 	.word	0x08108e5b
 8108d8c:	08108e17 	.word	0x08108e17
 8108d90:	08108e5b 	.word	0x08108e5b
 8108d94:	08108e5b 	.word	0x08108e5b
 8108d98:	08108e5b 	.word	0x08108e5b
 8108d9c:	08108e5b 	.word	0x08108e5b
 8108da0:	08108e5b 	.word	0x08108e5b
 8108da4:	08108e5b 	.word	0x08108e5b
 8108da8:	08108e5b 	.word	0x08108e5b
 8108dac:	08108e27 	.word	0x08108e27
 8108db0:	08108e5b 	.word	0x08108e5b
 8108db4:	08108e5b 	.word	0x08108e5b
 8108db8:	08108e5b 	.word	0x08108e5b
 8108dbc:	08108e5b 	.word	0x08108e5b
 8108dc0:	08108e5b 	.word	0x08108e5b
 8108dc4:	08108e5b 	.word	0x08108e5b
 8108dc8:	08108e5b 	.word	0x08108e5b
 8108dcc:	08108e5b 	.word	0x08108e5b
 8108dd0:	08108e5b 	.word	0x08108e5b
 8108dd4:	08108e5b 	.word	0x08108e5b
 8108dd8:	08108e5b 	.word	0x08108e5b
 8108ddc:	08108e5b 	.word	0x08108e5b
 8108de0:	08108e5b 	.word	0x08108e5b
 8108de4:	08108e5b 	.word	0x08108e5b
 8108de8:	08108e5b 	.word	0x08108e5b
 8108dec:	08108e4d 	.word	0x08108e4d
 8108df0:	2b40      	cmp	r3, #64	@ 0x40
 8108df2:	d02e      	beq.n	8108e52 <UART_SetConfig+0x8aa>
 8108df4:	e031      	b.n	8108e5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108df6:	f7fc faad 	bl	8105354 <HAL_RCC_GetPCLK1Freq>
 8108dfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108dfc:	e033      	b.n	8108e66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108dfe:	f7fc fabf 	bl	8105380 <HAL_RCC_GetPCLK2Freq>
 8108e02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108e04:	e02f      	b.n	8108e66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108e06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108e0a:	4618      	mov	r0, r3
 8108e0c:	f7fd fcee 	bl	81067ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108e14:	e027      	b.n	8108e66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108e16:	f107 0318 	add.w	r3, r7, #24
 8108e1a:	4618      	mov	r0, r3
 8108e1c:	f7fd fe3a 	bl	8106a94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108e20:	69fb      	ldr	r3, [r7, #28]
 8108e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108e24:	e01f      	b.n	8108e66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108e26:	4b2d      	ldr	r3, [pc, #180]	@ (8108edc <UART_SetConfig+0x934>)
 8108e28:	681b      	ldr	r3, [r3, #0]
 8108e2a:	f003 0320 	and.w	r3, r3, #32
 8108e2e:	2b00      	cmp	r3, #0
 8108e30:	d009      	beq.n	8108e46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108e32:	4b2a      	ldr	r3, [pc, #168]	@ (8108edc <UART_SetConfig+0x934>)
 8108e34:	681b      	ldr	r3, [r3, #0]
 8108e36:	08db      	lsrs	r3, r3, #3
 8108e38:	f003 0303 	and.w	r3, r3, #3
 8108e3c:	4a24      	ldr	r2, [pc, #144]	@ (8108ed0 <UART_SetConfig+0x928>)
 8108e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8108e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108e44:	e00f      	b.n	8108e66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8108e46:	4b22      	ldr	r3, [pc, #136]	@ (8108ed0 <UART_SetConfig+0x928>)
 8108e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108e4a:	e00c      	b.n	8108e66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108e4c:	4b21      	ldr	r3, [pc, #132]	@ (8108ed4 <UART_SetConfig+0x92c>)
 8108e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108e50:	e009      	b.n	8108e66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8108e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108e58:	e005      	b.n	8108e66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8108e5a:	2300      	movs	r3, #0
 8108e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8108e5e:	2301      	movs	r3, #1
 8108e60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8108e64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8108e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108e68:	2b00      	cmp	r3, #0
 8108e6a:	f000 80e7 	beq.w	810903c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108e6e:	697b      	ldr	r3, [r7, #20]
 8108e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108e72:	4a19      	ldr	r2, [pc, #100]	@ (8108ed8 <UART_SetConfig+0x930>)
 8108e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108e78:	461a      	mov	r2, r3
 8108e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8108e80:	005a      	lsls	r2, r3, #1
 8108e82:	697b      	ldr	r3, [r7, #20]
 8108e84:	685b      	ldr	r3, [r3, #4]
 8108e86:	085b      	lsrs	r3, r3, #1
 8108e88:	441a      	add	r2, r3
 8108e8a:	697b      	ldr	r3, [r7, #20]
 8108e8c:	685b      	ldr	r3, [r3, #4]
 8108e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8108e92:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108e96:	2b0f      	cmp	r3, #15
 8108e98:	d916      	bls.n	8108ec8 <UART_SetConfig+0x920>
 8108e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108ea0:	d212      	bcs.n	8108ec8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8108ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108ea4:	b29b      	uxth	r3, r3
 8108ea6:	f023 030f 	bic.w	r3, r3, #15
 8108eaa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8108eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108eae:	085b      	lsrs	r3, r3, #1
 8108eb0:	b29b      	uxth	r3, r3
 8108eb2:	f003 0307 	and.w	r3, r3, #7
 8108eb6:	b29a      	uxth	r2, r3
 8108eb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8108eba:	4313      	orrs	r3, r2
 8108ebc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8108ebe:	697b      	ldr	r3, [r7, #20]
 8108ec0:	681b      	ldr	r3, [r3, #0]
 8108ec2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8108ec4:	60da      	str	r2, [r3, #12]
 8108ec6:	e0b9      	b.n	810903c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8108ec8:	2301      	movs	r3, #1
 8108eca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8108ece:	e0b5      	b.n	810903c <UART_SetConfig+0xa94>
 8108ed0:	03d09000 	.word	0x03d09000
 8108ed4:	003d0900 	.word	0x003d0900
 8108ed8:	0810ea70 	.word	0x0810ea70
 8108edc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8108ee0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8108ee4:	2b20      	cmp	r3, #32
 8108ee6:	dc49      	bgt.n	8108f7c <UART_SetConfig+0x9d4>
 8108ee8:	2b00      	cmp	r3, #0
 8108eea:	db7c      	blt.n	8108fe6 <UART_SetConfig+0xa3e>
 8108eec:	2b20      	cmp	r3, #32
 8108eee:	d87a      	bhi.n	8108fe6 <UART_SetConfig+0xa3e>
 8108ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8108ef8 <UART_SetConfig+0x950>)
 8108ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108ef6:	bf00      	nop
 8108ef8:	08108f83 	.word	0x08108f83
 8108efc:	08108f8b 	.word	0x08108f8b
 8108f00:	08108fe7 	.word	0x08108fe7
 8108f04:	08108fe7 	.word	0x08108fe7
 8108f08:	08108f93 	.word	0x08108f93
 8108f0c:	08108fe7 	.word	0x08108fe7
 8108f10:	08108fe7 	.word	0x08108fe7
 8108f14:	08108fe7 	.word	0x08108fe7
 8108f18:	08108fa3 	.word	0x08108fa3
 8108f1c:	08108fe7 	.word	0x08108fe7
 8108f20:	08108fe7 	.word	0x08108fe7
 8108f24:	08108fe7 	.word	0x08108fe7
 8108f28:	08108fe7 	.word	0x08108fe7
 8108f2c:	08108fe7 	.word	0x08108fe7
 8108f30:	08108fe7 	.word	0x08108fe7
 8108f34:	08108fe7 	.word	0x08108fe7
 8108f38:	08108fb3 	.word	0x08108fb3
 8108f3c:	08108fe7 	.word	0x08108fe7
 8108f40:	08108fe7 	.word	0x08108fe7
 8108f44:	08108fe7 	.word	0x08108fe7
 8108f48:	08108fe7 	.word	0x08108fe7
 8108f4c:	08108fe7 	.word	0x08108fe7
 8108f50:	08108fe7 	.word	0x08108fe7
 8108f54:	08108fe7 	.word	0x08108fe7
 8108f58:	08108fe7 	.word	0x08108fe7
 8108f5c:	08108fe7 	.word	0x08108fe7
 8108f60:	08108fe7 	.word	0x08108fe7
 8108f64:	08108fe7 	.word	0x08108fe7
 8108f68:	08108fe7 	.word	0x08108fe7
 8108f6c:	08108fe7 	.word	0x08108fe7
 8108f70:	08108fe7 	.word	0x08108fe7
 8108f74:	08108fe7 	.word	0x08108fe7
 8108f78:	08108fd9 	.word	0x08108fd9
 8108f7c:	2b40      	cmp	r3, #64	@ 0x40
 8108f7e:	d02e      	beq.n	8108fde <UART_SetConfig+0xa36>
 8108f80:	e031      	b.n	8108fe6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108f82:	f7fc f9e7 	bl	8105354 <HAL_RCC_GetPCLK1Freq>
 8108f86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108f88:	e033      	b.n	8108ff2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108f8a:	f7fc f9f9 	bl	8105380 <HAL_RCC_GetPCLK2Freq>
 8108f8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108f90:	e02f      	b.n	8108ff2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108f96:	4618      	mov	r0, r3
 8108f98:	f7fd fc28 	bl	81067ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108fa0:	e027      	b.n	8108ff2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108fa2:	f107 0318 	add.w	r3, r7, #24
 8108fa6:	4618      	mov	r0, r3
 8108fa8:	f7fd fd74 	bl	8106a94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108fac:	69fb      	ldr	r3, [r7, #28]
 8108fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108fb0:	e01f      	b.n	8108ff2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108fb2:	4b2d      	ldr	r3, [pc, #180]	@ (8109068 <UART_SetConfig+0xac0>)
 8108fb4:	681b      	ldr	r3, [r3, #0]
 8108fb6:	f003 0320 	and.w	r3, r3, #32
 8108fba:	2b00      	cmp	r3, #0
 8108fbc:	d009      	beq.n	8108fd2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8109068 <UART_SetConfig+0xac0>)
 8108fc0:	681b      	ldr	r3, [r3, #0]
 8108fc2:	08db      	lsrs	r3, r3, #3
 8108fc4:	f003 0303 	and.w	r3, r3, #3
 8108fc8:	4a28      	ldr	r2, [pc, #160]	@ (810906c <UART_SetConfig+0xac4>)
 8108fca:	fa22 f303 	lsr.w	r3, r2, r3
 8108fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108fd0:	e00f      	b.n	8108ff2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8108fd2:	4b26      	ldr	r3, [pc, #152]	@ (810906c <UART_SetConfig+0xac4>)
 8108fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108fd6:	e00c      	b.n	8108ff2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108fd8:	4b25      	ldr	r3, [pc, #148]	@ (8109070 <UART_SetConfig+0xac8>)
 8108fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108fdc:	e009      	b.n	8108ff2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108fde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8108fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108fe4:	e005      	b.n	8108ff2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8108fe6:	2300      	movs	r3, #0
 8108fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8108fea:	2301      	movs	r3, #1
 8108fec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8108ff0:	bf00      	nop
    }

    if (pclk != 0U)
 8108ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108ff4:	2b00      	cmp	r3, #0
 8108ff6:	d021      	beq.n	810903c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108ff8:	697b      	ldr	r3, [r7, #20]
 8108ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8109074 <UART_SetConfig+0xacc>)
 8108ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109002:	461a      	mov	r2, r3
 8109004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109006:	fbb3 f2f2 	udiv	r2, r3, r2
 810900a:	697b      	ldr	r3, [r7, #20]
 810900c:	685b      	ldr	r3, [r3, #4]
 810900e:	085b      	lsrs	r3, r3, #1
 8109010:	441a      	add	r2, r3
 8109012:	697b      	ldr	r3, [r7, #20]
 8109014:	685b      	ldr	r3, [r3, #4]
 8109016:	fbb2 f3f3 	udiv	r3, r2, r3
 810901a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810901c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810901e:	2b0f      	cmp	r3, #15
 8109020:	d909      	bls.n	8109036 <UART_SetConfig+0xa8e>
 8109022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109028:	d205      	bcs.n	8109036 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810902a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810902c:	b29a      	uxth	r2, r3
 810902e:	697b      	ldr	r3, [r7, #20]
 8109030:	681b      	ldr	r3, [r3, #0]
 8109032:	60da      	str	r2, [r3, #12]
 8109034:	e002      	b.n	810903c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8109036:	2301      	movs	r3, #1
 8109038:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810903c:	697b      	ldr	r3, [r7, #20]
 810903e:	2201      	movs	r2, #1
 8109040:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8109044:	697b      	ldr	r3, [r7, #20]
 8109046:	2201      	movs	r2, #1
 8109048:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810904c:	697b      	ldr	r3, [r7, #20]
 810904e:	2200      	movs	r2, #0
 8109050:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8109052:	697b      	ldr	r3, [r7, #20]
 8109054:	2200      	movs	r2, #0
 8109056:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8109058:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810905c:	4618      	mov	r0, r3
 810905e:	3748      	adds	r7, #72	@ 0x48
 8109060:	46bd      	mov	sp, r7
 8109062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8109066:	bf00      	nop
 8109068:	58024400 	.word	0x58024400
 810906c:	03d09000 	.word	0x03d09000
 8109070:	003d0900 	.word	0x003d0900
 8109074:	0810ea70 	.word	0x0810ea70

08109078 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8109078:	b480      	push	{r7}
 810907a:	b083      	sub	sp, #12
 810907c:	af00      	add	r7, sp, #0
 810907e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8109080:	687b      	ldr	r3, [r7, #4]
 8109082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109084:	f003 0308 	and.w	r3, r3, #8
 8109088:	2b00      	cmp	r3, #0
 810908a:	d00a      	beq.n	81090a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810908c:	687b      	ldr	r3, [r7, #4]
 810908e:	681b      	ldr	r3, [r3, #0]
 8109090:	685b      	ldr	r3, [r3, #4]
 8109092:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8109096:	687b      	ldr	r3, [r7, #4]
 8109098:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810909a:	687b      	ldr	r3, [r7, #4]
 810909c:	681b      	ldr	r3, [r3, #0]
 810909e:	430a      	orrs	r2, r1
 81090a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81090a2:	687b      	ldr	r3, [r7, #4]
 81090a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81090a6:	f003 0301 	and.w	r3, r3, #1
 81090aa:	2b00      	cmp	r3, #0
 81090ac:	d00a      	beq.n	81090c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81090ae:	687b      	ldr	r3, [r7, #4]
 81090b0:	681b      	ldr	r3, [r3, #0]
 81090b2:	685b      	ldr	r3, [r3, #4]
 81090b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 81090b8:	687b      	ldr	r3, [r7, #4]
 81090ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81090bc:	687b      	ldr	r3, [r7, #4]
 81090be:	681b      	ldr	r3, [r3, #0]
 81090c0:	430a      	orrs	r2, r1
 81090c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81090c4:	687b      	ldr	r3, [r7, #4]
 81090c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81090c8:	f003 0302 	and.w	r3, r3, #2
 81090cc:	2b00      	cmp	r3, #0
 81090ce:	d00a      	beq.n	81090e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81090d0:	687b      	ldr	r3, [r7, #4]
 81090d2:	681b      	ldr	r3, [r3, #0]
 81090d4:	685b      	ldr	r3, [r3, #4]
 81090d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81090da:	687b      	ldr	r3, [r7, #4]
 81090dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81090de:	687b      	ldr	r3, [r7, #4]
 81090e0:	681b      	ldr	r3, [r3, #0]
 81090e2:	430a      	orrs	r2, r1
 81090e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81090e6:	687b      	ldr	r3, [r7, #4]
 81090e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81090ea:	f003 0304 	and.w	r3, r3, #4
 81090ee:	2b00      	cmp	r3, #0
 81090f0:	d00a      	beq.n	8109108 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81090f2:	687b      	ldr	r3, [r7, #4]
 81090f4:	681b      	ldr	r3, [r3, #0]
 81090f6:	685b      	ldr	r3, [r3, #4]
 81090f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 81090fc:	687b      	ldr	r3, [r7, #4]
 81090fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109100:	687b      	ldr	r3, [r7, #4]
 8109102:	681b      	ldr	r3, [r3, #0]
 8109104:	430a      	orrs	r2, r1
 8109106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8109108:	687b      	ldr	r3, [r7, #4]
 810910a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810910c:	f003 0310 	and.w	r3, r3, #16
 8109110:	2b00      	cmp	r3, #0
 8109112:	d00a      	beq.n	810912a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8109114:	687b      	ldr	r3, [r7, #4]
 8109116:	681b      	ldr	r3, [r3, #0]
 8109118:	689b      	ldr	r3, [r3, #8]
 810911a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810911e:	687b      	ldr	r3, [r7, #4]
 8109120:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8109122:	687b      	ldr	r3, [r7, #4]
 8109124:	681b      	ldr	r3, [r3, #0]
 8109126:	430a      	orrs	r2, r1
 8109128:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810912a:	687b      	ldr	r3, [r7, #4]
 810912c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810912e:	f003 0320 	and.w	r3, r3, #32
 8109132:	2b00      	cmp	r3, #0
 8109134:	d00a      	beq.n	810914c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8109136:	687b      	ldr	r3, [r7, #4]
 8109138:	681b      	ldr	r3, [r3, #0]
 810913a:	689b      	ldr	r3, [r3, #8]
 810913c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8109140:	687b      	ldr	r3, [r7, #4]
 8109142:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8109144:	687b      	ldr	r3, [r7, #4]
 8109146:	681b      	ldr	r3, [r3, #0]
 8109148:	430a      	orrs	r2, r1
 810914a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810914c:	687b      	ldr	r3, [r7, #4]
 810914e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109154:	2b00      	cmp	r3, #0
 8109156:	d01a      	beq.n	810918e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8109158:	687b      	ldr	r3, [r7, #4]
 810915a:	681b      	ldr	r3, [r3, #0]
 810915c:	685b      	ldr	r3, [r3, #4]
 810915e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8109162:	687b      	ldr	r3, [r7, #4]
 8109164:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8109166:	687b      	ldr	r3, [r7, #4]
 8109168:	681b      	ldr	r3, [r3, #0]
 810916a:	430a      	orrs	r2, r1
 810916c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810916e:	687b      	ldr	r3, [r7, #4]
 8109170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109172:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8109176:	d10a      	bne.n	810918e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8109178:	687b      	ldr	r3, [r7, #4]
 810917a:	681b      	ldr	r3, [r3, #0]
 810917c:	685b      	ldr	r3, [r3, #4]
 810917e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8109182:	687b      	ldr	r3, [r7, #4]
 8109184:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8109186:	687b      	ldr	r3, [r7, #4]
 8109188:	681b      	ldr	r3, [r3, #0]
 810918a:	430a      	orrs	r2, r1
 810918c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810918e:	687b      	ldr	r3, [r7, #4]
 8109190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109196:	2b00      	cmp	r3, #0
 8109198:	d00a      	beq.n	81091b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810919a:	687b      	ldr	r3, [r7, #4]
 810919c:	681b      	ldr	r3, [r3, #0]
 810919e:	685b      	ldr	r3, [r3, #4]
 81091a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 81091a4:	687b      	ldr	r3, [r7, #4]
 81091a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 81091a8:	687b      	ldr	r3, [r7, #4]
 81091aa:	681b      	ldr	r3, [r3, #0]
 81091ac:	430a      	orrs	r2, r1
 81091ae:	605a      	str	r2, [r3, #4]
  }
}
 81091b0:	bf00      	nop
 81091b2:	370c      	adds	r7, #12
 81091b4:	46bd      	mov	sp, r7
 81091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091ba:	4770      	bx	lr

081091bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81091bc:	b580      	push	{r7, lr}
 81091be:	b098      	sub	sp, #96	@ 0x60
 81091c0:	af02      	add	r7, sp, #8
 81091c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81091c4:	687b      	ldr	r3, [r7, #4]
 81091c6:	2200      	movs	r2, #0
 81091c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81091cc:	f7fa fd88 	bl	8103ce0 <HAL_GetTick>
 81091d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81091d2:	687b      	ldr	r3, [r7, #4]
 81091d4:	681b      	ldr	r3, [r3, #0]
 81091d6:	681b      	ldr	r3, [r3, #0]
 81091d8:	f003 0308 	and.w	r3, r3, #8
 81091dc:	2b08      	cmp	r3, #8
 81091de:	d12f      	bne.n	8109240 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81091e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 81091e4:	9300      	str	r3, [sp, #0]
 81091e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81091e8:	2200      	movs	r2, #0
 81091ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 81091ee:	6878      	ldr	r0, [r7, #4]
 81091f0:	f000 f88e 	bl	8109310 <UART_WaitOnFlagUntilTimeout>
 81091f4:	4603      	mov	r3, r0
 81091f6:	2b00      	cmp	r3, #0
 81091f8:	d022      	beq.n	8109240 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 81091fa:	687b      	ldr	r3, [r7, #4]
 81091fc:	681b      	ldr	r3, [r3, #0]
 81091fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109202:	e853 3f00 	ldrex	r3, [r3]
 8109206:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8109208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810920a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810920e:	653b      	str	r3, [r7, #80]	@ 0x50
 8109210:	687b      	ldr	r3, [r7, #4]
 8109212:	681b      	ldr	r3, [r3, #0]
 8109214:	461a      	mov	r2, r3
 8109216:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8109218:	647b      	str	r3, [r7, #68]	@ 0x44
 810921a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810921c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810921e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8109220:	e841 2300 	strex	r3, r2, [r1]
 8109224:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8109226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109228:	2b00      	cmp	r3, #0
 810922a:	d1e6      	bne.n	81091fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810922c:	687b      	ldr	r3, [r7, #4]
 810922e:	2220      	movs	r2, #32
 8109230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8109234:	687b      	ldr	r3, [r7, #4]
 8109236:	2200      	movs	r2, #0
 8109238:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810923c:	2303      	movs	r3, #3
 810923e:	e063      	b.n	8109308 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8109240:	687b      	ldr	r3, [r7, #4]
 8109242:	681b      	ldr	r3, [r3, #0]
 8109244:	681b      	ldr	r3, [r3, #0]
 8109246:	f003 0304 	and.w	r3, r3, #4
 810924a:	2b04      	cmp	r3, #4
 810924c:	d149      	bne.n	81092e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810924e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8109252:	9300      	str	r3, [sp, #0]
 8109254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8109256:	2200      	movs	r2, #0
 8109258:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810925c:	6878      	ldr	r0, [r7, #4]
 810925e:	f000 f857 	bl	8109310 <UART_WaitOnFlagUntilTimeout>
 8109262:	4603      	mov	r3, r0
 8109264:	2b00      	cmp	r3, #0
 8109266:	d03c      	beq.n	81092e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8109268:	687b      	ldr	r3, [r7, #4]
 810926a:	681b      	ldr	r3, [r3, #0]
 810926c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810926e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109270:	e853 3f00 	ldrex	r3, [r3]
 8109274:	623b      	str	r3, [r7, #32]
   return(result);
 8109276:	6a3b      	ldr	r3, [r7, #32]
 8109278:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810927c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810927e:	687b      	ldr	r3, [r7, #4]
 8109280:	681b      	ldr	r3, [r3, #0]
 8109282:	461a      	mov	r2, r3
 8109284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109286:	633b      	str	r3, [r7, #48]	@ 0x30
 8109288:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810928a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810928c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810928e:	e841 2300 	strex	r3, r2, [r1]
 8109292:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8109294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109296:	2b00      	cmp	r3, #0
 8109298:	d1e6      	bne.n	8109268 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810929a:	687b      	ldr	r3, [r7, #4]
 810929c:	681b      	ldr	r3, [r3, #0]
 810929e:	3308      	adds	r3, #8
 81092a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81092a2:	693b      	ldr	r3, [r7, #16]
 81092a4:	e853 3f00 	ldrex	r3, [r3]
 81092a8:	60fb      	str	r3, [r7, #12]
   return(result);
 81092aa:	68fb      	ldr	r3, [r7, #12]
 81092ac:	f023 0301 	bic.w	r3, r3, #1
 81092b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 81092b2:	687b      	ldr	r3, [r7, #4]
 81092b4:	681b      	ldr	r3, [r3, #0]
 81092b6:	3308      	adds	r3, #8
 81092b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81092ba:	61fa      	str	r2, [r7, #28]
 81092bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81092be:	69b9      	ldr	r1, [r7, #24]
 81092c0:	69fa      	ldr	r2, [r7, #28]
 81092c2:	e841 2300 	strex	r3, r2, [r1]
 81092c6:	617b      	str	r3, [r7, #20]
   return(result);
 81092c8:	697b      	ldr	r3, [r7, #20]
 81092ca:	2b00      	cmp	r3, #0
 81092cc:	d1e5      	bne.n	810929a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 81092ce:	687b      	ldr	r3, [r7, #4]
 81092d0:	2220      	movs	r2, #32
 81092d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 81092d6:	687b      	ldr	r3, [r7, #4]
 81092d8:	2200      	movs	r2, #0
 81092da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 81092de:	2303      	movs	r3, #3
 81092e0:	e012      	b.n	8109308 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81092e2:	687b      	ldr	r3, [r7, #4]
 81092e4:	2220      	movs	r2, #32
 81092e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 81092ea:	687b      	ldr	r3, [r7, #4]
 81092ec:	2220      	movs	r2, #32
 81092ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81092f2:	687b      	ldr	r3, [r7, #4]
 81092f4:	2200      	movs	r2, #0
 81092f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 81092f8:	687b      	ldr	r3, [r7, #4]
 81092fa:	2200      	movs	r2, #0
 81092fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 81092fe:	687b      	ldr	r3, [r7, #4]
 8109300:	2200      	movs	r2, #0
 8109302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8109306:	2300      	movs	r3, #0
}
 8109308:	4618      	mov	r0, r3
 810930a:	3758      	adds	r7, #88	@ 0x58
 810930c:	46bd      	mov	sp, r7
 810930e:	bd80      	pop	{r7, pc}

08109310 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8109310:	b580      	push	{r7, lr}
 8109312:	b084      	sub	sp, #16
 8109314:	af00      	add	r7, sp, #0
 8109316:	60f8      	str	r0, [r7, #12]
 8109318:	60b9      	str	r1, [r7, #8]
 810931a:	603b      	str	r3, [r7, #0]
 810931c:	4613      	mov	r3, r2
 810931e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8109320:	e04f      	b.n	81093c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8109322:	69bb      	ldr	r3, [r7, #24]
 8109324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109328:	d04b      	beq.n	81093c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810932a:	f7fa fcd9 	bl	8103ce0 <HAL_GetTick>
 810932e:	4602      	mov	r2, r0
 8109330:	683b      	ldr	r3, [r7, #0]
 8109332:	1ad3      	subs	r3, r2, r3
 8109334:	69ba      	ldr	r2, [r7, #24]
 8109336:	429a      	cmp	r2, r3
 8109338:	d302      	bcc.n	8109340 <UART_WaitOnFlagUntilTimeout+0x30>
 810933a:	69bb      	ldr	r3, [r7, #24]
 810933c:	2b00      	cmp	r3, #0
 810933e:	d101      	bne.n	8109344 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8109340:	2303      	movs	r3, #3
 8109342:	e04e      	b.n	81093e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8109344:	68fb      	ldr	r3, [r7, #12]
 8109346:	681b      	ldr	r3, [r3, #0]
 8109348:	681b      	ldr	r3, [r3, #0]
 810934a:	f003 0304 	and.w	r3, r3, #4
 810934e:	2b00      	cmp	r3, #0
 8109350:	d037      	beq.n	81093c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8109352:	68bb      	ldr	r3, [r7, #8]
 8109354:	2b80      	cmp	r3, #128	@ 0x80
 8109356:	d034      	beq.n	81093c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8109358:	68bb      	ldr	r3, [r7, #8]
 810935a:	2b40      	cmp	r3, #64	@ 0x40
 810935c:	d031      	beq.n	81093c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810935e:	68fb      	ldr	r3, [r7, #12]
 8109360:	681b      	ldr	r3, [r3, #0]
 8109362:	69db      	ldr	r3, [r3, #28]
 8109364:	f003 0308 	and.w	r3, r3, #8
 8109368:	2b08      	cmp	r3, #8
 810936a:	d110      	bne.n	810938e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810936c:	68fb      	ldr	r3, [r7, #12]
 810936e:	681b      	ldr	r3, [r3, #0]
 8109370:	2208      	movs	r2, #8
 8109372:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8109374:	68f8      	ldr	r0, [r7, #12]
 8109376:	f000 f838 	bl	81093ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810937a:	68fb      	ldr	r3, [r7, #12]
 810937c:	2208      	movs	r2, #8
 810937e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8109382:	68fb      	ldr	r3, [r7, #12]
 8109384:	2200      	movs	r2, #0
 8109386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810938a:	2301      	movs	r3, #1
 810938c:	e029      	b.n	81093e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810938e:	68fb      	ldr	r3, [r7, #12]
 8109390:	681b      	ldr	r3, [r3, #0]
 8109392:	69db      	ldr	r3, [r3, #28]
 8109394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8109398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810939c:	d111      	bne.n	81093c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810939e:	68fb      	ldr	r3, [r7, #12]
 81093a0:	681b      	ldr	r3, [r3, #0]
 81093a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81093a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 81093a8:	68f8      	ldr	r0, [r7, #12]
 81093aa:	f000 f81e 	bl	81093ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81093ae:	68fb      	ldr	r3, [r7, #12]
 81093b0:	2220      	movs	r2, #32
 81093b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81093b6:	68fb      	ldr	r3, [r7, #12]
 81093b8:	2200      	movs	r2, #0
 81093ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 81093be:	2303      	movs	r3, #3
 81093c0:	e00f      	b.n	81093e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81093c2:	68fb      	ldr	r3, [r7, #12]
 81093c4:	681b      	ldr	r3, [r3, #0]
 81093c6:	69da      	ldr	r2, [r3, #28]
 81093c8:	68bb      	ldr	r3, [r7, #8]
 81093ca:	4013      	ands	r3, r2
 81093cc:	68ba      	ldr	r2, [r7, #8]
 81093ce:	429a      	cmp	r2, r3
 81093d0:	bf0c      	ite	eq
 81093d2:	2301      	moveq	r3, #1
 81093d4:	2300      	movne	r3, #0
 81093d6:	b2db      	uxtb	r3, r3
 81093d8:	461a      	mov	r2, r3
 81093da:	79fb      	ldrb	r3, [r7, #7]
 81093dc:	429a      	cmp	r2, r3
 81093de:	d0a0      	beq.n	8109322 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81093e0:	2300      	movs	r3, #0
}
 81093e2:	4618      	mov	r0, r3
 81093e4:	3710      	adds	r7, #16
 81093e6:	46bd      	mov	sp, r7
 81093e8:	bd80      	pop	{r7, pc}

081093ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81093ea:	b480      	push	{r7}
 81093ec:	b095      	sub	sp, #84	@ 0x54
 81093ee:	af00      	add	r7, sp, #0
 81093f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81093f2:	687b      	ldr	r3, [r7, #4]
 81093f4:	681b      	ldr	r3, [r3, #0]
 81093f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81093f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81093fa:	e853 3f00 	ldrex	r3, [r3]
 81093fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8109400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109402:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8109406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8109408:	687b      	ldr	r3, [r7, #4]
 810940a:	681b      	ldr	r3, [r3, #0]
 810940c:	461a      	mov	r2, r3
 810940e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109410:	643b      	str	r3, [r7, #64]	@ 0x40
 8109412:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109414:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8109416:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8109418:	e841 2300 	strex	r3, r2, [r1]
 810941c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810941e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109420:	2b00      	cmp	r3, #0
 8109422:	d1e6      	bne.n	81093f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8109424:	687b      	ldr	r3, [r7, #4]
 8109426:	681b      	ldr	r3, [r3, #0]
 8109428:	3308      	adds	r3, #8
 810942a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810942c:	6a3b      	ldr	r3, [r7, #32]
 810942e:	e853 3f00 	ldrex	r3, [r3]
 8109432:	61fb      	str	r3, [r7, #28]
   return(result);
 8109434:	69fb      	ldr	r3, [r7, #28]
 8109436:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810943a:	f023 0301 	bic.w	r3, r3, #1
 810943e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8109440:	687b      	ldr	r3, [r7, #4]
 8109442:	681b      	ldr	r3, [r3, #0]
 8109444:	3308      	adds	r3, #8
 8109446:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8109448:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810944a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810944c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810944e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8109450:	e841 2300 	strex	r3, r2, [r1]
 8109454:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8109456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109458:	2b00      	cmp	r3, #0
 810945a:	d1e3      	bne.n	8109424 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810945c:	687b      	ldr	r3, [r7, #4]
 810945e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109460:	2b01      	cmp	r3, #1
 8109462:	d118      	bne.n	8109496 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109464:	687b      	ldr	r3, [r7, #4]
 8109466:	681b      	ldr	r3, [r3, #0]
 8109468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810946a:	68fb      	ldr	r3, [r7, #12]
 810946c:	e853 3f00 	ldrex	r3, [r3]
 8109470:	60bb      	str	r3, [r7, #8]
   return(result);
 8109472:	68bb      	ldr	r3, [r7, #8]
 8109474:	f023 0310 	bic.w	r3, r3, #16
 8109478:	647b      	str	r3, [r7, #68]	@ 0x44
 810947a:	687b      	ldr	r3, [r7, #4]
 810947c:	681b      	ldr	r3, [r3, #0]
 810947e:	461a      	mov	r2, r3
 8109480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8109482:	61bb      	str	r3, [r7, #24]
 8109484:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109486:	6979      	ldr	r1, [r7, #20]
 8109488:	69ba      	ldr	r2, [r7, #24]
 810948a:	e841 2300 	strex	r3, r2, [r1]
 810948e:	613b      	str	r3, [r7, #16]
   return(result);
 8109490:	693b      	ldr	r3, [r7, #16]
 8109492:	2b00      	cmp	r3, #0
 8109494:	d1e6      	bne.n	8109464 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8109496:	687b      	ldr	r3, [r7, #4]
 8109498:	2220      	movs	r2, #32
 810949a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810949e:	687b      	ldr	r3, [r7, #4]
 81094a0:	2200      	movs	r2, #0
 81094a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 81094a4:	687b      	ldr	r3, [r7, #4]
 81094a6:	2200      	movs	r2, #0
 81094a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 81094aa:	bf00      	nop
 81094ac:	3754      	adds	r7, #84	@ 0x54
 81094ae:	46bd      	mov	sp, r7
 81094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094b4:	4770      	bx	lr

081094b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81094b6:	b480      	push	{r7}
 81094b8:	b085      	sub	sp, #20
 81094ba:	af00      	add	r7, sp, #0
 81094bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81094be:	687b      	ldr	r3, [r7, #4]
 81094c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81094c4:	2b01      	cmp	r3, #1
 81094c6:	d101      	bne.n	81094cc <HAL_UARTEx_DisableFifoMode+0x16>
 81094c8:	2302      	movs	r3, #2
 81094ca:	e027      	b.n	810951c <HAL_UARTEx_DisableFifoMode+0x66>
 81094cc:	687b      	ldr	r3, [r7, #4]
 81094ce:	2201      	movs	r2, #1
 81094d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81094d4:	687b      	ldr	r3, [r7, #4]
 81094d6:	2224      	movs	r2, #36	@ 0x24
 81094d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81094dc:	687b      	ldr	r3, [r7, #4]
 81094de:	681b      	ldr	r3, [r3, #0]
 81094e0:	681b      	ldr	r3, [r3, #0]
 81094e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81094e4:	687b      	ldr	r3, [r7, #4]
 81094e6:	681b      	ldr	r3, [r3, #0]
 81094e8:	681a      	ldr	r2, [r3, #0]
 81094ea:	687b      	ldr	r3, [r7, #4]
 81094ec:	681b      	ldr	r3, [r3, #0]
 81094ee:	f022 0201 	bic.w	r2, r2, #1
 81094f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81094f4:	68fb      	ldr	r3, [r7, #12]
 81094f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 81094fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81094fc:	687b      	ldr	r3, [r7, #4]
 81094fe:	2200      	movs	r2, #0
 8109500:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109502:	687b      	ldr	r3, [r7, #4]
 8109504:	681b      	ldr	r3, [r3, #0]
 8109506:	68fa      	ldr	r2, [r7, #12]
 8109508:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810950a:	687b      	ldr	r3, [r7, #4]
 810950c:	2220      	movs	r2, #32
 810950e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109512:	687b      	ldr	r3, [r7, #4]
 8109514:	2200      	movs	r2, #0
 8109516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810951a:	2300      	movs	r3, #0
}
 810951c:	4618      	mov	r0, r3
 810951e:	3714      	adds	r7, #20
 8109520:	46bd      	mov	sp, r7
 8109522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109526:	4770      	bx	lr

08109528 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109528:	b580      	push	{r7, lr}
 810952a:	b084      	sub	sp, #16
 810952c:	af00      	add	r7, sp, #0
 810952e:	6078      	str	r0, [r7, #4]
 8109530:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109532:	687b      	ldr	r3, [r7, #4]
 8109534:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8109538:	2b01      	cmp	r3, #1
 810953a:	d101      	bne.n	8109540 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810953c:	2302      	movs	r3, #2
 810953e:	e02d      	b.n	810959c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8109540:	687b      	ldr	r3, [r7, #4]
 8109542:	2201      	movs	r2, #1
 8109544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8109548:	687b      	ldr	r3, [r7, #4]
 810954a:	2224      	movs	r2, #36	@ 0x24
 810954c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109550:	687b      	ldr	r3, [r7, #4]
 8109552:	681b      	ldr	r3, [r3, #0]
 8109554:	681b      	ldr	r3, [r3, #0]
 8109556:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109558:	687b      	ldr	r3, [r7, #4]
 810955a:	681b      	ldr	r3, [r3, #0]
 810955c:	681a      	ldr	r2, [r3, #0]
 810955e:	687b      	ldr	r3, [r7, #4]
 8109560:	681b      	ldr	r3, [r3, #0]
 8109562:	f022 0201 	bic.w	r2, r2, #1
 8109566:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8109568:	687b      	ldr	r3, [r7, #4]
 810956a:	681b      	ldr	r3, [r3, #0]
 810956c:	689b      	ldr	r3, [r3, #8]
 810956e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8109572:	687b      	ldr	r3, [r7, #4]
 8109574:	681b      	ldr	r3, [r3, #0]
 8109576:	683a      	ldr	r2, [r7, #0]
 8109578:	430a      	orrs	r2, r1
 810957a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810957c:	6878      	ldr	r0, [r7, #4]
 810957e:	f000 f84f 	bl	8109620 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109582:	687b      	ldr	r3, [r7, #4]
 8109584:	681b      	ldr	r3, [r3, #0]
 8109586:	68fa      	ldr	r2, [r7, #12]
 8109588:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810958a:	687b      	ldr	r3, [r7, #4]
 810958c:	2220      	movs	r2, #32
 810958e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109592:	687b      	ldr	r3, [r7, #4]
 8109594:	2200      	movs	r2, #0
 8109596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810959a:	2300      	movs	r3, #0
}
 810959c:	4618      	mov	r0, r3
 810959e:	3710      	adds	r7, #16
 81095a0:	46bd      	mov	sp, r7
 81095a2:	bd80      	pop	{r7, pc}

081095a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81095a4:	b580      	push	{r7, lr}
 81095a6:	b084      	sub	sp, #16
 81095a8:	af00      	add	r7, sp, #0
 81095aa:	6078      	str	r0, [r7, #4]
 81095ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81095ae:	687b      	ldr	r3, [r7, #4]
 81095b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81095b4:	2b01      	cmp	r3, #1
 81095b6:	d101      	bne.n	81095bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81095b8:	2302      	movs	r3, #2
 81095ba:	e02d      	b.n	8109618 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81095bc:	687b      	ldr	r3, [r7, #4]
 81095be:	2201      	movs	r2, #1
 81095c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81095c4:	687b      	ldr	r3, [r7, #4]
 81095c6:	2224      	movs	r2, #36	@ 0x24
 81095c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81095cc:	687b      	ldr	r3, [r7, #4]
 81095ce:	681b      	ldr	r3, [r3, #0]
 81095d0:	681b      	ldr	r3, [r3, #0]
 81095d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81095d4:	687b      	ldr	r3, [r7, #4]
 81095d6:	681b      	ldr	r3, [r3, #0]
 81095d8:	681a      	ldr	r2, [r3, #0]
 81095da:	687b      	ldr	r3, [r7, #4]
 81095dc:	681b      	ldr	r3, [r3, #0]
 81095de:	f022 0201 	bic.w	r2, r2, #1
 81095e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81095e4:	687b      	ldr	r3, [r7, #4]
 81095e6:	681b      	ldr	r3, [r3, #0]
 81095e8:	689b      	ldr	r3, [r3, #8]
 81095ea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 81095ee:	687b      	ldr	r3, [r7, #4]
 81095f0:	681b      	ldr	r3, [r3, #0]
 81095f2:	683a      	ldr	r2, [r7, #0]
 81095f4:	430a      	orrs	r2, r1
 81095f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81095f8:	6878      	ldr	r0, [r7, #4]
 81095fa:	f000 f811 	bl	8109620 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81095fe:	687b      	ldr	r3, [r7, #4]
 8109600:	681b      	ldr	r3, [r3, #0]
 8109602:	68fa      	ldr	r2, [r7, #12]
 8109604:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109606:	687b      	ldr	r3, [r7, #4]
 8109608:	2220      	movs	r2, #32
 810960a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810960e:	687b      	ldr	r3, [r7, #4]
 8109610:	2200      	movs	r2, #0
 8109612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8109616:	2300      	movs	r3, #0
}
 8109618:	4618      	mov	r0, r3
 810961a:	3710      	adds	r7, #16
 810961c:	46bd      	mov	sp, r7
 810961e:	bd80      	pop	{r7, pc}

08109620 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8109620:	b480      	push	{r7}
 8109622:	b085      	sub	sp, #20
 8109624:	af00      	add	r7, sp, #0
 8109626:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8109628:	687b      	ldr	r3, [r7, #4]
 810962a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810962c:	2b00      	cmp	r3, #0
 810962e:	d108      	bne.n	8109642 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8109630:	687b      	ldr	r3, [r7, #4]
 8109632:	2201      	movs	r2, #1
 8109634:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8109638:	687b      	ldr	r3, [r7, #4]
 810963a:	2201      	movs	r2, #1
 810963c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8109640:	e031      	b.n	81096a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8109642:	2310      	movs	r3, #16
 8109644:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8109646:	2310      	movs	r3, #16
 8109648:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810964a:	687b      	ldr	r3, [r7, #4]
 810964c:	681b      	ldr	r3, [r3, #0]
 810964e:	689b      	ldr	r3, [r3, #8]
 8109650:	0e5b      	lsrs	r3, r3, #25
 8109652:	b2db      	uxtb	r3, r3
 8109654:	f003 0307 	and.w	r3, r3, #7
 8109658:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810965a:	687b      	ldr	r3, [r7, #4]
 810965c:	681b      	ldr	r3, [r3, #0]
 810965e:	689b      	ldr	r3, [r3, #8]
 8109660:	0f5b      	lsrs	r3, r3, #29
 8109662:	b2db      	uxtb	r3, r3
 8109664:	f003 0307 	and.w	r3, r3, #7
 8109668:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810966a:	7bbb      	ldrb	r3, [r7, #14]
 810966c:	7b3a      	ldrb	r2, [r7, #12]
 810966e:	4911      	ldr	r1, [pc, #68]	@ (81096b4 <UARTEx_SetNbDataToProcess+0x94>)
 8109670:	5c8a      	ldrb	r2, [r1, r2]
 8109672:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8109676:	7b3a      	ldrb	r2, [r7, #12]
 8109678:	490f      	ldr	r1, [pc, #60]	@ (81096b8 <UARTEx_SetNbDataToProcess+0x98>)
 810967a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810967c:	fb93 f3f2 	sdiv	r3, r3, r2
 8109680:	b29a      	uxth	r2, r3
 8109682:	687b      	ldr	r3, [r7, #4]
 8109684:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109688:	7bfb      	ldrb	r3, [r7, #15]
 810968a:	7b7a      	ldrb	r2, [r7, #13]
 810968c:	4909      	ldr	r1, [pc, #36]	@ (81096b4 <UARTEx_SetNbDataToProcess+0x94>)
 810968e:	5c8a      	ldrb	r2, [r1, r2]
 8109690:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8109694:	7b7a      	ldrb	r2, [r7, #13]
 8109696:	4908      	ldr	r1, [pc, #32]	@ (81096b8 <UARTEx_SetNbDataToProcess+0x98>)
 8109698:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810969a:	fb93 f3f2 	sdiv	r3, r3, r2
 810969e:	b29a      	uxth	r2, r3
 81096a0:	687b      	ldr	r3, [r7, #4]
 81096a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 81096a6:	bf00      	nop
 81096a8:	3714      	adds	r7, #20
 81096aa:	46bd      	mov	sp, r7
 81096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096b0:	4770      	bx	lr
 81096b2:	bf00      	nop
 81096b4:	0810ea88 	.word	0x0810ea88
 81096b8:	0810ea90 	.word	0x0810ea90

081096bc <__assert_func>:
 81096bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 81096be:	4614      	mov	r4, r2
 81096c0:	461a      	mov	r2, r3
 81096c2:	4b09      	ldr	r3, [pc, #36]	@ (81096e8 <__assert_func+0x2c>)
 81096c4:	681b      	ldr	r3, [r3, #0]
 81096c6:	4605      	mov	r5, r0
 81096c8:	68d8      	ldr	r0, [r3, #12]
 81096ca:	b954      	cbnz	r4, 81096e2 <__assert_func+0x26>
 81096cc:	4b07      	ldr	r3, [pc, #28]	@ (81096ec <__assert_func+0x30>)
 81096ce:	461c      	mov	r4, r3
 81096d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 81096d4:	9100      	str	r1, [sp, #0]
 81096d6:	462b      	mov	r3, r5
 81096d8:	4905      	ldr	r1, [pc, #20]	@ (81096f0 <__assert_func+0x34>)
 81096da:	f000 ff1d 	bl	810a518 <fiprintf>
 81096de:	f001 f98c 	bl	810a9fa <abort>
 81096e2:	4b04      	ldr	r3, [pc, #16]	@ (81096f4 <__assert_func+0x38>)
 81096e4:	e7f4      	b.n	81096d0 <__assert_func+0x14>
 81096e6:	bf00      	nop
 81096e8:	1000002c 	.word	0x1000002c
 81096ec:	0810ead3 	.word	0x0810ead3
 81096f0:	0810eaa5 	.word	0x0810eaa5
 81096f4:	0810ea98 	.word	0x0810ea98

081096f8 <__cvt>:
 81096f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81096fc:	ec57 6b10 	vmov	r6, r7, d0
 8109700:	2f00      	cmp	r7, #0
 8109702:	460c      	mov	r4, r1
 8109704:	4619      	mov	r1, r3
 8109706:	463b      	mov	r3, r7
 8109708:	bfbb      	ittet	lt
 810970a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 810970e:	461f      	movlt	r7, r3
 8109710:	2300      	movge	r3, #0
 8109712:	232d      	movlt	r3, #45	@ 0x2d
 8109714:	700b      	strb	r3, [r1, #0]
 8109716:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8109718:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 810971c:	4691      	mov	r9, r2
 810971e:	f023 0820 	bic.w	r8, r3, #32
 8109722:	bfbc      	itt	lt
 8109724:	4632      	movlt	r2, r6
 8109726:	4616      	movlt	r6, r2
 8109728:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810972c:	d005      	beq.n	810973a <__cvt+0x42>
 810972e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8109732:	d100      	bne.n	8109736 <__cvt+0x3e>
 8109734:	3401      	adds	r4, #1
 8109736:	2102      	movs	r1, #2
 8109738:	e000      	b.n	810973c <__cvt+0x44>
 810973a:	2103      	movs	r1, #3
 810973c:	ab03      	add	r3, sp, #12
 810973e:	9301      	str	r3, [sp, #4]
 8109740:	ab02      	add	r3, sp, #8
 8109742:	9300      	str	r3, [sp, #0]
 8109744:	ec47 6b10 	vmov	d0, r6, r7
 8109748:	4653      	mov	r3, sl
 810974a:	4622      	mov	r2, r4
 810974c:	f001 f9e4 	bl	810ab18 <_dtoa_r>
 8109750:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8109754:	4605      	mov	r5, r0
 8109756:	d119      	bne.n	810978c <__cvt+0x94>
 8109758:	f019 0f01 	tst.w	r9, #1
 810975c:	d00e      	beq.n	810977c <__cvt+0x84>
 810975e:	eb00 0904 	add.w	r9, r0, r4
 8109762:	2200      	movs	r2, #0
 8109764:	2300      	movs	r3, #0
 8109766:	4630      	mov	r0, r6
 8109768:	4639      	mov	r1, r7
 810976a:	f7f7 fa35 	bl	8100bd8 <__aeabi_dcmpeq>
 810976e:	b108      	cbz	r0, 8109774 <__cvt+0x7c>
 8109770:	f8cd 900c 	str.w	r9, [sp, #12]
 8109774:	2230      	movs	r2, #48	@ 0x30
 8109776:	9b03      	ldr	r3, [sp, #12]
 8109778:	454b      	cmp	r3, r9
 810977a:	d31e      	bcc.n	81097ba <__cvt+0xc2>
 810977c:	9b03      	ldr	r3, [sp, #12]
 810977e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8109780:	1b5b      	subs	r3, r3, r5
 8109782:	4628      	mov	r0, r5
 8109784:	6013      	str	r3, [r2, #0]
 8109786:	b004      	add	sp, #16
 8109788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810978c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8109790:	eb00 0904 	add.w	r9, r0, r4
 8109794:	d1e5      	bne.n	8109762 <__cvt+0x6a>
 8109796:	7803      	ldrb	r3, [r0, #0]
 8109798:	2b30      	cmp	r3, #48	@ 0x30
 810979a:	d10a      	bne.n	81097b2 <__cvt+0xba>
 810979c:	2200      	movs	r2, #0
 810979e:	2300      	movs	r3, #0
 81097a0:	4630      	mov	r0, r6
 81097a2:	4639      	mov	r1, r7
 81097a4:	f7f7 fa18 	bl	8100bd8 <__aeabi_dcmpeq>
 81097a8:	b918      	cbnz	r0, 81097b2 <__cvt+0xba>
 81097aa:	f1c4 0401 	rsb	r4, r4, #1
 81097ae:	f8ca 4000 	str.w	r4, [sl]
 81097b2:	f8da 3000 	ldr.w	r3, [sl]
 81097b6:	4499      	add	r9, r3
 81097b8:	e7d3      	b.n	8109762 <__cvt+0x6a>
 81097ba:	1c59      	adds	r1, r3, #1
 81097bc:	9103      	str	r1, [sp, #12]
 81097be:	701a      	strb	r2, [r3, #0]
 81097c0:	e7d9      	b.n	8109776 <__cvt+0x7e>

081097c2 <__exponent>:
 81097c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 81097c4:	2900      	cmp	r1, #0
 81097c6:	bfba      	itte	lt
 81097c8:	4249      	neglt	r1, r1
 81097ca:	232d      	movlt	r3, #45	@ 0x2d
 81097cc:	232b      	movge	r3, #43	@ 0x2b
 81097ce:	2909      	cmp	r1, #9
 81097d0:	7002      	strb	r2, [r0, #0]
 81097d2:	7043      	strb	r3, [r0, #1]
 81097d4:	dd29      	ble.n	810982a <__exponent+0x68>
 81097d6:	f10d 0307 	add.w	r3, sp, #7
 81097da:	461d      	mov	r5, r3
 81097dc:	270a      	movs	r7, #10
 81097de:	461a      	mov	r2, r3
 81097e0:	fbb1 f6f7 	udiv	r6, r1, r7
 81097e4:	fb07 1416 	mls	r4, r7, r6, r1
 81097e8:	3430      	adds	r4, #48	@ 0x30
 81097ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 81097ee:	460c      	mov	r4, r1
 81097f0:	2c63      	cmp	r4, #99	@ 0x63
 81097f2:	f103 33ff 	add.w	r3, r3, #4294967295
 81097f6:	4631      	mov	r1, r6
 81097f8:	dcf1      	bgt.n	81097de <__exponent+0x1c>
 81097fa:	3130      	adds	r1, #48	@ 0x30
 81097fc:	1e94      	subs	r4, r2, #2
 81097fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8109802:	1c41      	adds	r1, r0, #1
 8109804:	4623      	mov	r3, r4
 8109806:	42ab      	cmp	r3, r5
 8109808:	d30a      	bcc.n	8109820 <__exponent+0x5e>
 810980a:	f10d 0309 	add.w	r3, sp, #9
 810980e:	1a9b      	subs	r3, r3, r2
 8109810:	42ac      	cmp	r4, r5
 8109812:	bf88      	it	hi
 8109814:	2300      	movhi	r3, #0
 8109816:	3302      	adds	r3, #2
 8109818:	4403      	add	r3, r0
 810981a:	1a18      	subs	r0, r3, r0
 810981c:	b003      	add	sp, #12
 810981e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8109820:	f813 6b01 	ldrb.w	r6, [r3], #1
 8109824:	f801 6f01 	strb.w	r6, [r1, #1]!
 8109828:	e7ed      	b.n	8109806 <__exponent+0x44>
 810982a:	2330      	movs	r3, #48	@ 0x30
 810982c:	3130      	adds	r1, #48	@ 0x30
 810982e:	7083      	strb	r3, [r0, #2]
 8109830:	70c1      	strb	r1, [r0, #3]
 8109832:	1d03      	adds	r3, r0, #4
 8109834:	e7f1      	b.n	810981a <__exponent+0x58>
	...

08109838 <_printf_float>:
 8109838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810983c:	b08d      	sub	sp, #52	@ 0x34
 810983e:	460c      	mov	r4, r1
 8109840:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8109844:	4616      	mov	r6, r2
 8109846:	461f      	mov	r7, r3
 8109848:	4605      	mov	r5, r0
 810984a:	f001 f839 	bl	810a8c0 <_localeconv_r>
 810984e:	6803      	ldr	r3, [r0, #0]
 8109850:	9304      	str	r3, [sp, #16]
 8109852:	4618      	mov	r0, r3
 8109854:	f7f6 fd94 	bl	8100380 <strlen>
 8109858:	2300      	movs	r3, #0
 810985a:	930a      	str	r3, [sp, #40]	@ 0x28
 810985c:	f8d8 3000 	ldr.w	r3, [r8]
 8109860:	9005      	str	r0, [sp, #20]
 8109862:	3307      	adds	r3, #7
 8109864:	f023 0307 	bic.w	r3, r3, #7
 8109868:	f103 0208 	add.w	r2, r3, #8
 810986c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8109870:	f8d4 b000 	ldr.w	fp, [r4]
 8109874:	f8c8 2000 	str.w	r2, [r8]
 8109878:	e9d3 8900 	ldrd	r8, r9, [r3]
 810987c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8109880:	9307      	str	r3, [sp, #28]
 8109882:	f8cd 8018 	str.w	r8, [sp, #24]
 8109886:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 810988a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810988e:	4b9c      	ldr	r3, [pc, #624]	@ (8109b00 <_printf_float+0x2c8>)
 8109890:	f04f 32ff 	mov.w	r2, #4294967295
 8109894:	f7f7 f9d2 	bl	8100c3c <__aeabi_dcmpun>
 8109898:	bb70      	cbnz	r0, 81098f8 <_printf_float+0xc0>
 810989a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810989e:	4b98      	ldr	r3, [pc, #608]	@ (8109b00 <_printf_float+0x2c8>)
 81098a0:	f04f 32ff 	mov.w	r2, #4294967295
 81098a4:	f7f7 f9ac 	bl	8100c00 <__aeabi_dcmple>
 81098a8:	bb30      	cbnz	r0, 81098f8 <_printf_float+0xc0>
 81098aa:	2200      	movs	r2, #0
 81098ac:	2300      	movs	r3, #0
 81098ae:	4640      	mov	r0, r8
 81098b0:	4649      	mov	r1, r9
 81098b2:	f7f7 f99b 	bl	8100bec <__aeabi_dcmplt>
 81098b6:	b110      	cbz	r0, 81098be <_printf_float+0x86>
 81098b8:	232d      	movs	r3, #45	@ 0x2d
 81098ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81098be:	4a91      	ldr	r2, [pc, #580]	@ (8109b04 <_printf_float+0x2cc>)
 81098c0:	4b91      	ldr	r3, [pc, #580]	@ (8109b08 <_printf_float+0x2d0>)
 81098c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 81098c6:	bf94      	ite	ls
 81098c8:	4690      	movls	r8, r2
 81098ca:	4698      	movhi	r8, r3
 81098cc:	2303      	movs	r3, #3
 81098ce:	6123      	str	r3, [r4, #16]
 81098d0:	f02b 0304 	bic.w	r3, fp, #4
 81098d4:	6023      	str	r3, [r4, #0]
 81098d6:	f04f 0900 	mov.w	r9, #0
 81098da:	9700      	str	r7, [sp, #0]
 81098dc:	4633      	mov	r3, r6
 81098de:	aa0b      	add	r2, sp, #44	@ 0x2c
 81098e0:	4621      	mov	r1, r4
 81098e2:	4628      	mov	r0, r5
 81098e4:	f000 f9d2 	bl	8109c8c <_printf_common>
 81098e8:	3001      	adds	r0, #1
 81098ea:	f040 808d 	bne.w	8109a08 <_printf_float+0x1d0>
 81098ee:	f04f 30ff 	mov.w	r0, #4294967295
 81098f2:	b00d      	add	sp, #52	@ 0x34
 81098f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81098f8:	4642      	mov	r2, r8
 81098fa:	464b      	mov	r3, r9
 81098fc:	4640      	mov	r0, r8
 81098fe:	4649      	mov	r1, r9
 8109900:	f7f7 f99c 	bl	8100c3c <__aeabi_dcmpun>
 8109904:	b140      	cbz	r0, 8109918 <_printf_float+0xe0>
 8109906:	464b      	mov	r3, r9
 8109908:	2b00      	cmp	r3, #0
 810990a:	bfbc      	itt	lt
 810990c:	232d      	movlt	r3, #45	@ 0x2d
 810990e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8109912:	4a7e      	ldr	r2, [pc, #504]	@ (8109b0c <_printf_float+0x2d4>)
 8109914:	4b7e      	ldr	r3, [pc, #504]	@ (8109b10 <_printf_float+0x2d8>)
 8109916:	e7d4      	b.n	81098c2 <_printf_float+0x8a>
 8109918:	6863      	ldr	r3, [r4, #4]
 810991a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 810991e:	9206      	str	r2, [sp, #24]
 8109920:	1c5a      	adds	r2, r3, #1
 8109922:	d13b      	bne.n	810999c <_printf_float+0x164>
 8109924:	2306      	movs	r3, #6
 8109926:	6063      	str	r3, [r4, #4]
 8109928:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 810992c:	2300      	movs	r3, #0
 810992e:	6022      	str	r2, [r4, #0]
 8109930:	9303      	str	r3, [sp, #12]
 8109932:	ab0a      	add	r3, sp, #40	@ 0x28
 8109934:	e9cd a301 	strd	sl, r3, [sp, #4]
 8109938:	ab09      	add	r3, sp, #36	@ 0x24
 810993a:	9300      	str	r3, [sp, #0]
 810993c:	6861      	ldr	r1, [r4, #4]
 810993e:	ec49 8b10 	vmov	d0, r8, r9
 8109942:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8109946:	4628      	mov	r0, r5
 8109948:	f7ff fed6 	bl	81096f8 <__cvt>
 810994c:	9b06      	ldr	r3, [sp, #24]
 810994e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8109950:	2b47      	cmp	r3, #71	@ 0x47
 8109952:	4680      	mov	r8, r0
 8109954:	d129      	bne.n	81099aa <_printf_float+0x172>
 8109956:	1cc8      	adds	r0, r1, #3
 8109958:	db02      	blt.n	8109960 <_printf_float+0x128>
 810995a:	6863      	ldr	r3, [r4, #4]
 810995c:	4299      	cmp	r1, r3
 810995e:	dd41      	ble.n	81099e4 <_printf_float+0x1ac>
 8109960:	f1aa 0a02 	sub.w	sl, sl, #2
 8109964:	fa5f fa8a 	uxtb.w	sl, sl
 8109968:	3901      	subs	r1, #1
 810996a:	4652      	mov	r2, sl
 810996c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8109970:	9109      	str	r1, [sp, #36]	@ 0x24
 8109972:	f7ff ff26 	bl	81097c2 <__exponent>
 8109976:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8109978:	1813      	adds	r3, r2, r0
 810997a:	2a01      	cmp	r2, #1
 810997c:	4681      	mov	r9, r0
 810997e:	6123      	str	r3, [r4, #16]
 8109980:	dc02      	bgt.n	8109988 <_printf_float+0x150>
 8109982:	6822      	ldr	r2, [r4, #0]
 8109984:	07d2      	lsls	r2, r2, #31
 8109986:	d501      	bpl.n	810998c <_printf_float+0x154>
 8109988:	3301      	adds	r3, #1
 810998a:	6123      	str	r3, [r4, #16]
 810998c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8109990:	2b00      	cmp	r3, #0
 8109992:	d0a2      	beq.n	81098da <_printf_float+0xa2>
 8109994:	232d      	movs	r3, #45	@ 0x2d
 8109996:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810999a:	e79e      	b.n	81098da <_printf_float+0xa2>
 810999c:	9a06      	ldr	r2, [sp, #24]
 810999e:	2a47      	cmp	r2, #71	@ 0x47
 81099a0:	d1c2      	bne.n	8109928 <_printf_float+0xf0>
 81099a2:	2b00      	cmp	r3, #0
 81099a4:	d1c0      	bne.n	8109928 <_printf_float+0xf0>
 81099a6:	2301      	movs	r3, #1
 81099a8:	e7bd      	b.n	8109926 <_printf_float+0xee>
 81099aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 81099ae:	d9db      	bls.n	8109968 <_printf_float+0x130>
 81099b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 81099b4:	d118      	bne.n	81099e8 <_printf_float+0x1b0>
 81099b6:	2900      	cmp	r1, #0
 81099b8:	6863      	ldr	r3, [r4, #4]
 81099ba:	dd0b      	ble.n	81099d4 <_printf_float+0x19c>
 81099bc:	6121      	str	r1, [r4, #16]
 81099be:	b913      	cbnz	r3, 81099c6 <_printf_float+0x18e>
 81099c0:	6822      	ldr	r2, [r4, #0]
 81099c2:	07d0      	lsls	r0, r2, #31
 81099c4:	d502      	bpl.n	81099cc <_printf_float+0x194>
 81099c6:	3301      	adds	r3, #1
 81099c8:	440b      	add	r3, r1
 81099ca:	6123      	str	r3, [r4, #16]
 81099cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 81099ce:	f04f 0900 	mov.w	r9, #0
 81099d2:	e7db      	b.n	810998c <_printf_float+0x154>
 81099d4:	b913      	cbnz	r3, 81099dc <_printf_float+0x1a4>
 81099d6:	6822      	ldr	r2, [r4, #0]
 81099d8:	07d2      	lsls	r2, r2, #31
 81099da:	d501      	bpl.n	81099e0 <_printf_float+0x1a8>
 81099dc:	3302      	adds	r3, #2
 81099de:	e7f4      	b.n	81099ca <_printf_float+0x192>
 81099e0:	2301      	movs	r3, #1
 81099e2:	e7f2      	b.n	81099ca <_printf_float+0x192>
 81099e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 81099e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81099ea:	4299      	cmp	r1, r3
 81099ec:	db05      	blt.n	81099fa <_printf_float+0x1c2>
 81099ee:	6823      	ldr	r3, [r4, #0]
 81099f0:	6121      	str	r1, [r4, #16]
 81099f2:	07d8      	lsls	r0, r3, #31
 81099f4:	d5ea      	bpl.n	81099cc <_printf_float+0x194>
 81099f6:	1c4b      	adds	r3, r1, #1
 81099f8:	e7e7      	b.n	81099ca <_printf_float+0x192>
 81099fa:	2900      	cmp	r1, #0
 81099fc:	bfd4      	ite	le
 81099fe:	f1c1 0202 	rsble	r2, r1, #2
 8109a02:	2201      	movgt	r2, #1
 8109a04:	4413      	add	r3, r2
 8109a06:	e7e0      	b.n	81099ca <_printf_float+0x192>
 8109a08:	6823      	ldr	r3, [r4, #0]
 8109a0a:	055a      	lsls	r2, r3, #21
 8109a0c:	d407      	bmi.n	8109a1e <_printf_float+0x1e6>
 8109a0e:	6923      	ldr	r3, [r4, #16]
 8109a10:	4642      	mov	r2, r8
 8109a12:	4631      	mov	r1, r6
 8109a14:	4628      	mov	r0, r5
 8109a16:	47b8      	blx	r7
 8109a18:	3001      	adds	r0, #1
 8109a1a:	d12b      	bne.n	8109a74 <_printf_float+0x23c>
 8109a1c:	e767      	b.n	81098ee <_printf_float+0xb6>
 8109a1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8109a22:	f240 80dd 	bls.w	8109be0 <_printf_float+0x3a8>
 8109a26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8109a2a:	2200      	movs	r2, #0
 8109a2c:	2300      	movs	r3, #0
 8109a2e:	f7f7 f8d3 	bl	8100bd8 <__aeabi_dcmpeq>
 8109a32:	2800      	cmp	r0, #0
 8109a34:	d033      	beq.n	8109a9e <_printf_float+0x266>
 8109a36:	4a37      	ldr	r2, [pc, #220]	@ (8109b14 <_printf_float+0x2dc>)
 8109a38:	2301      	movs	r3, #1
 8109a3a:	4631      	mov	r1, r6
 8109a3c:	4628      	mov	r0, r5
 8109a3e:	47b8      	blx	r7
 8109a40:	3001      	adds	r0, #1
 8109a42:	f43f af54 	beq.w	81098ee <_printf_float+0xb6>
 8109a46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8109a4a:	4543      	cmp	r3, r8
 8109a4c:	db02      	blt.n	8109a54 <_printf_float+0x21c>
 8109a4e:	6823      	ldr	r3, [r4, #0]
 8109a50:	07d8      	lsls	r0, r3, #31
 8109a52:	d50f      	bpl.n	8109a74 <_printf_float+0x23c>
 8109a54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8109a58:	4631      	mov	r1, r6
 8109a5a:	4628      	mov	r0, r5
 8109a5c:	47b8      	blx	r7
 8109a5e:	3001      	adds	r0, #1
 8109a60:	f43f af45 	beq.w	81098ee <_printf_float+0xb6>
 8109a64:	f04f 0900 	mov.w	r9, #0
 8109a68:	f108 38ff 	add.w	r8, r8, #4294967295
 8109a6c:	f104 0a1a 	add.w	sl, r4, #26
 8109a70:	45c8      	cmp	r8, r9
 8109a72:	dc09      	bgt.n	8109a88 <_printf_float+0x250>
 8109a74:	6823      	ldr	r3, [r4, #0]
 8109a76:	079b      	lsls	r3, r3, #30
 8109a78:	f100 8103 	bmi.w	8109c82 <_printf_float+0x44a>
 8109a7c:	68e0      	ldr	r0, [r4, #12]
 8109a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8109a80:	4298      	cmp	r0, r3
 8109a82:	bfb8      	it	lt
 8109a84:	4618      	movlt	r0, r3
 8109a86:	e734      	b.n	81098f2 <_printf_float+0xba>
 8109a88:	2301      	movs	r3, #1
 8109a8a:	4652      	mov	r2, sl
 8109a8c:	4631      	mov	r1, r6
 8109a8e:	4628      	mov	r0, r5
 8109a90:	47b8      	blx	r7
 8109a92:	3001      	adds	r0, #1
 8109a94:	f43f af2b 	beq.w	81098ee <_printf_float+0xb6>
 8109a98:	f109 0901 	add.w	r9, r9, #1
 8109a9c:	e7e8      	b.n	8109a70 <_printf_float+0x238>
 8109a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109aa0:	2b00      	cmp	r3, #0
 8109aa2:	dc39      	bgt.n	8109b18 <_printf_float+0x2e0>
 8109aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8109b14 <_printf_float+0x2dc>)
 8109aa6:	2301      	movs	r3, #1
 8109aa8:	4631      	mov	r1, r6
 8109aaa:	4628      	mov	r0, r5
 8109aac:	47b8      	blx	r7
 8109aae:	3001      	adds	r0, #1
 8109ab0:	f43f af1d 	beq.w	81098ee <_printf_float+0xb6>
 8109ab4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8109ab8:	ea59 0303 	orrs.w	r3, r9, r3
 8109abc:	d102      	bne.n	8109ac4 <_printf_float+0x28c>
 8109abe:	6823      	ldr	r3, [r4, #0]
 8109ac0:	07d9      	lsls	r1, r3, #31
 8109ac2:	d5d7      	bpl.n	8109a74 <_printf_float+0x23c>
 8109ac4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8109ac8:	4631      	mov	r1, r6
 8109aca:	4628      	mov	r0, r5
 8109acc:	47b8      	blx	r7
 8109ace:	3001      	adds	r0, #1
 8109ad0:	f43f af0d 	beq.w	81098ee <_printf_float+0xb6>
 8109ad4:	f04f 0a00 	mov.w	sl, #0
 8109ad8:	f104 0b1a 	add.w	fp, r4, #26
 8109adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109ade:	425b      	negs	r3, r3
 8109ae0:	4553      	cmp	r3, sl
 8109ae2:	dc01      	bgt.n	8109ae8 <_printf_float+0x2b0>
 8109ae4:	464b      	mov	r3, r9
 8109ae6:	e793      	b.n	8109a10 <_printf_float+0x1d8>
 8109ae8:	2301      	movs	r3, #1
 8109aea:	465a      	mov	r2, fp
 8109aec:	4631      	mov	r1, r6
 8109aee:	4628      	mov	r0, r5
 8109af0:	47b8      	blx	r7
 8109af2:	3001      	adds	r0, #1
 8109af4:	f43f aefb 	beq.w	81098ee <_printf_float+0xb6>
 8109af8:	f10a 0a01 	add.w	sl, sl, #1
 8109afc:	e7ee      	b.n	8109adc <_printf_float+0x2a4>
 8109afe:	bf00      	nop
 8109b00:	7fefffff 	.word	0x7fefffff
 8109b04:	0810ead4 	.word	0x0810ead4
 8109b08:	0810ead8 	.word	0x0810ead8
 8109b0c:	0810eadc 	.word	0x0810eadc
 8109b10:	0810eae0 	.word	0x0810eae0
 8109b14:	0810eae4 	.word	0x0810eae4
 8109b18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8109b1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8109b1e:	4553      	cmp	r3, sl
 8109b20:	bfa8      	it	ge
 8109b22:	4653      	movge	r3, sl
 8109b24:	2b00      	cmp	r3, #0
 8109b26:	4699      	mov	r9, r3
 8109b28:	dc36      	bgt.n	8109b98 <_printf_float+0x360>
 8109b2a:	f04f 0b00 	mov.w	fp, #0
 8109b2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109b32:	f104 021a 	add.w	r2, r4, #26
 8109b36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8109b38:	9306      	str	r3, [sp, #24]
 8109b3a:	eba3 0309 	sub.w	r3, r3, r9
 8109b3e:	455b      	cmp	r3, fp
 8109b40:	dc31      	bgt.n	8109ba6 <_printf_float+0x36e>
 8109b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109b44:	459a      	cmp	sl, r3
 8109b46:	dc3a      	bgt.n	8109bbe <_printf_float+0x386>
 8109b48:	6823      	ldr	r3, [r4, #0]
 8109b4a:	07da      	lsls	r2, r3, #31
 8109b4c:	d437      	bmi.n	8109bbe <_printf_float+0x386>
 8109b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109b50:	ebaa 0903 	sub.w	r9, sl, r3
 8109b54:	9b06      	ldr	r3, [sp, #24]
 8109b56:	ebaa 0303 	sub.w	r3, sl, r3
 8109b5a:	4599      	cmp	r9, r3
 8109b5c:	bfa8      	it	ge
 8109b5e:	4699      	movge	r9, r3
 8109b60:	f1b9 0f00 	cmp.w	r9, #0
 8109b64:	dc33      	bgt.n	8109bce <_printf_float+0x396>
 8109b66:	f04f 0800 	mov.w	r8, #0
 8109b6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109b6e:	f104 0b1a 	add.w	fp, r4, #26
 8109b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109b74:	ebaa 0303 	sub.w	r3, sl, r3
 8109b78:	eba3 0309 	sub.w	r3, r3, r9
 8109b7c:	4543      	cmp	r3, r8
 8109b7e:	f77f af79 	ble.w	8109a74 <_printf_float+0x23c>
 8109b82:	2301      	movs	r3, #1
 8109b84:	465a      	mov	r2, fp
 8109b86:	4631      	mov	r1, r6
 8109b88:	4628      	mov	r0, r5
 8109b8a:	47b8      	blx	r7
 8109b8c:	3001      	adds	r0, #1
 8109b8e:	f43f aeae 	beq.w	81098ee <_printf_float+0xb6>
 8109b92:	f108 0801 	add.w	r8, r8, #1
 8109b96:	e7ec      	b.n	8109b72 <_printf_float+0x33a>
 8109b98:	4642      	mov	r2, r8
 8109b9a:	4631      	mov	r1, r6
 8109b9c:	4628      	mov	r0, r5
 8109b9e:	47b8      	blx	r7
 8109ba0:	3001      	adds	r0, #1
 8109ba2:	d1c2      	bne.n	8109b2a <_printf_float+0x2f2>
 8109ba4:	e6a3      	b.n	81098ee <_printf_float+0xb6>
 8109ba6:	2301      	movs	r3, #1
 8109ba8:	4631      	mov	r1, r6
 8109baa:	4628      	mov	r0, r5
 8109bac:	9206      	str	r2, [sp, #24]
 8109bae:	47b8      	blx	r7
 8109bb0:	3001      	adds	r0, #1
 8109bb2:	f43f ae9c 	beq.w	81098ee <_printf_float+0xb6>
 8109bb6:	9a06      	ldr	r2, [sp, #24]
 8109bb8:	f10b 0b01 	add.w	fp, fp, #1
 8109bbc:	e7bb      	b.n	8109b36 <_printf_float+0x2fe>
 8109bbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8109bc2:	4631      	mov	r1, r6
 8109bc4:	4628      	mov	r0, r5
 8109bc6:	47b8      	blx	r7
 8109bc8:	3001      	adds	r0, #1
 8109bca:	d1c0      	bne.n	8109b4e <_printf_float+0x316>
 8109bcc:	e68f      	b.n	81098ee <_printf_float+0xb6>
 8109bce:	9a06      	ldr	r2, [sp, #24]
 8109bd0:	464b      	mov	r3, r9
 8109bd2:	4442      	add	r2, r8
 8109bd4:	4631      	mov	r1, r6
 8109bd6:	4628      	mov	r0, r5
 8109bd8:	47b8      	blx	r7
 8109bda:	3001      	adds	r0, #1
 8109bdc:	d1c3      	bne.n	8109b66 <_printf_float+0x32e>
 8109bde:	e686      	b.n	81098ee <_printf_float+0xb6>
 8109be0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8109be4:	f1ba 0f01 	cmp.w	sl, #1
 8109be8:	dc01      	bgt.n	8109bee <_printf_float+0x3b6>
 8109bea:	07db      	lsls	r3, r3, #31
 8109bec:	d536      	bpl.n	8109c5c <_printf_float+0x424>
 8109bee:	2301      	movs	r3, #1
 8109bf0:	4642      	mov	r2, r8
 8109bf2:	4631      	mov	r1, r6
 8109bf4:	4628      	mov	r0, r5
 8109bf6:	47b8      	blx	r7
 8109bf8:	3001      	adds	r0, #1
 8109bfa:	f43f ae78 	beq.w	81098ee <_printf_float+0xb6>
 8109bfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8109c02:	4631      	mov	r1, r6
 8109c04:	4628      	mov	r0, r5
 8109c06:	47b8      	blx	r7
 8109c08:	3001      	adds	r0, #1
 8109c0a:	f43f ae70 	beq.w	81098ee <_printf_float+0xb6>
 8109c0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8109c12:	2200      	movs	r2, #0
 8109c14:	2300      	movs	r3, #0
 8109c16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109c1a:	f7f6 ffdd 	bl	8100bd8 <__aeabi_dcmpeq>
 8109c1e:	b9c0      	cbnz	r0, 8109c52 <_printf_float+0x41a>
 8109c20:	4653      	mov	r3, sl
 8109c22:	f108 0201 	add.w	r2, r8, #1
 8109c26:	4631      	mov	r1, r6
 8109c28:	4628      	mov	r0, r5
 8109c2a:	47b8      	blx	r7
 8109c2c:	3001      	adds	r0, #1
 8109c2e:	d10c      	bne.n	8109c4a <_printf_float+0x412>
 8109c30:	e65d      	b.n	81098ee <_printf_float+0xb6>
 8109c32:	2301      	movs	r3, #1
 8109c34:	465a      	mov	r2, fp
 8109c36:	4631      	mov	r1, r6
 8109c38:	4628      	mov	r0, r5
 8109c3a:	47b8      	blx	r7
 8109c3c:	3001      	adds	r0, #1
 8109c3e:	f43f ae56 	beq.w	81098ee <_printf_float+0xb6>
 8109c42:	f108 0801 	add.w	r8, r8, #1
 8109c46:	45d0      	cmp	r8, sl
 8109c48:	dbf3      	blt.n	8109c32 <_printf_float+0x3fa>
 8109c4a:	464b      	mov	r3, r9
 8109c4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8109c50:	e6df      	b.n	8109a12 <_printf_float+0x1da>
 8109c52:	f04f 0800 	mov.w	r8, #0
 8109c56:	f104 0b1a 	add.w	fp, r4, #26
 8109c5a:	e7f4      	b.n	8109c46 <_printf_float+0x40e>
 8109c5c:	2301      	movs	r3, #1
 8109c5e:	4642      	mov	r2, r8
 8109c60:	e7e1      	b.n	8109c26 <_printf_float+0x3ee>
 8109c62:	2301      	movs	r3, #1
 8109c64:	464a      	mov	r2, r9
 8109c66:	4631      	mov	r1, r6
 8109c68:	4628      	mov	r0, r5
 8109c6a:	47b8      	blx	r7
 8109c6c:	3001      	adds	r0, #1
 8109c6e:	f43f ae3e 	beq.w	81098ee <_printf_float+0xb6>
 8109c72:	f108 0801 	add.w	r8, r8, #1
 8109c76:	68e3      	ldr	r3, [r4, #12]
 8109c78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8109c7a:	1a5b      	subs	r3, r3, r1
 8109c7c:	4543      	cmp	r3, r8
 8109c7e:	dcf0      	bgt.n	8109c62 <_printf_float+0x42a>
 8109c80:	e6fc      	b.n	8109a7c <_printf_float+0x244>
 8109c82:	f04f 0800 	mov.w	r8, #0
 8109c86:	f104 0919 	add.w	r9, r4, #25
 8109c8a:	e7f4      	b.n	8109c76 <_printf_float+0x43e>

08109c8c <_printf_common>:
 8109c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109c90:	4616      	mov	r6, r2
 8109c92:	4698      	mov	r8, r3
 8109c94:	688a      	ldr	r2, [r1, #8]
 8109c96:	690b      	ldr	r3, [r1, #16]
 8109c98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8109c9c:	4293      	cmp	r3, r2
 8109c9e:	bfb8      	it	lt
 8109ca0:	4613      	movlt	r3, r2
 8109ca2:	6033      	str	r3, [r6, #0]
 8109ca4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8109ca8:	4607      	mov	r7, r0
 8109caa:	460c      	mov	r4, r1
 8109cac:	b10a      	cbz	r2, 8109cb2 <_printf_common+0x26>
 8109cae:	3301      	adds	r3, #1
 8109cb0:	6033      	str	r3, [r6, #0]
 8109cb2:	6823      	ldr	r3, [r4, #0]
 8109cb4:	0699      	lsls	r1, r3, #26
 8109cb6:	bf42      	ittt	mi
 8109cb8:	6833      	ldrmi	r3, [r6, #0]
 8109cba:	3302      	addmi	r3, #2
 8109cbc:	6033      	strmi	r3, [r6, #0]
 8109cbe:	6825      	ldr	r5, [r4, #0]
 8109cc0:	f015 0506 	ands.w	r5, r5, #6
 8109cc4:	d106      	bne.n	8109cd4 <_printf_common+0x48>
 8109cc6:	f104 0a19 	add.w	sl, r4, #25
 8109cca:	68e3      	ldr	r3, [r4, #12]
 8109ccc:	6832      	ldr	r2, [r6, #0]
 8109cce:	1a9b      	subs	r3, r3, r2
 8109cd0:	42ab      	cmp	r3, r5
 8109cd2:	dc26      	bgt.n	8109d22 <_printf_common+0x96>
 8109cd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8109cd8:	6822      	ldr	r2, [r4, #0]
 8109cda:	3b00      	subs	r3, #0
 8109cdc:	bf18      	it	ne
 8109cde:	2301      	movne	r3, #1
 8109ce0:	0692      	lsls	r2, r2, #26
 8109ce2:	d42b      	bmi.n	8109d3c <_printf_common+0xb0>
 8109ce4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8109ce8:	4641      	mov	r1, r8
 8109cea:	4638      	mov	r0, r7
 8109cec:	47c8      	blx	r9
 8109cee:	3001      	adds	r0, #1
 8109cf0:	d01e      	beq.n	8109d30 <_printf_common+0xa4>
 8109cf2:	6823      	ldr	r3, [r4, #0]
 8109cf4:	6922      	ldr	r2, [r4, #16]
 8109cf6:	f003 0306 	and.w	r3, r3, #6
 8109cfa:	2b04      	cmp	r3, #4
 8109cfc:	bf02      	ittt	eq
 8109cfe:	68e5      	ldreq	r5, [r4, #12]
 8109d00:	6833      	ldreq	r3, [r6, #0]
 8109d02:	1aed      	subeq	r5, r5, r3
 8109d04:	68a3      	ldr	r3, [r4, #8]
 8109d06:	bf0c      	ite	eq
 8109d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8109d0c:	2500      	movne	r5, #0
 8109d0e:	4293      	cmp	r3, r2
 8109d10:	bfc4      	itt	gt
 8109d12:	1a9b      	subgt	r3, r3, r2
 8109d14:	18ed      	addgt	r5, r5, r3
 8109d16:	2600      	movs	r6, #0
 8109d18:	341a      	adds	r4, #26
 8109d1a:	42b5      	cmp	r5, r6
 8109d1c:	d11a      	bne.n	8109d54 <_printf_common+0xc8>
 8109d1e:	2000      	movs	r0, #0
 8109d20:	e008      	b.n	8109d34 <_printf_common+0xa8>
 8109d22:	2301      	movs	r3, #1
 8109d24:	4652      	mov	r2, sl
 8109d26:	4641      	mov	r1, r8
 8109d28:	4638      	mov	r0, r7
 8109d2a:	47c8      	blx	r9
 8109d2c:	3001      	adds	r0, #1
 8109d2e:	d103      	bne.n	8109d38 <_printf_common+0xac>
 8109d30:	f04f 30ff 	mov.w	r0, #4294967295
 8109d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109d38:	3501      	adds	r5, #1
 8109d3a:	e7c6      	b.n	8109cca <_printf_common+0x3e>
 8109d3c:	18e1      	adds	r1, r4, r3
 8109d3e:	1c5a      	adds	r2, r3, #1
 8109d40:	2030      	movs	r0, #48	@ 0x30
 8109d42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8109d46:	4422      	add	r2, r4
 8109d48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8109d4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8109d50:	3302      	adds	r3, #2
 8109d52:	e7c7      	b.n	8109ce4 <_printf_common+0x58>
 8109d54:	2301      	movs	r3, #1
 8109d56:	4622      	mov	r2, r4
 8109d58:	4641      	mov	r1, r8
 8109d5a:	4638      	mov	r0, r7
 8109d5c:	47c8      	blx	r9
 8109d5e:	3001      	adds	r0, #1
 8109d60:	d0e6      	beq.n	8109d30 <_printf_common+0xa4>
 8109d62:	3601      	adds	r6, #1
 8109d64:	e7d9      	b.n	8109d1a <_printf_common+0x8e>
	...

08109d68 <_printf_i>:
 8109d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109d6c:	7e0f      	ldrb	r7, [r1, #24]
 8109d6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8109d70:	2f78      	cmp	r7, #120	@ 0x78
 8109d72:	4691      	mov	r9, r2
 8109d74:	4680      	mov	r8, r0
 8109d76:	460c      	mov	r4, r1
 8109d78:	469a      	mov	sl, r3
 8109d7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8109d7e:	d807      	bhi.n	8109d90 <_printf_i+0x28>
 8109d80:	2f62      	cmp	r7, #98	@ 0x62
 8109d82:	d80a      	bhi.n	8109d9a <_printf_i+0x32>
 8109d84:	2f00      	cmp	r7, #0
 8109d86:	f000 80d2 	beq.w	8109f2e <_printf_i+0x1c6>
 8109d8a:	2f58      	cmp	r7, #88	@ 0x58
 8109d8c:	f000 80b9 	beq.w	8109f02 <_printf_i+0x19a>
 8109d90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8109d94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8109d98:	e03a      	b.n	8109e10 <_printf_i+0xa8>
 8109d9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8109d9e:	2b15      	cmp	r3, #21
 8109da0:	d8f6      	bhi.n	8109d90 <_printf_i+0x28>
 8109da2:	a101      	add	r1, pc, #4	@ (adr r1, 8109da8 <_printf_i+0x40>)
 8109da4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8109da8:	08109e01 	.word	0x08109e01
 8109dac:	08109e15 	.word	0x08109e15
 8109db0:	08109d91 	.word	0x08109d91
 8109db4:	08109d91 	.word	0x08109d91
 8109db8:	08109d91 	.word	0x08109d91
 8109dbc:	08109d91 	.word	0x08109d91
 8109dc0:	08109e15 	.word	0x08109e15
 8109dc4:	08109d91 	.word	0x08109d91
 8109dc8:	08109d91 	.word	0x08109d91
 8109dcc:	08109d91 	.word	0x08109d91
 8109dd0:	08109d91 	.word	0x08109d91
 8109dd4:	08109f15 	.word	0x08109f15
 8109dd8:	08109e3f 	.word	0x08109e3f
 8109ddc:	08109ecf 	.word	0x08109ecf
 8109de0:	08109d91 	.word	0x08109d91
 8109de4:	08109d91 	.word	0x08109d91
 8109de8:	08109f37 	.word	0x08109f37
 8109dec:	08109d91 	.word	0x08109d91
 8109df0:	08109e3f 	.word	0x08109e3f
 8109df4:	08109d91 	.word	0x08109d91
 8109df8:	08109d91 	.word	0x08109d91
 8109dfc:	08109ed7 	.word	0x08109ed7
 8109e00:	6833      	ldr	r3, [r6, #0]
 8109e02:	1d1a      	adds	r2, r3, #4
 8109e04:	681b      	ldr	r3, [r3, #0]
 8109e06:	6032      	str	r2, [r6, #0]
 8109e08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8109e0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8109e10:	2301      	movs	r3, #1
 8109e12:	e09d      	b.n	8109f50 <_printf_i+0x1e8>
 8109e14:	6833      	ldr	r3, [r6, #0]
 8109e16:	6820      	ldr	r0, [r4, #0]
 8109e18:	1d19      	adds	r1, r3, #4
 8109e1a:	6031      	str	r1, [r6, #0]
 8109e1c:	0606      	lsls	r6, r0, #24
 8109e1e:	d501      	bpl.n	8109e24 <_printf_i+0xbc>
 8109e20:	681d      	ldr	r5, [r3, #0]
 8109e22:	e003      	b.n	8109e2c <_printf_i+0xc4>
 8109e24:	0645      	lsls	r5, r0, #25
 8109e26:	d5fb      	bpl.n	8109e20 <_printf_i+0xb8>
 8109e28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8109e2c:	2d00      	cmp	r5, #0
 8109e2e:	da03      	bge.n	8109e38 <_printf_i+0xd0>
 8109e30:	232d      	movs	r3, #45	@ 0x2d
 8109e32:	426d      	negs	r5, r5
 8109e34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8109e38:	4859      	ldr	r0, [pc, #356]	@ (8109fa0 <_printf_i+0x238>)
 8109e3a:	230a      	movs	r3, #10
 8109e3c:	e011      	b.n	8109e62 <_printf_i+0xfa>
 8109e3e:	6821      	ldr	r1, [r4, #0]
 8109e40:	6833      	ldr	r3, [r6, #0]
 8109e42:	0608      	lsls	r0, r1, #24
 8109e44:	f853 5b04 	ldr.w	r5, [r3], #4
 8109e48:	d402      	bmi.n	8109e50 <_printf_i+0xe8>
 8109e4a:	0649      	lsls	r1, r1, #25
 8109e4c:	bf48      	it	mi
 8109e4e:	b2ad      	uxthmi	r5, r5
 8109e50:	2f6f      	cmp	r7, #111	@ 0x6f
 8109e52:	4853      	ldr	r0, [pc, #332]	@ (8109fa0 <_printf_i+0x238>)
 8109e54:	6033      	str	r3, [r6, #0]
 8109e56:	bf14      	ite	ne
 8109e58:	230a      	movne	r3, #10
 8109e5a:	2308      	moveq	r3, #8
 8109e5c:	2100      	movs	r1, #0
 8109e5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8109e62:	6866      	ldr	r6, [r4, #4]
 8109e64:	60a6      	str	r6, [r4, #8]
 8109e66:	2e00      	cmp	r6, #0
 8109e68:	bfa2      	ittt	ge
 8109e6a:	6821      	ldrge	r1, [r4, #0]
 8109e6c:	f021 0104 	bicge.w	r1, r1, #4
 8109e70:	6021      	strge	r1, [r4, #0]
 8109e72:	b90d      	cbnz	r5, 8109e78 <_printf_i+0x110>
 8109e74:	2e00      	cmp	r6, #0
 8109e76:	d04b      	beq.n	8109f10 <_printf_i+0x1a8>
 8109e78:	4616      	mov	r6, r2
 8109e7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8109e7e:	fb03 5711 	mls	r7, r3, r1, r5
 8109e82:	5dc7      	ldrb	r7, [r0, r7]
 8109e84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8109e88:	462f      	mov	r7, r5
 8109e8a:	42bb      	cmp	r3, r7
 8109e8c:	460d      	mov	r5, r1
 8109e8e:	d9f4      	bls.n	8109e7a <_printf_i+0x112>
 8109e90:	2b08      	cmp	r3, #8
 8109e92:	d10b      	bne.n	8109eac <_printf_i+0x144>
 8109e94:	6823      	ldr	r3, [r4, #0]
 8109e96:	07df      	lsls	r7, r3, #31
 8109e98:	d508      	bpl.n	8109eac <_printf_i+0x144>
 8109e9a:	6923      	ldr	r3, [r4, #16]
 8109e9c:	6861      	ldr	r1, [r4, #4]
 8109e9e:	4299      	cmp	r1, r3
 8109ea0:	bfde      	ittt	le
 8109ea2:	2330      	movle	r3, #48	@ 0x30
 8109ea4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8109ea8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8109eac:	1b92      	subs	r2, r2, r6
 8109eae:	6122      	str	r2, [r4, #16]
 8109eb0:	f8cd a000 	str.w	sl, [sp]
 8109eb4:	464b      	mov	r3, r9
 8109eb6:	aa03      	add	r2, sp, #12
 8109eb8:	4621      	mov	r1, r4
 8109eba:	4640      	mov	r0, r8
 8109ebc:	f7ff fee6 	bl	8109c8c <_printf_common>
 8109ec0:	3001      	adds	r0, #1
 8109ec2:	d14a      	bne.n	8109f5a <_printf_i+0x1f2>
 8109ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8109ec8:	b004      	add	sp, #16
 8109eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109ece:	6823      	ldr	r3, [r4, #0]
 8109ed0:	f043 0320 	orr.w	r3, r3, #32
 8109ed4:	6023      	str	r3, [r4, #0]
 8109ed6:	4833      	ldr	r0, [pc, #204]	@ (8109fa4 <_printf_i+0x23c>)
 8109ed8:	2778      	movs	r7, #120	@ 0x78
 8109eda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8109ede:	6823      	ldr	r3, [r4, #0]
 8109ee0:	6831      	ldr	r1, [r6, #0]
 8109ee2:	061f      	lsls	r7, r3, #24
 8109ee4:	f851 5b04 	ldr.w	r5, [r1], #4
 8109ee8:	d402      	bmi.n	8109ef0 <_printf_i+0x188>
 8109eea:	065f      	lsls	r7, r3, #25
 8109eec:	bf48      	it	mi
 8109eee:	b2ad      	uxthmi	r5, r5
 8109ef0:	6031      	str	r1, [r6, #0]
 8109ef2:	07d9      	lsls	r1, r3, #31
 8109ef4:	bf44      	itt	mi
 8109ef6:	f043 0320 	orrmi.w	r3, r3, #32
 8109efa:	6023      	strmi	r3, [r4, #0]
 8109efc:	b11d      	cbz	r5, 8109f06 <_printf_i+0x19e>
 8109efe:	2310      	movs	r3, #16
 8109f00:	e7ac      	b.n	8109e5c <_printf_i+0xf4>
 8109f02:	4827      	ldr	r0, [pc, #156]	@ (8109fa0 <_printf_i+0x238>)
 8109f04:	e7e9      	b.n	8109eda <_printf_i+0x172>
 8109f06:	6823      	ldr	r3, [r4, #0]
 8109f08:	f023 0320 	bic.w	r3, r3, #32
 8109f0c:	6023      	str	r3, [r4, #0]
 8109f0e:	e7f6      	b.n	8109efe <_printf_i+0x196>
 8109f10:	4616      	mov	r6, r2
 8109f12:	e7bd      	b.n	8109e90 <_printf_i+0x128>
 8109f14:	6833      	ldr	r3, [r6, #0]
 8109f16:	6825      	ldr	r5, [r4, #0]
 8109f18:	6961      	ldr	r1, [r4, #20]
 8109f1a:	1d18      	adds	r0, r3, #4
 8109f1c:	6030      	str	r0, [r6, #0]
 8109f1e:	062e      	lsls	r6, r5, #24
 8109f20:	681b      	ldr	r3, [r3, #0]
 8109f22:	d501      	bpl.n	8109f28 <_printf_i+0x1c0>
 8109f24:	6019      	str	r1, [r3, #0]
 8109f26:	e002      	b.n	8109f2e <_printf_i+0x1c6>
 8109f28:	0668      	lsls	r0, r5, #25
 8109f2a:	d5fb      	bpl.n	8109f24 <_printf_i+0x1bc>
 8109f2c:	8019      	strh	r1, [r3, #0]
 8109f2e:	2300      	movs	r3, #0
 8109f30:	6123      	str	r3, [r4, #16]
 8109f32:	4616      	mov	r6, r2
 8109f34:	e7bc      	b.n	8109eb0 <_printf_i+0x148>
 8109f36:	6833      	ldr	r3, [r6, #0]
 8109f38:	1d1a      	adds	r2, r3, #4
 8109f3a:	6032      	str	r2, [r6, #0]
 8109f3c:	681e      	ldr	r6, [r3, #0]
 8109f3e:	6862      	ldr	r2, [r4, #4]
 8109f40:	2100      	movs	r1, #0
 8109f42:	4630      	mov	r0, r6
 8109f44:	f7f6 f9cc 	bl	81002e0 <memchr>
 8109f48:	b108      	cbz	r0, 8109f4e <_printf_i+0x1e6>
 8109f4a:	1b80      	subs	r0, r0, r6
 8109f4c:	6060      	str	r0, [r4, #4]
 8109f4e:	6863      	ldr	r3, [r4, #4]
 8109f50:	6123      	str	r3, [r4, #16]
 8109f52:	2300      	movs	r3, #0
 8109f54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8109f58:	e7aa      	b.n	8109eb0 <_printf_i+0x148>
 8109f5a:	6923      	ldr	r3, [r4, #16]
 8109f5c:	4632      	mov	r2, r6
 8109f5e:	4649      	mov	r1, r9
 8109f60:	4640      	mov	r0, r8
 8109f62:	47d0      	blx	sl
 8109f64:	3001      	adds	r0, #1
 8109f66:	d0ad      	beq.n	8109ec4 <_printf_i+0x15c>
 8109f68:	6823      	ldr	r3, [r4, #0]
 8109f6a:	079b      	lsls	r3, r3, #30
 8109f6c:	d413      	bmi.n	8109f96 <_printf_i+0x22e>
 8109f6e:	68e0      	ldr	r0, [r4, #12]
 8109f70:	9b03      	ldr	r3, [sp, #12]
 8109f72:	4298      	cmp	r0, r3
 8109f74:	bfb8      	it	lt
 8109f76:	4618      	movlt	r0, r3
 8109f78:	e7a6      	b.n	8109ec8 <_printf_i+0x160>
 8109f7a:	2301      	movs	r3, #1
 8109f7c:	4632      	mov	r2, r6
 8109f7e:	4649      	mov	r1, r9
 8109f80:	4640      	mov	r0, r8
 8109f82:	47d0      	blx	sl
 8109f84:	3001      	adds	r0, #1
 8109f86:	d09d      	beq.n	8109ec4 <_printf_i+0x15c>
 8109f88:	3501      	adds	r5, #1
 8109f8a:	68e3      	ldr	r3, [r4, #12]
 8109f8c:	9903      	ldr	r1, [sp, #12]
 8109f8e:	1a5b      	subs	r3, r3, r1
 8109f90:	42ab      	cmp	r3, r5
 8109f92:	dcf2      	bgt.n	8109f7a <_printf_i+0x212>
 8109f94:	e7eb      	b.n	8109f6e <_printf_i+0x206>
 8109f96:	2500      	movs	r5, #0
 8109f98:	f104 0619 	add.w	r6, r4, #25
 8109f9c:	e7f5      	b.n	8109f8a <_printf_i+0x222>
 8109f9e:	bf00      	nop
 8109fa0:	0810eae6 	.word	0x0810eae6
 8109fa4:	0810eaf7 	.word	0x0810eaf7

08109fa8 <_scanf_float>:
 8109fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109fac:	b087      	sub	sp, #28
 8109fae:	4617      	mov	r7, r2
 8109fb0:	9303      	str	r3, [sp, #12]
 8109fb2:	688b      	ldr	r3, [r1, #8]
 8109fb4:	1e5a      	subs	r2, r3, #1
 8109fb6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8109fba:	bf81      	itttt	hi
 8109fbc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8109fc0:	eb03 0b05 	addhi.w	fp, r3, r5
 8109fc4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8109fc8:	608b      	strhi	r3, [r1, #8]
 8109fca:	680b      	ldr	r3, [r1, #0]
 8109fcc:	460a      	mov	r2, r1
 8109fce:	f04f 0500 	mov.w	r5, #0
 8109fd2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8109fd6:	f842 3b1c 	str.w	r3, [r2], #28
 8109fda:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8109fde:	4680      	mov	r8, r0
 8109fe0:	460c      	mov	r4, r1
 8109fe2:	bf98      	it	ls
 8109fe4:	f04f 0b00 	movls.w	fp, #0
 8109fe8:	9201      	str	r2, [sp, #4]
 8109fea:	4616      	mov	r6, r2
 8109fec:	46aa      	mov	sl, r5
 8109fee:	46a9      	mov	r9, r5
 8109ff0:	9502      	str	r5, [sp, #8]
 8109ff2:	68a2      	ldr	r2, [r4, #8]
 8109ff4:	b152      	cbz	r2, 810a00c <_scanf_float+0x64>
 8109ff6:	683b      	ldr	r3, [r7, #0]
 8109ff8:	781b      	ldrb	r3, [r3, #0]
 8109ffa:	2b4e      	cmp	r3, #78	@ 0x4e
 8109ffc:	d864      	bhi.n	810a0c8 <_scanf_float+0x120>
 8109ffe:	2b40      	cmp	r3, #64	@ 0x40
 810a000:	d83c      	bhi.n	810a07c <_scanf_float+0xd4>
 810a002:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 810a006:	b2c8      	uxtb	r0, r1
 810a008:	280e      	cmp	r0, #14
 810a00a:	d93a      	bls.n	810a082 <_scanf_float+0xda>
 810a00c:	f1b9 0f00 	cmp.w	r9, #0
 810a010:	d003      	beq.n	810a01a <_scanf_float+0x72>
 810a012:	6823      	ldr	r3, [r4, #0]
 810a014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810a018:	6023      	str	r3, [r4, #0]
 810a01a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810a01e:	f1ba 0f01 	cmp.w	sl, #1
 810a022:	f200 8117 	bhi.w	810a254 <_scanf_float+0x2ac>
 810a026:	9b01      	ldr	r3, [sp, #4]
 810a028:	429e      	cmp	r6, r3
 810a02a:	f200 8108 	bhi.w	810a23e <_scanf_float+0x296>
 810a02e:	2001      	movs	r0, #1
 810a030:	b007      	add	sp, #28
 810a032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a036:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 810a03a:	2a0d      	cmp	r2, #13
 810a03c:	d8e6      	bhi.n	810a00c <_scanf_float+0x64>
 810a03e:	a101      	add	r1, pc, #4	@ (adr r1, 810a044 <_scanf_float+0x9c>)
 810a040:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810a044:	0810a18b 	.word	0x0810a18b
 810a048:	0810a00d 	.word	0x0810a00d
 810a04c:	0810a00d 	.word	0x0810a00d
 810a050:	0810a00d 	.word	0x0810a00d
 810a054:	0810a1eb 	.word	0x0810a1eb
 810a058:	0810a1c3 	.word	0x0810a1c3
 810a05c:	0810a00d 	.word	0x0810a00d
 810a060:	0810a00d 	.word	0x0810a00d
 810a064:	0810a199 	.word	0x0810a199
 810a068:	0810a00d 	.word	0x0810a00d
 810a06c:	0810a00d 	.word	0x0810a00d
 810a070:	0810a00d 	.word	0x0810a00d
 810a074:	0810a00d 	.word	0x0810a00d
 810a078:	0810a151 	.word	0x0810a151
 810a07c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 810a080:	e7db      	b.n	810a03a <_scanf_float+0x92>
 810a082:	290e      	cmp	r1, #14
 810a084:	d8c2      	bhi.n	810a00c <_scanf_float+0x64>
 810a086:	a001      	add	r0, pc, #4	@ (adr r0, 810a08c <_scanf_float+0xe4>)
 810a088:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810a08c:	0810a141 	.word	0x0810a141
 810a090:	0810a00d 	.word	0x0810a00d
 810a094:	0810a141 	.word	0x0810a141
 810a098:	0810a1d7 	.word	0x0810a1d7
 810a09c:	0810a00d 	.word	0x0810a00d
 810a0a0:	0810a0e9 	.word	0x0810a0e9
 810a0a4:	0810a127 	.word	0x0810a127
 810a0a8:	0810a127 	.word	0x0810a127
 810a0ac:	0810a127 	.word	0x0810a127
 810a0b0:	0810a127 	.word	0x0810a127
 810a0b4:	0810a127 	.word	0x0810a127
 810a0b8:	0810a127 	.word	0x0810a127
 810a0bc:	0810a127 	.word	0x0810a127
 810a0c0:	0810a127 	.word	0x0810a127
 810a0c4:	0810a127 	.word	0x0810a127
 810a0c8:	2b6e      	cmp	r3, #110	@ 0x6e
 810a0ca:	d809      	bhi.n	810a0e0 <_scanf_float+0x138>
 810a0cc:	2b60      	cmp	r3, #96	@ 0x60
 810a0ce:	d8b2      	bhi.n	810a036 <_scanf_float+0x8e>
 810a0d0:	2b54      	cmp	r3, #84	@ 0x54
 810a0d2:	d07b      	beq.n	810a1cc <_scanf_float+0x224>
 810a0d4:	2b59      	cmp	r3, #89	@ 0x59
 810a0d6:	d199      	bne.n	810a00c <_scanf_float+0x64>
 810a0d8:	2d07      	cmp	r5, #7
 810a0da:	d197      	bne.n	810a00c <_scanf_float+0x64>
 810a0dc:	2508      	movs	r5, #8
 810a0de:	e02c      	b.n	810a13a <_scanf_float+0x192>
 810a0e0:	2b74      	cmp	r3, #116	@ 0x74
 810a0e2:	d073      	beq.n	810a1cc <_scanf_float+0x224>
 810a0e4:	2b79      	cmp	r3, #121	@ 0x79
 810a0e6:	e7f6      	b.n	810a0d6 <_scanf_float+0x12e>
 810a0e8:	6821      	ldr	r1, [r4, #0]
 810a0ea:	05c8      	lsls	r0, r1, #23
 810a0ec:	d51b      	bpl.n	810a126 <_scanf_float+0x17e>
 810a0ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 810a0f2:	6021      	str	r1, [r4, #0]
 810a0f4:	f109 0901 	add.w	r9, r9, #1
 810a0f8:	f1bb 0f00 	cmp.w	fp, #0
 810a0fc:	d003      	beq.n	810a106 <_scanf_float+0x15e>
 810a0fe:	3201      	adds	r2, #1
 810a100:	f10b 3bff 	add.w	fp, fp, #4294967295
 810a104:	60a2      	str	r2, [r4, #8]
 810a106:	68a3      	ldr	r3, [r4, #8]
 810a108:	3b01      	subs	r3, #1
 810a10a:	60a3      	str	r3, [r4, #8]
 810a10c:	6923      	ldr	r3, [r4, #16]
 810a10e:	3301      	adds	r3, #1
 810a110:	6123      	str	r3, [r4, #16]
 810a112:	687b      	ldr	r3, [r7, #4]
 810a114:	3b01      	subs	r3, #1
 810a116:	2b00      	cmp	r3, #0
 810a118:	607b      	str	r3, [r7, #4]
 810a11a:	f340 8087 	ble.w	810a22c <_scanf_float+0x284>
 810a11e:	683b      	ldr	r3, [r7, #0]
 810a120:	3301      	adds	r3, #1
 810a122:	603b      	str	r3, [r7, #0]
 810a124:	e765      	b.n	8109ff2 <_scanf_float+0x4a>
 810a126:	eb1a 0105 	adds.w	r1, sl, r5
 810a12a:	f47f af6f 	bne.w	810a00c <_scanf_float+0x64>
 810a12e:	6822      	ldr	r2, [r4, #0]
 810a130:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 810a134:	6022      	str	r2, [r4, #0]
 810a136:	460d      	mov	r5, r1
 810a138:	468a      	mov	sl, r1
 810a13a:	f806 3b01 	strb.w	r3, [r6], #1
 810a13e:	e7e2      	b.n	810a106 <_scanf_float+0x15e>
 810a140:	6822      	ldr	r2, [r4, #0]
 810a142:	0610      	lsls	r0, r2, #24
 810a144:	f57f af62 	bpl.w	810a00c <_scanf_float+0x64>
 810a148:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810a14c:	6022      	str	r2, [r4, #0]
 810a14e:	e7f4      	b.n	810a13a <_scanf_float+0x192>
 810a150:	f1ba 0f00 	cmp.w	sl, #0
 810a154:	d10e      	bne.n	810a174 <_scanf_float+0x1cc>
 810a156:	f1b9 0f00 	cmp.w	r9, #0
 810a15a:	d10e      	bne.n	810a17a <_scanf_float+0x1d2>
 810a15c:	6822      	ldr	r2, [r4, #0]
 810a15e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810a162:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810a166:	d108      	bne.n	810a17a <_scanf_float+0x1d2>
 810a168:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810a16c:	6022      	str	r2, [r4, #0]
 810a16e:	f04f 0a01 	mov.w	sl, #1
 810a172:	e7e2      	b.n	810a13a <_scanf_float+0x192>
 810a174:	f1ba 0f02 	cmp.w	sl, #2
 810a178:	d055      	beq.n	810a226 <_scanf_float+0x27e>
 810a17a:	2d01      	cmp	r5, #1
 810a17c:	d002      	beq.n	810a184 <_scanf_float+0x1dc>
 810a17e:	2d04      	cmp	r5, #4
 810a180:	f47f af44 	bne.w	810a00c <_scanf_float+0x64>
 810a184:	3501      	adds	r5, #1
 810a186:	b2ed      	uxtb	r5, r5
 810a188:	e7d7      	b.n	810a13a <_scanf_float+0x192>
 810a18a:	f1ba 0f01 	cmp.w	sl, #1
 810a18e:	f47f af3d 	bne.w	810a00c <_scanf_float+0x64>
 810a192:	f04f 0a02 	mov.w	sl, #2
 810a196:	e7d0      	b.n	810a13a <_scanf_float+0x192>
 810a198:	b97d      	cbnz	r5, 810a1ba <_scanf_float+0x212>
 810a19a:	f1b9 0f00 	cmp.w	r9, #0
 810a19e:	f47f af38 	bne.w	810a012 <_scanf_float+0x6a>
 810a1a2:	6822      	ldr	r2, [r4, #0]
 810a1a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810a1a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810a1ac:	f040 8108 	bne.w	810a3c0 <_scanf_float+0x418>
 810a1b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810a1b4:	6022      	str	r2, [r4, #0]
 810a1b6:	2501      	movs	r5, #1
 810a1b8:	e7bf      	b.n	810a13a <_scanf_float+0x192>
 810a1ba:	2d03      	cmp	r5, #3
 810a1bc:	d0e2      	beq.n	810a184 <_scanf_float+0x1dc>
 810a1be:	2d05      	cmp	r5, #5
 810a1c0:	e7de      	b.n	810a180 <_scanf_float+0x1d8>
 810a1c2:	2d02      	cmp	r5, #2
 810a1c4:	f47f af22 	bne.w	810a00c <_scanf_float+0x64>
 810a1c8:	2503      	movs	r5, #3
 810a1ca:	e7b6      	b.n	810a13a <_scanf_float+0x192>
 810a1cc:	2d06      	cmp	r5, #6
 810a1ce:	f47f af1d 	bne.w	810a00c <_scanf_float+0x64>
 810a1d2:	2507      	movs	r5, #7
 810a1d4:	e7b1      	b.n	810a13a <_scanf_float+0x192>
 810a1d6:	6822      	ldr	r2, [r4, #0]
 810a1d8:	0591      	lsls	r1, r2, #22
 810a1da:	f57f af17 	bpl.w	810a00c <_scanf_float+0x64>
 810a1de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 810a1e2:	6022      	str	r2, [r4, #0]
 810a1e4:	f8cd 9008 	str.w	r9, [sp, #8]
 810a1e8:	e7a7      	b.n	810a13a <_scanf_float+0x192>
 810a1ea:	6822      	ldr	r2, [r4, #0]
 810a1ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 810a1f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 810a1f4:	d006      	beq.n	810a204 <_scanf_float+0x25c>
 810a1f6:	0550      	lsls	r0, r2, #21
 810a1f8:	f57f af08 	bpl.w	810a00c <_scanf_float+0x64>
 810a1fc:	f1b9 0f00 	cmp.w	r9, #0
 810a200:	f000 80de 	beq.w	810a3c0 <_scanf_float+0x418>
 810a204:	0591      	lsls	r1, r2, #22
 810a206:	bf58      	it	pl
 810a208:	9902      	ldrpl	r1, [sp, #8]
 810a20a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810a20e:	bf58      	it	pl
 810a210:	eba9 0101 	subpl.w	r1, r9, r1
 810a214:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 810a218:	bf58      	it	pl
 810a21a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810a21e:	6022      	str	r2, [r4, #0]
 810a220:	f04f 0900 	mov.w	r9, #0
 810a224:	e789      	b.n	810a13a <_scanf_float+0x192>
 810a226:	f04f 0a03 	mov.w	sl, #3
 810a22a:	e786      	b.n	810a13a <_scanf_float+0x192>
 810a22c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 810a230:	4639      	mov	r1, r7
 810a232:	4640      	mov	r0, r8
 810a234:	4798      	blx	r3
 810a236:	2800      	cmp	r0, #0
 810a238:	f43f aedb 	beq.w	8109ff2 <_scanf_float+0x4a>
 810a23c:	e6e6      	b.n	810a00c <_scanf_float+0x64>
 810a23e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a242:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a246:	463a      	mov	r2, r7
 810a248:	4640      	mov	r0, r8
 810a24a:	4798      	blx	r3
 810a24c:	6923      	ldr	r3, [r4, #16]
 810a24e:	3b01      	subs	r3, #1
 810a250:	6123      	str	r3, [r4, #16]
 810a252:	e6e8      	b.n	810a026 <_scanf_float+0x7e>
 810a254:	1e6b      	subs	r3, r5, #1
 810a256:	2b06      	cmp	r3, #6
 810a258:	d824      	bhi.n	810a2a4 <_scanf_float+0x2fc>
 810a25a:	2d02      	cmp	r5, #2
 810a25c:	d836      	bhi.n	810a2cc <_scanf_float+0x324>
 810a25e:	9b01      	ldr	r3, [sp, #4]
 810a260:	429e      	cmp	r6, r3
 810a262:	f67f aee4 	bls.w	810a02e <_scanf_float+0x86>
 810a266:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a26a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a26e:	463a      	mov	r2, r7
 810a270:	4640      	mov	r0, r8
 810a272:	4798      	blx	r3
 810a274:	6923      	ldr	r3, [r4, #16]
 810a276:	3b01      	subs	r3, #1
 810a278:	6123      	str	r3, [r4, #16]
 810a27a:	e7f0      	b.n	810a25e <_scanf_float+0x2b6>
 810a27c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a280:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 810a284:	463a      	mov	r2, r7
 810a286:	4640      	mov	r0, r8
 810a288:	4798      	blx	r3
 810a28a:	6923      	ldr	r3, [r4, #16]
 810a28c:	3b01      	subs	r3, #1
 810a28e:	6123      	str	r3, [r4, #16]
 810a290:	f10a 3aff 	add.w	sl, sl, #4294967295
 810a294:	fa5f fa8a 	uxtb.w	sl, sl
 810a298:	f1ba 0f02 	cmp.w	sl, #2
 810a29c:	d1ee      	bne.n	810a27c <_scanf_float+0x2d4>
 810a29e:	3d03      	subs	r5, #3
 810a2a0:	b2ed      	uxtb	r5, r5
 810a2a2:	1b76      	subs	r6, r6, r5
 810a2a4:	6823      	ldr	r3, [r4, #0]
 810a2a6:	05da      	lsls	r2, r3, #23
 810a2a8:	d530      	bpl.n	810a30c <_scanf_float+0x364>
 810a2aa:	055b      	lsls	r3, r3, #21
 810a2ac:	d511      	bpl.n	810a2d2 <_scanf_float+0x32a>
 810a2ae:	9b01      	ldr	r3, [sp, #4]
 810a2b0:	429e      	cmp	r6, r3
 810a2b2:	f67f aebc 	bls.w	810a02e <_scanf_float+0x86>
 810a2b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a2ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a2be:	463a      	mov	r2, r7
 810a2c0:	4640      	mov	r0, r8
 810a2c2:	4798      	blx	r3
 810a2c4:	6923      	ldr	r3, [r4, #16]
 810a2c6:	3b01      	subs	r3, #1
 810a2c8:	6123      	str	r3, [r4, #16]
 810a2ca:	e7f0      	b.n	810a2ae <_scanf_float+0x306>
 810a2cc:	46aa      	mov	sl, r5
 810a2ce:	46b3      	mov	fp, r6
 810a2d0:	e7de      	b.n	810a290 <_scanf_float+0x2e8>
 810a2d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810a2d6:	6923      	ldr	r3, [r4, #16]
 810a2d8:	2965      	cmp	r1, #101	@ 0x65
 810a2da:	f103 33ff 	add.w	r3, r3, #4294967295
 810a2de:	f106 35ff 	add.w	r5, r6, #4294967295
 810a2e2:	6123      	str	r3, [r4, #16]
 810a2e4:	d00c      	beq.n	810a300 <_scanf_float+0x358>
 810a2e6:	2945      	cmp	r1, #69	@ 0x45
 810a2e8:	d00a      	beq.n	810a300 <_scanf_float+0x358>
 810a2ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a2ee:	463a      	mov	r2, r7
 810a2f0:	4640      	mov	r0, r8
 810a2f2:	4798      	blx	r3
 810a2f4:	6923      	ldr	r3, [r4, #16]
 810a2f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810a2fa:	3b01      	subs	r3, #1
 810a2fc:	1eb5      	subs	r5, r6, #2
 810a2fe:	6123      	str	r3, [r4, #16]
 810a300:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a304:	463a      	mov	r2, r7
 810a306:	4640      	mov	r0, r8
 810a308:	4798      	blx	r3
 810a30a:	462e      	mov	r6, r5
 810a30c:	6822      	ldr	r2, [r4, #0]
 810a30e:	f012 0210 	ands.w	r2, r2, #16
 810a312:	d001      	beq.n	810a318 <_scanf_float+0x370>
 810a314:	2000      	movs	r0, #0
 810a316:	e68b      	b.n	810a030 <_scanf_float+0x88>
 810a318:	7032      	strb	r2, [r6, #0]
 810a31a:	6823      	ldr	r3, [r4, #0]
 810a31c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 810a320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810a324:	d11c      	bne.n	810a360 <_scanf_float+0x3b8>
 810a326:	9b02      	ldr	r3, [sp, #8]
 810a328:	454b      	cmp	r3, r9
 810a32a:	eba3 0209 	sub.w	r2, r3, r9
 810a32e:	d123      	bne.n	810a378 <_scanf_float+0x3d0>
 810a330:	9901      	ldr	r1, [sp, #4]
 810a332:	2200      	movs	r2, #0
 810a334:	4640      	mov	r0, r8
 810a336:	f002 fd67 	bl	810ce08 <_strtod_r>
 810a33a:	9b03      	ldr	r3, [sp, #12]
 810a33c:	6821      	ldr	r1, [r4, #0]
 810a33e:	681b      	ldr	r3, [r3, #0]
 810a340:	f011 0f02 	tst.w	r1, #2
 810a344:	ec57 6b10 	vmov	r6, r7, d0
 810a348:	f103 0204 	add.w	r2, r3, #4
 810a34c:	d01f      	beq.n	810a38e <_scanf_float+0x3e6>
 810a34e:	9903      	ldr	r1, [sp, #12]
 810a350:	600a      	str	r2, [r1, #0]
 810a352:	681b      	ldr	r3, [r3, #0]
 810a354:	e9c3 6700 	strd	r6, r7, [r3]
 810a358:	68e3      	ldr	r3, [r4, #12]
 810a35a:	3301      	adds	r3, #1
 810a35c:	60e3      	str	r3, [r4, #12]
 810a35e:	e7d9      	b.n	810a314 <_scanf_float+0x36c>
 810a360:	9b04      	ldr	r3, [sp, #16]
 810a362:	2b00      	cmp	r3, #0
 810a364:	d0e4      	beq.n	810a330 <_scanf_float+0x388>
 810a366:	9905      	ldr	r1, [sp, #20]
 810a368:	230a      	movs	r3, #10
 810a36a:	3101      	adds	r1, #1
 810a36c:	4640      	mov	r0, r8
 810a36e:	f002 fdcb 	bl	810cf08 <_strtol_r>
 810a372:	9b04      	ldr	r3, [sp, #16]
 810a374:	9e05      	ldr	r6, [sp, #20]
 810a376:	1ac2      	subs	r2, r0, r3
 810a378:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 810a37c:	429e      	cmp	r6, r3
 810a37e:	bf28      	it	cs
 810a380:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 810a384:	4910      	ldr	r1, [pc, #64]	@ (810a3c8 <_scanf_float+0x420>)
 810a386:	4630      	mov	r0, r6
 810a388:	f000 f99a 	bl	810a6c0 <siprintf>
 810a38c:	e7d0      	b.n	810a330 <_scanf_float+0x388>
 810a38e:	f011 0f04 	tst.w	r1, #4
 810a392:	9903      	ldr	r1, [sp, #12]
 810a394:	600a      	str	r2, [r1, #0]
 810a396:	d1dc      	bne.n	810a352 <_scanf_float+0x3aa>
 810a398:	681d      	ldr	r5, [r3, #0]
 810a39a:	4632      	mov	r2, r6
 810a39c:	463b      	mov	r3, r7
 810a39e:	4630      	mov	r0, r6
 810a3a0:	4639      	mov	r1, r7
 810a3a2:	f7f6 fc4b 	bl	8100c3c <__aeabi_dcmpun>
 810a3a6:	b128      	cbz	r0, 810a3b4 <_scanf_float+0x40c>
 810a3a8:	4808      	ldr	r0, [pc, #32]	@ (810a3cc <_scanf_float+0x424>)
 810a3aa:	f000 fb0f 	bl	810a9cc <nanf>
 810a3ae:	ed85 0a00 	vstr	s0, [r5]
 810a3b2:	e7d1      	b.n	810a358 <_scanf_float+0x3b0>
 810a3b4:	4630      	mov	r0, r6
 810a3b6:	4639      	mov	r1, r7
 810a3b8:	f7f6 fc9e 	bl	8100cf8 <__aeabi_d2f>
 810a3bc:	6028      	str	r0, [r5, #0]
 810a3be:	e7cb      	b.n	810a358 <_scanf_float+0x3b0>
 810a3c0:	f04f 0900 	mov.w	r9, #0
 810a3c4:	e629      	b.n	810a01a <_scanf_float+0x72>
 810a3c6:	bf00      	nop
 810a3c8:	0810eb08 	.word	0x0810eb08
 810a3cc:	0810ead3 	.word	0x0810ead3

0810a3d0 <std>:
 810a3d0:	2300      	movs	r3, #0
 810a3d2:	b510      	push	{r4, lr}
 810a3d4:	4604      	mov	r4, r0
 810a3d6:	e9c0 3300 	strd	r3, r3, [r0]
 810a3da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810a3de:	6083      	str	r3, [r0, #8]
 810a3e0:	8181      	strh	r1, [r0, #12]
 810a3e2:	6643      	str	r3, [r0, #100]	@ 0x64
 810a3e4:	81c2      	strh	r2, [r0, #14]
 810a3e6:	6183      	str	r3, [r0, #24]
 810a3e8:	4619      	mov	r1, r3
 810a3ea:	2208      	movs	r2, #8
 810a3ec:	305c      	adds	r0, #92	@ 0x5c
 810a3ee:	f000 fa5f 	bl	810a8b0 <memset>
 810a3f2:	4b0d      	ldr	r3, [pc, #52]	@ (810a428 <std+0x58>)
 810a3f4:	6263      	str	r3, [r4, #36]	@ 0x24
 810a3f6:	4b0d      	ldr	r3, [pc, #52]	@ (810a42c <std+0x5c>)
 810a3f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 810a3fa:	4b0d      	ldr	r3, [pc, #52]	@ (810a430 <std+0x60>)
 810a3fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810a3fe:	4b0d      	ldr	r3, [pc, #52]	@ (810a434 <std+0x64>)
 810a400:	6323      	str	r3, [r4, #48]	@ 0x30
 810a402:	4b0d      	ldr	r3, [pc, #52]	@ (810a438 <std+0x68>)
 810a404:	6224      	str	r4, [r4, #32]
 810a406:	429c      	cmp	r4, r3
 810a408:	d006      	beq.n	810a418 <std+0x48>
 810a40a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810a40e:	4294      	cmp	r4, r2
 810a410:	d002      	beq.n	810a418 <std+0x48>
 810a412:	33d0      	adds	r3, #208	@ 0xd0
 810a414:	429c      	cmp	r4, r3
 810a416:	d105      	bne.n	810a424 <std+0x54>
 810a418:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810a41c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a420:	f000 bac2 	b.w	810a9a8 <__retarget_lock_init_recursive>
 810a424:	bd10      	pop	{r4, pc}
 810a426:	bf00      	nop
 810a428:	0810a701 	.word	0x0810a701
 810a42c:	0810a723 	.word	0x0810a723
 810a430:	0810a75b 	.word	0x0810a75b
 810a434:	0810a77f 	.word	0x0810a77f
 810a438:	10000958 	.word	0x10000958

0810a43c <stdio_exit_handler>:
 810a43c:	4a02      	ldr	r2, [pc, #8]	@ (810a448 <stdio_exit_handler+0xc>)
 810a43e:	4903      	ldr	r1, [pc, #12]	@ (810a44c <stdio_exit_handler+0x10>)
 810a440:	4803      	ldr	r0, [pc, #12]	@ (810a450 <stdio_exit_handler+0x14>)
 810a442:	f000 b87b 	b.w	810a53c <_fwalk_sglue>
 810a446:	bf00      	nop
 810a448:	10000020 	.word	0x10000020
 810a44c:	0810d549 	.word	0x0810d549
 810a450:	10000030 	.word	0x10000030

0810a454 <cleanup_stdio>:
 810a454:	6841      	ldr	r1, [r0, #4]
 810a456:	4b0c      	ldr	r3, [pc, #48]	@ (810a488 <cleanup_stdio+0x34>)
 810a458:	4299      	cmp	r1, r3
 810a45a:	b510      	push	{r4, lr}
 810a45c:	4604      	mov	r4, r0
 810a45e:	d001      	beq.n	810a464 <cleanup_stdio+0x10>
 810a460:	f003 f872 	bl	810d548 <_fflush_r>
 810a464:	68a1      	ldr	r1, [r4, #8]
 810a466:	4b09      	ldr	r3, [pc, #36]	@ (810a48c <cleanup_stdio+0x38>)
 810a468:	4299      	cmp	r1, r3
 810a46a:	d002      	beq.n	810a472 <cleanup_stdio+0x1e>
 810a46c:	4620      	mov	r0, r4
 810a46e:	f003 f86b 	bl	810d548 <_fflush_r>
 810a472:	68e1      	ldr	r1, [r4, #12]
 810a474:	4b06      	ldr	r3, [pc, #24]	@ (810a490 <cleanup_stdio+0x3c>)
 810a476:	4299      	cmp	r1, r3
 810a478:	d004      	beq.n	810a484 <cleanup_stdio+0x30>
 810a47a:	4620      	mov	r0, r4
 810a47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a480:	f003 b862 	b.w	810d548 <_fflush_r>
 810a484:	bd10      	pop	{r4, pc}
 810a486:	bf00      	nop
 810a488:	10000958 	.word	0x10000958
 810a48c:	100009c0 	.word	0x100009c0
 810a490:	10000a28 	.word	0x10000a28

0810a494 <global_stdio_init.part.0>:
 810a494:	b510      	push	{r4, lr}
 810a496:	4b0b      	ldr	r3, [pc, #44]	@ (810a4c4 <global_stdio_init.part.0+0x30>)
 810a498:	4c0b      	ldr	r4, [pc, #44]	@ (810a4c8 <global_stdio_init.part.0+0x34>)
 810a49a:	4a0c      	ldr	r2, [pc, #48]	@ (810a4cc <global_stdio_init.part.0+0x38>)
 810a49c:	601a      	str	r2, [r3, #0]
 810a49e:	4620      	mov	r0, r4
 810a4a0:	2200      	movs	r2, #0
 810a4a2:	2104      	movs	r1, #4
 810a4a4:	f7ff ff94 	bl	810a3d0 <std>
 810a4a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 810a4ac:	2201      	movs	r2, #1
 810a4ae:	2109      	movs	r1, #9
 810a4b0:	f7ff ff8e 	bl	810a3d0 <std>
 810a4b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810a4b8:	2202      	movs	r2, #2
 810a4ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a4be:	2112      	movs	r1, #18
 810a4c0:	f7ff bf86 	b.w	810a3d0 <std>
 810a4c4:	10000a90 	.word	0x10000a90
 810a4c8:	10000958 	.word	0x10000958
 810a4cc:	0810a43d 	.word	0x0810a43d

0810a4d0 <__sfp_lock_acquire>:
 810a4d0:	4801      	ldr	r0, [pc, #4]	@ (810a4d8 <__sfp_lock_acquire+0x8>)
 810a4d2:	f000 ba6a 	b.w	810a9aa <__retarget_lock_acquire_recursive>
 810a4d6:	bf00      	nop
 810a4d8:	10000a99 	.word	0x10000a99

0810a4dc <__sfp_lock_release>:
 810a4dc:	4801      	ldr	r0, [pc, #4]	@ (810a4e4 <__sfp_lock_release+0x8>)
 810a4de:	f000 ba65 	b.w	810a9ac <__retarget_lock_release_recursive>
 810a4e2:	bf00      	nop
 810a4e4:	10000a99 	.word	0x10000a99

0810a4e8 <__sinit>:
 810a4e8:	b510      	push	{r4, lr}
 810a4ea:	4604      	mov	r4, r0
 810a4ec:	f7ff fff0 	bl	810a4d0 <__sfp_lock_acquire>
 810a4f0:	6a23      	ldr	r3, [r4, #32]
 810a4f2:	b11b      	cbz	r3, 810a4fc <__sinit+0x14>
 810a4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a4f8:	f7ff bff0 	b.w	810a4dc <__sfp_lock_release>
 810a4fc:	4b04      	ldr	r3, [pc, #16]	@ (810a510 <__sinit+0x28>)
 810a4fe:	6223      	str	r3, [r4, #32]
 810a500:	4b04      	ldr	r3, [pc, #16]	@ (810a514 <__sinit+0x2c>)
 810a502:	681b      	ldr	r3, [r3, #0]
 810a504:	2b00      	cmp	r3, #0
 810a506:	d1f5      	bne.n	810a4f4 <__sinit+0xc>
 810a508:	f7ff ffc4 	bl	810a494 <global_stdio_init.part.0>
 810a50c:	e7f2      	b.n	810a4f4 <__sinit+0xc>
 810a50e:	bf00      	nop
 810a510:	0810a455 	.word	0x0810a455
 810a514:	10000a90 	.word	0x10000a90

0810a518 <fiprintf>:
 810a518:	b40e      	push	{r1, r2, r3}
 810a51a:	b503      	push	{r0, r1, lr}
 810a51c:	4601      	mov	r1, r0
 810a51e:	ab03      	add	r3, sp, #12
 810a520:	4805      	ldr	r0, [pc, #20]	@ (810a538 <fiprintf+0x20>)
 810a522:	f853 2b04 	ldr.w	r2, [r3], #4
 810a526:	6800      	ldr	r0, [r0, #0]
 810a528:	9301      	str	r3, [sp, #4]
 810a52a:	f002 fe71 	bl	810d210 <_vfiprintf_r>
 810a52e:	b002      	add	sp, #8
 810a530:	f85d eb04 	ldr.w	lr, [sp], #4
 810a534:	b003      	add	sp, #12
 810a536:	4770      	bx	lr
 810a538:	1000002c 	.word	0x1000002c

0810a53c <_fwalk_sglue>:
 810a53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a540:	4607      	mov	r7, r0
 810a542:	4688      	mov	r8, r1
 810a544:	4614      	mov	r4, r2
 810a546:	2600      	movs	r6, #0
 810a548:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810a54c:	f1b9 0901 	subs.w	r9, r9, #1
 810a550:	d505      	bpl.n	810a55e <_fwalk_sglue+0x22>
 810a552:	6824      	ldr	r4, [r4, #0]
 810a554:	2c00      	cmp	r4, #0
 810a556:	d1f7      	bne.n	810a548 <_fwalk_sglue+0xc>
 810a558:	4630      	mov	r0, r6
 810a55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a55e:	89ab      	ldrh	r3, [r5, #12]
 810a560:	2b01      	cmp	r3, #1
 810a562:	d907      	bls.n	810a574 <_fwalk_sglue+0x38>
 810a564:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810a568:	3301      	adds	r3, #1
 810a56a:	d003      	beq.n	810a574 <_fwalk_sglue+0x38>
 810a56c:	4629      	mov	r1, r5
 810a56e:	4638      	mov	r0, r7
 810a570:	47c0      	blx	r8
 810a572:	4306      	orrs	r6, r0
 810a574:	3568      	adds	r5, #104	@ 0x68
 810a576:	e7e9      	b.n	810a54c <_fwalk_sglue+0x10>

0810a578 <iprintf>:
 810a578:	b40f      	push	{r0, r1, r2, r3}
 810a57a:	b507      	push	{r0, r1, r2, lr}
 810a57c:	4906      	ldr	r1, [pc, #24]	@ (810a598 <iprintf+0x20>)
 810a57e:	ab04      	add	r3, sp, #16
 810a580:	6808      	ldr	r0, [r1, #0]
 810a582:	f853 2b04 	ldr.w	r2, [r3], #4
 810a586:	6881      	ldr	r1, [r0, #8]
 810a588:	9301      	str	r3, [sp, #4]
 810a58a:	f002 fe41 	bl	810d210 <_vfiprintf_r>
 810a58e:	b003      	add	sp, #12
 810a590:	f85d eb04 	ldr.w	lr, [sp], #4
 810a594:	b004      	add	sp, #16
 810a596:	4770      	bx	lr
 810a598:	1000002c 	.word	0x1000002c

0810a59c <_puts_r>:
 810a59c:	6a03      	ldr	r3, [r0, #32]
 810a59e:	b570      	push	{r4, r5, r6, lr}
 810a5a0:	6884      	ldr	r4, [r0, #8]
 810a5a2:	4605      	mov	r5, r0
 810a5a4:	460e      	mov	r6, r1
 810a5a6:	b90b      	cbnz	r3, 810a5ac <_puts_r+0x10>
 810a5a8:	f7ff ff9e 	bl	810a4e8 <__sinit>
 810a5ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810a5ae:	07db      	lsls	r3, r3, #31
 810a5b0:	d405      	bmi.n	810a5be <_puts_r+0x22>
 810a5b2:	89a3      	ldrh	r3, [r4, #12]
 810a5b4:	0598      	lsls	r0, r3, #22
 810a5b6:	d402      	bmi.n	810a5be <_puts_r+0x22>
 810a5b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810a5ba:	f000 f9f6 	bl	810a9aa <__retarget_lock_acquire_recursive>
 810a5be:	89a3      	ldrh	r3, [r4, #12]
 810a5c0:	0719      	lsls	r1, r3, #28
 810a5c2:	d502      	bpl.n	810a5ca <_puts_r+0x2e>
 810a5c4:	6923      	ldr	r3, [r4, #16]
 810a5c6:	2b00      	cmp	r3, #0
 810a5c8:	d135      	bne.n	810a636 <_puts_r+0x9a>
 810a5ca:	4621      	mov	r1, r4
 810a5cc:	4628      	mov	r0, r5
 810a5ce:	f000 f919 	bl	810a804 <__swsetup_r>
 810a5d2:	b380      	cbz	r0, 810a636 <_puts_r+0x9a>
 810a5d4:	f04f 35ff 	mov.w	r5, #4294967295
 810a5d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810a5da:	07da      	lsls	r2, r3, #31
 810a5dc:	d405      	bmi.n	810a5ea <_puts_r+0x4e>
 810a5de:	89a3      	ldrh	r3, [r4, #12]
 810a5e0:	059b      	lsls	r3, r3, #22
 810a5e2:	d402      	bmi.n	810a5ea <_puts_r+0x4e>
 810a5e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810a5e6:	f000 f9e1 	bl	810a9ac <__retarget_lock_release_recursive>
 810a5ea:	4628      	mov	r0, r5
 810a5ec:	bd70      	pop	{r4, r5, r6, pc}
 810a5ee:	2b00      	cmp	r3, #0
 810a5f0:	da04      	bge.n	810a5fc <_puts_r+0x60>
 810a5f2:	69a2      	ldr	r2, [r4, #24]
 810a5f4:	429a      	cmp	r2, r3
 810a5f6:	dc17      	bgt.n	810a628 <_puts_r+0x8c>
 810a5f8:	290a      	cmp	r1, #10
 810a5fa:	d015      	beq.n	810a628 <_puts_r+0x8c>
 810a5fc:	6823      	ldr	r3, [r4, #0]
 810a5fe:	1c5a      	adds	r2, r3, #1
 810a600:	6022      	str	r2, [r4, #0]
 810a602:	7019      	strb	r1, [r3, #0]
 810a604:	68a3      	ldr	r3, [r4, #8]
 810a606:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810a60a:	3b01      	subs	r3, #1
 810a60c:	60a3      	str	r3, [r4, #8]
 810a60e:	2900      	cmp	r1, #0
 810a610:	d1ed      	bne.n	810a5ee <_puts_r+0x52>
 810a612:	2b00      	cmp	r3, #0
 810a614:	da11      	bge.n	810a63a <_puts_r+0x9e>
 810a616:	4622      	mov	r2, r4
 810a618:	210a      	movs	r1, #10
 810a61a:	4628      	mov	r0, r5
 810a61c:	f000 f8b3 	bl	810a786 <__swbuf_r>
 810a620:	3001      	adds	r0, #1
 810a622:	d0d7      	beq.n	810a5d4 <_puts_r+0x38>
 810a624:	250a      	movs	r5, #10
 810a626:	e7d7      	b.n	810a5d8 <_puts_r+0x3c>
 810a628:	4622      	mov	r2, r4
 810a62a:	4628      	mov	r0, r5
 810a62c:	f000 f8ab 	bl	810a786 <__swbuf_r>
 810a630:	3001      	adds	r0, #1
 810a632:	d1e7      	bne.n	810a604 <_puts_r+0x68>
 810a634:	e7ce      	b.n	810a5d4 <_puts_r+0x38>
 810a636:	3e01      	subs	r6, #1
 810a638:	e7e4      	b.n	810a604 <_puts_r+0x68>
 810a63a:	6823      	ldr	r3, [r4, #0]
 810a63c:	1c5a      	adds	r2, r3, #1
 810a63e:	6022      	str	r2, [r4, #0]
 810a640:	220a      	movs	r2, #10
 810a642:	701a      	strb	r2, [r3, #0]
 810a644:	e7ee      	b.n	810a624 <_puts_r+0x88>
	...

0810a648 <puts>:
 810a648:	4b02      	ldr	r3, [pc, #8]	@ (810a654 <puts+0xc>)
 810a64a:	4601      	mov	r1, r0
 810a64c:	6818      	ldr	r0, [r3, #0]
 810a64e:	f7ff bfa5 	b.w	810a59c <_puts_r>
 810a652:	bf00      	nop
 810a654:	1000002c 	.word	0x1000002c

0810a658 <sniprintf>:
 810a658:	b40c      	push	{r2, r3}
 810a65a:	b530      	push	{r4, r5, lr}
 810a65c:	4b17      	ldr	r3, [pc, #92]	@ (810a6bc <sniprintf+0x64>)
 810a65e:	1e0c      	subs	r4, r1, #0
 810a660:	681d      	ldr	r5, [r3, #0]
 810a662:	b09d      	sub	sp, #116	@ 0x74
 810a664:	da08      	bge.n	810a678 <sniprintf+0x20>
 810a666:	238b      	movs	r3, #139	@ 0x8b
 810a668:	602b      	str	r3, [r5, #0]
 810a66a:	f04f 30ff 	mov.w	r0, #4294967295
 810a66e:	b01d      	add	sp, #116	@ 0x74
 810a670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810a674:	b002      	add	sp, #8
 810a676:	4770      	bx	lr
 810a678:	f44f 7302 	mov.w	r3, #520	@ 0x208
 810a67c:	f8ad 3014 	strh.w	r3, [sp, #20]
 810a680:	bf14      	ite	ne
 810a682:	f104 33ff 	addne.w	r3, r4, #4294967295
 810a686:	4623      	moveq	r3, r4
 810a688:	9304      	str	r3, [sp, #16]
 810a68a:	9307      	str	r3, [sp, #28]
 810a68c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 810a690:	9002      	str	r0, [sp, #8]
 810a692:	9006      	str	r0, [sp, #24]
 810a694:	f8ad 3016 	strh.w	r3, [sp, #22]
 810a698:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 810a69a:	ab21      	add	r3, sp, #132	@ 0x84
 810a69c:	a902      	add	r1, sp, #8
 810a69e:	4628      	mov	r0, r5
 810a6a0:	9301      	str	r3, [sp, #4]
 810a6a2:	f002 fc8f 	bl	810cfc4 <_svfiprintf_r>
 810a6a6:	1c43      	adds	r3, r0, #1
 810a6a8:	bfbc      	itt	lt
 810a6aa:	238b      	movlt	r3, #139	@ 0x8b
 810a6ac:	602b      	strlt	r3, [r5, #0]
 810a6ae:	2c00      	cmp	r4, #0
 810a6b0:	d0dd      	beq.n	810a66e <sniprintf+0x16>
 810a6b2:	9b02      	ldr	r3, [sp, #8]
 810a6b4:	2200      	movs	r2, #0
 810a6b6:	701a      	strb	r2, [r3, #0]
 810a6b8:	e7d9      	b.n	810a66e <sniprintf+0x16>
 810a6ba:	bf00      	nop
 810a6bc:	1000002c 	.word	0x1000002c

0810a6c0 <siprintf>:
 810a6c0:	b40e      	push	{r1, r2, r3}
 810a6c2:	b500      	push	{lr}
 810a6c4:	b09c      	sub	sp, #112	@ 0x70
 810a6c6:	ab1d      	add	r3, sp, #116	@ 0x74
 810a6c8:	9002      	str	r0, [sp, #8]
 810a6ca:	9006      	str	r0, [sp, #24]
 810a6cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 810a6d0:	4809      	ldr	r0, [pc, #36]	@ (810a6f8 <siprintf+0x38>)
 810a6d2:	9107      	str	r1, [sp, #28]
 810a6d4:	9104      	str	r1, [sp, #16]
 810a6d6:	4909      	ldr	r1, [pc, #36]	@ (810a6fc <siprintf+0x3c>)
 810a6d8:	f853 2b04 	ldr.w	r2, [r3], #4
 810a6dc:	9105      	str	r1, [sp, #20]
 810a6de:	6800      	ldr	r0, [r0, #0]
 810a6e0:	9301      	str	r3, [sp, #4]
 810a6e2:	a902      	add	r1, sp, #8
 810a6e4:	f002 fc6e 	bl	810cfc4 <_svfiprintf_r>
 810a6e8:	9b02      	ldr	r3, [sp, #8]
 810a6ea:	2200      	movs	r2, #0
 810a6ec:	701a      	strb	r2, [r3, #0]
 810a6ee:	b01c      	add	sp, #112	@ 0x70
 810a6f0:	f85d eb04 	ldr.w	lr, [sp], #4
 810a6f4:	b003      	add	sp, #12
 810a6f6:	4770      	bx	lr
 810a6f8:	1000002c 	.word	0x1000002c
 810a6fc:	ffff0208 	.word	0xffff0208

0810a700 <__sread>:
 810a700:	b510      	push	{r4, lr}
 810a702:	460c      	mov	r4, r1
 810a704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a708:	f000 f900 	bl	810a90c <_read_r>
 810a70c:	2800      	cmp	r0, #0
 810a70e:	bfab      	itete	ge
 810a710:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810a712:	89a3      	ldrhlt	r3, [r4, #12]
 810a714:	181b      	addge	r3, r3, r0
 810a716:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 810a71a:	bfac      	ite	ge
 810a71c:	6563      	strge	r3, [r4, #84]	@ 0x54
 810a71e:	81a3      	strhlt	r3, [r4, #12]
 810a720:	bd10      	pop	{r4, pc}

0810a722 <__swrite>:
 810a722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a726:	461f      	mov	r7, r3
 810a728:	898b      	ldrh	r3, [r1, #12]
 810a72a:	05db      	lsls	r3, r3, #23
 810a72c:	4605      	mov	r5, r0
 810a72e:	460c      	mov	r4, r1
 810a730:	4616      	mov	r6, r2
 810a732:	d505      	bpl.n	810a740 <__swrite+0x1e>
 810a734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a738:	2302      	movs	r3, #2
 810a73a:	2200      	movs	r2, #0
 810a73c:	f000 f8d4 	bl	810a8e8 <_lseek_r>
 810a740:	89a3      	ldrh	r3, [r4, #12]
 810a742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810a746:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810a74a:	81a3      	strh	r3, [r4, #12]
 810a74c:	4632      	mov	r2, r6
 810a74e:	463b      	mov	r3, r7
 810a750:	4628      	mov	r0, r5
 810a752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810a756:	f000 b8eb 	b.w	810a930 <_write_r>

0810a75a <__sseek>:
 810a75a:	b510      	push	{r4, lr}
 810a75c:	460c      	mov	r4, r1
 810a75e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a762:	f000 f8c1 	bl	810a8e8 <_lseek_r>
 810a766:	1c43      	adds	r3, r0, #1
 810a768:	89a3      	ldrh	r3, [r4, #12]
 810a76a:	bf15      	itete	ne
 810a76c:	6560      	strne	r0, [r4, #84]	@ 0x54
 810a76e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 810a772:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 810a776:	81a3      	strheq	r3, [r4, #12]
 810a778:	bf18      	it	ne
 810a77a:	81a3      	strhne	r3, [r4, #12]
 810a77c:	bd10      	pop	{r4, pc}

0810a77e <__sclose>:
 810a77e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a782:	f000 b8a1 	b.w	810a8c8 <_close_r>

0810a786 <__swbuf_r>:
 810a786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a788:	460e      	mov	r6, r1
 810a78a:	4614      	mov	r4, r2
 810a78c:	4605      	mov	r5, r0
 810a78e:	b118      	cbz	r0, 810a798 <__swbuf_r+0x12>
 810a790:	6a03      	ldr	r3, [r0, #32]
 810a792:	b90b      	cbnz	r3, 810a798 <__swbuf_r+0x12>
 810a794:	f7ff fea8 	bl	810a4e8 <__sinit>
 810a798:	69a3      	ldr	r3, [r4, #24]
 810a79a:	60a3      	str	r3, [r4, #8]
 810a79c:	89a3      	ldrh	r3, [r4, #12]
 810a79e:	071a      	lsls	r2, r3, #28
 810a7a0:	d501      	bpl.n	810a7a6 <__swbuf_r+0x20>
 810a7a2:	6923      	ldr	r3, [r4, #16]
 810a7a4:	b943      	cbnz	r3, 810a7b8 <__swbuf_r+0x32>
 810a7a6:	4621      	mov	r1, r4
 810a7a8:	4628      	mov	r0, r5
 810a7aa:	f000 f82b 	bl	810a804 <__swsetup_r>
 810a7ae:	b118      	cbz	r0, 810a7b8 <__swbuf_r+0x32>
 810a7b0:	f04f 37ff 	mov.w	r7, #4294967295
 810a7b4:	4638      	mov	r0, r7
 810a7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810a7b8:	6823      	ldr	r3, [r4, #0]
 810a7ba:	6922      	ldr	r2, [r4, #16]
 810a7bc:	1a98      	subs	r0, r3, r2
 810a7be:	6963      	ldr	r3, [r4, #20]
 810a7c0:	b2f6      	uxtb	r6, r6
 810a7c2:	4283      	cmp	r3, r0
 810a7c4:	4637      	mov	r7, r6
 810a7c6:	dc05      	bgt.n	810a7d4 <__swbuf_r+0x4e>
 810a7c8:	4621      	mov	r1, r4
 810a7ca:	4628      	mov	r0, r5
 810a7cc:	f002 febc 	bl	810d548 <_fflush_r>
 810a7d0:	2800      	cmp	r0, #0
 810a7d2:	d1ed      	bne.n	810a7b0 <__swbuf_r+0x2a>
 810a7d4:	68a3      	ldr	r3, [r4, #8]
 810a7d6:	3b01      	subs	r3, #1
 810a7d8:	60a3      	str	r3, [r4, #8]
 810a7da:	6823      	ldr	r3, [r4, #0]
 810a7dc:	1c5a      	adds	r2, r3, #1
 810a7de:	6022      	str	r2, [r4, #0]
 810a7e0:	701e      	strb	r6, [r3, #0]
 810a7e2:	6962      	ldr	r2, [r4, #20]
 810a7e4:	1c43      	adds	r3, r0, #1
 810a7e6:	429a      	cmp	r2, r3
 810a7e8:	d004      	beq.n	810a7f4 <__swbuf_r+0x6e>
 810a7ea:	89a3      	ldrh	r3, [r4, #12]
 810a7ec:	07db      	lsls	r3, r3, #31
 810a7ee:	d5e1      	bpl.n	810a7b4 <__swbuf_r+0x2e>
 810a7f0:	2e0a      	cmp	r6, #10
 810a7f2:	d1df      	bne.n	810a7b4 <__swbuf_r+0x2e>
 810a7f4:	4621      	mov	r1, r4
 810a7f6:	4628      	mov	r0, r5
 810a7f8:	f002 fea6 	bl	810d548 <_fflush_r>
 810a7fc:	2800      	cmp	r0, #0
 810a7fe:	d0d9      	beq.n	810a7b4 <__swbuf_r+0x2e>
 810a800:	e7d6      	b.n	810a7b0 <__swbuf_r+0x2a>
	...

0810a804 <__swsetup_r>:
 810a804:	b538      	push	{r3, r4, r5, lr}
 810a806:	4b29      	ldr	r3, [pc, #164]	@ (810a8ac <__swsetup_r+0xa8>)
 810a808:	4605      	mov	r5, r0
 810a80a:	6818      	ldr	r0, [r3, #0]
 810a80c:	460c      	mov	r4, r1
 810a80e:	b118      	cbz	r0, 810a818 <__swsetup_r+0x14>
 810a810:	6a03      	ldr	r3, [r0, #32]
 810a812:	b90b      	cbnz	r3, 810a818 <__swsetup_r+0x14>
 810a814:	f7ff fe68 	bl	810a4e8 <__sinit>
 810a818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a81c:	0719      	lsls	r1, r3, #28
 810a81e:	d422      	bmi.n	810a866 <__swsetup_r+0x62>
 810a820:	06da      	lsls	r2, r3, #27
 810a822:	d407      	bmi.n	810a834 <__swsetup_r+0x30>
 810a824:	2209      	movs	r2, #9
 810a826:	602a      	str	r2, [r5, #0]
 810a828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810a82c:	81a3      	strh	r3, [r4, #12]
 810a82e:	f04f 30ff 	mov.w	r0, #4294967295
 810a832:	e033      	b.n	810a89c <__swsetup_r+0x98>
 810a834:	0758      	lsls	r0, r3, #29
 810a836:	d512      	bpl.n	810a85e <__swsetup_r+0x5a>
 810a838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810a83a:	b141      	cbz	r1, 810a84e <__swsetup_r+0x4a>
 810a83c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810a840:	4299      	cmp	r1, r3
 810a842:	d002      	beq.n	810a84a <__swsetup_r+0x46>
 810a844:	4628      	mov	r0, r5
 810a846:	f000 ff2b 	bl	810b6a0 <_free_r>
 810a84a:	2300      	movs	r3, #0
 810a84c:	6363      	str	r3, [r4, #52]	@ 0x34
 810a84e:	89a3      	ldrh	r3, [r4, #12]
 810a850:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 810a854:	81a3      	strh	r3, [r4, #12]
 810a856:	2300      	movs	r3, #0
 810a858:	6063      	str	r3, [r4, #4]
 810a85a:	6923      	ldr	r3, [r4, #16]
 810a85c:	6023      	str	r3, [r4, #0]
 810a85e:	89a3      	ldrh	r3, [r4, #12]
 810a860:	f043 0308 	orr.w	r3, r3, #8
 810a864:	81a3      	strh	r3, [r4, #12]
 810a866:	6923      	ldr	r3, [r4, #16]
 810a868:	b94b      	cbnz	r3, 810a87e <__swsetup_r+0x7a>
 810a86a:	89a3      	ldrh	r3, [r4, #12]
 810a86c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810a870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810a874:	d003      	beq.n	810a87e <__swsetup_r+0x7a>
 810a876:	4621      	mov	r1, r4
 810a878:	4628      	mov	r0, r5
 810a87a:	f002 feb3 	bl	810d5e4 <__smakebuf_r>
 810a87e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a882:	f013 0201 	ands.w	r2, r3, #1
 810a886:	d00a      	beq.n	810a89e <__swsetup_r+0x9a>
 810a888:	2200      	movs	r2, #0
 810a88a:	60a2      	str	r2, [r4, #8]
 810a88c:	6962      	ldr	r2, [r4, #20]
 810a88e:	4252      	negs	r2, r2
 810a890:	61a2      	str	r2, [r4, #24]
 810a892:	6922      	ldr	r2, [r4, #16]
 810a894:	b942      	cbnz	r2, 810a8a8 <__swsetup_r+0xa4>
 810a896:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810a89a:	d1c5      	bne.n	810a828 <__swsetup_r+0x24>
 810a89c:	bd38      	pop	{r3, r4, r5, pc}
 810a89e:	0799      	lsls	r1, r3, #30
 810a8a0:	bf58      	it	pl
 810a8a2:	6962      	ldrpl	r2, [r4, #20]
 810a8a4:	60a2      	str	r2, [r4, #8]
 810a8a6:	e7f4      	b.n	810a892 <__swsetup_r+0x8e>
 810a8a8:	2000      	movs	r0, #0
 810a8aa:	e7f7      	b.n	810a89c <__swsetup_r+0x98>
 810a8ac:	1000002c 	.word	0x1000002c

0810a8b0 <memset>:
 810a8b0:	4402      	add	r2, r0
 810a8b2:	4603      	mov	r3, r0
 810a8b4:	4293      	cmp	r3, r2
 810a8b6:	d100      	bne.n	810a8ba <memset+0xa>
 810a8b8:	4770      	bx	lr
 810a8ba:	f803 1b01 	strb.w	r1, [r3], #1
 810a8be:	e7f9      	b.n	810a8b4 <memset+0x4>

0810a8c0 <_localeconv_r>:
 810a8c0:	4800      	ldr	r0, [pc, #0]	@ (810a8c4 <_localeconv_r+0x4>)
 810a8c2:	4770      	bx	lr
 810a8c4:	1000016c 	.word	0x1000016c

0810a8c8 <_close_r>:
 810a8c8:	b538      	push	{r3, r4, r5, lr}
 810a8ca:	4d06      	ldr	r5, [pc, #24]	@ (810a8e4 <_close_r+0x1c>)
 810a8cc:	2300      	movs	r3, #0
 810a8ce:	4604      	mov	r4, r0
 810a8d0:	4608      	mov	r0, r1
 810a8d2:	602b      	str	r3, [r5, #0]
 810a8d4:	f7f9 f8c7 	bl	8103a66 <_close>
 810a8d8:	1c43      	adds	r3, r0, #1
 810a8da:	d102      	bne.n	810a8e2 <_close_r+0x1a>
 810a8dc:	682b      	ldr	r3, [r5, #0]
 810a8de:	b103      	cbz	r3, 810a8e2 <_close_r+0x1a>
 810a8e0:	6023      	str	r3, [r4, #0]
 810a8e2:	bd38      	pop	{r3, r4, r5, pc}
 810a8e4:	10000a94 	.word	0x10000a94

0810a8e8 <_lseek_r>:
 810a8e8:	b538      	push	{r3, r4, r5, lr}
 810a8ea:	4d07      	ldr	r5, [pc, #28]	@ (810a908 <_lseek_r+0x20>)
 810a8ec:	4604      	mov	r4, r0
 810a8ee:	4608      	mov	r0, r1
 810a8f0:	4611      	mov	r1, r2
 810a8f2:	2200      	movs	r2, #0
 810a8f4:	602a      	str	r2, [r5, #0]
 810a8f6:	461a      	mov	r2, r3
 810a8f8:	f7f9 f8dc 	bl	8103ab4 <_lseek>
 810a8fc:	1c43      	adds	r3, r0, #1
 810a8fe:	d102      	bne.n	810a906 <_lseek_r+0x1e>
 810a900:	682b      	ldr	r3, [r5, #0]
 810a902:	b103      	cbz	r3, 810a906 <_lseek_r+0x1e>
 810a904:	6023      	str	r3, [r4, #0]
 810a906:	bd38      	pop	{r3, r4, r5, pc}
 810a908:	10000a94 	.word	0x10000a94

0810a90c <_read_r>:
 810a90c:	b538      	push	{r3, r4, r5, lr}
 810a90e:	4d07      	ldr	r5, [pc, #28]	@ (810a92c <_read_r+0x20>)
 810a910:	4604      	mov	r4, r0
 810a912:	4608      	mov	r0, r1
 810a914:	4611      	mov	r1, r2
 810a916:	2200      	movs	r2, #0
 810a918:	602a      	str	r2, [r5, #0]
 810a91a:	461a      	mov	r2, r3
 810a91c:	f7f9 f868 	bl	81039f0 <_read>
 810a920:	1c43      	adds	r3, r0, #1
 810a922:	d102      	bne.n	810a92a <_read_r+0x1e>
 810a924:	682b      	ldr	r3, [r5, #0]
 810a926:	b103      	cbz	r3, 810a92a <_read_r+0x1e>
 810a928:	6023      	str	r3, [r4, #0]
 810a92a:	bd38      	pop	{r3, r4, r5, pc}
 810a92c:	10000a94 	.word	0x10000a94

0810a930 <_write_r>:
 810a930:	b538      	push	{r3, r4, r5, lr}
 810a932:	4d07      	ldr	r5, [pc, #28]	@ (810a950 <_write_r+0x20>)
 810a934:	4604      	mov	r4, r0
 810a936:	4608      	mov	r0, r1
 810a938:	4611      	mov	r1, r2
 810a93a:	2200      	movs	r2, #0
 810a93c:	602a      	str	r2, [r5, #0]
 810a93e:	461a      	mov	r2, r3
 810a940:	f7f9 f875 	bl	8103a2e <_write>
 810a944:	1c43      	adds	r3, r0, #1
 810a946:	d102      	bne.n	810a94e <_write_r+0x1e>
 810a948:	682b      	ldr	r3, [r5, #0]
 810a94a:	b103      	cbz	r3, 810a94e <_write_r+0x1e>
 810a94c:	6023      	str	r3, [r4, #0]
 810a94e:	bd38      	pop	{r3, r4, r5, pc}
 810a950:	10000a94 	.word	0x10000a94

0810a954 <__errno>:
 810a954:	4b01      	ldr	r3, [pc, #4]	@ (810a95c <__errno+0x8>)
 810a956:	6818      	ldr	r0, [r3, #0]
 810a958:	4770      	bx	lr
 810a95a:	bf00      	nop
 810a95c:	1000002c 	.word	0x1000002c

0810a960 <__libc_init_array>:
 810a960:	b570      	push	{r4, r5, r6, lr}
 810a962:	4d0d      	ldr	r5, [pc, #52]	@ (810a998 <__libc_init_array+0x38>)
 810a964:	4c0d      	ldr	r4, [pc, #52]	@ (810a99c <__libc_init_array+0x3c>)
 810a966:	1b64      	subs	r4, r4, r5
 810a968:	10a4      	asrs	r4, r4, #2
 810a96a:	2600      	movs	r6, #0
 810a96c:	42a6      	cmp	r6, r4
 810a96e:	d109      	bne.n	810a984 <__libc_init_array+0x24>
 810a970:	4d0b      	ldr	r5, [pc, #44]	@ (810a9a0 <__libc_init_array+0x40>)
 810a972:	4c0c      	ldr	r4, [pc, #48]	@ (810a9a4 <__libc_init_array+0x44>)
 810a974:	f003 fbc4 	bl	810e100 <_init>
 810a978:	1b64      	subs	r4, r4, r5
 810a97a:	10a4      	asrs	r4, r4, #2
 810a97c:	2600      	movs	r6, #0
 810a97e:	42a6      	cmp	r6, r4
 810a980:	d105      	bne.n	810a98e <__libc_init_array+0x2e>
 810a982:	bd70      	pop	{r4, r5, r6, pc}
 810a984:	f855 3b04 	ldr.w	r3, [r5], #4
 810a988:	4798      	blx	r3
 810a98a:	3601      	adds	r6, #1
 810a98c:	e7ee      	b.n	810a96c <__libc_init_array+0xc>
 810a98e:	f855 3b04 	ldr.w	r3, [r5], #4
 810a992:	4798      	blx	r3
 810a994:	3601      	adds	r6, #1
 810a996:	e7f2      	b.n	810a97e <__libc_init_array+0x1e>
 810a998:	0810eecc 	.word	0x0810eecc
 810a99c:	0810eecc 	.word	0x0810eecc
 810a9a0:	0810eecc 	.word	0x0810eecc
 810a9a4:	0810eed0 	.word	0x0810eed0

0810a9a8 <__retarget_lock_init_recursive>:
 810a9a8:	4770      	bx	lr

0810a9aa <__retarget_lock_acquire_recursive>:
 810a9aa:	4770      	bx	lr

0810a9ac <__retarget_lock_release_recursive>:
 810a9ac:	4770      	bx	lr

0810a9ae <memcpy>:
 810a9ae:	440a      	add	r2, r1
 810a9b0:	4291      	cmp	r1, r2
 810a9b2:	f100 33ff 	add.w	r3, r0, #4294967295
 810a9b6:	d100      	bne.n	810a9ba <memcpy+0xc>
 810a9b8:	4770      	bx	lr
 810a9ba:	b510      	push	{r4, lr}
 810a9bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 810a9c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 810a9c4:	4291      	cmp	r1, r2
 810a9c6:	d1f9      	bne.n	810a9bc <memcpy+0xe>
 810a9c8:	bd10      	pop	{r4, pc}
	...

0810a9cc <nanf>:
 810a9cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 810a9d4 <nanf+0x8>
 810a9d0:	4770      	bx	lr
 810a9d2:	bf00      	nop
 810a9d4:	7fc00000 	.word	0x7fc00000

0810a9d8 <copysign>:
 810a9d8:	b082      	sub	sp, #8
 810a9da:	ec51 0b10 	vmov	r0, r1, d0
 810a9de:	ed8d 1b00 	vstr	d1, [sp]
 810a9e2:	4602      	mov	r2, r0
 810a9e4:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 810a9e8:	9901      	ldr	r1, [sp, #4]
 810a9ea:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810a9ee:	ea40 0301 	orr.w	r3, r0, r1
 810a9f2:	ec43 2b10 	vmov	d0, r2, r3
 810a9f6:	b002      	add	sp, #8
 810a9f8:	4770      	bx	lr

0810a9fa <abort>:
 810a9fa:	b508      	push	{r3, lr}
 810a9fc:	2006      	movs	r0, #6
 810a9fe:	f002 fe81 	bl	810d704 <raise>
 810aa02:	2001      	movs	r0, #1
 810aa04:	f7f8 ffe9 	bl	81039da <_exit>

0810aa08 <quorem>:
 810aa08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aa0c:	6903      	ldr	r3, [r0, #16]
 810aa0e:	690c      	ldr	r4, [r1, #16]
 810aa10:	42a3      	cmp	r3, r4
 810aa12:	4607      	mov	r7, r0
 810aa14:	db7e      	blt.n	810ab14 <quorem+0x10c>
 810aa16:	3c01      	subs	r4, #1
 810aa18:	f101 0814 	add.w	r8, r1, #20
 810aa1c:	00a3      	lsls	r3, r4, #2
 810aa1e:	f100 0514 	add.w	r5, r0, #20
 810aa22:	9300      	str	r3, [sp, #0]
 810aa24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810aa28:	9301      	str	r3, [sp, #4]
 810aa2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810aa2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810aa32:	3301      	adds	r3, #1
 810aa34:	429a      	cmp	r2, r3
 810aa36:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810aa3a:	fbb2 f6f3 	udiv	r6, r2, r3
 810aa3e:	d32e      	bcc.n	810aa9e <quorem+0x96>
 810aa40:	f04f 0a00 	mov.w	sl, #0
 810aa44:	46c4      	mov	ip, r8
 810aa46:	46ae      	mov	lr, r5
 810aa48:	46d3      	mov	fp, sl
 810aa4a:	f85c 3b04 	ldr.w	r3, [ip], #4
 810aa4e:	b298      	uxth	r0, r3
 810aa50:	fb06 a000 	mla	r0, r6, r0, sl
 810aa54:	0c02      	lsrs	r2, r0, #16
 810aa56:	0c1b      	lsrs	r3, r3, #16
 810aa58:	fb06 2303 	mla	r3, r6, r3, r2
 810aa5c:	f8de 2000 	ldr.w	r2, [lr]
 810aa60:	b280      	uxth	r0, r0
 810aa62:	b292      	uxth	r2, r2
 810aa64:	1a12      	subs	r2, r2, r0
 810aa66:	445a      	add	r2, fp
 810aa68:	f8de 0000 	ldr.w	r0, [lr]
 810aa6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810aa70:	b29b      	uxth	r3, r3
 810aa72:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 810aa76:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 810aa7a:	b292      	uxth	r2, r2
 810aa7c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 810aa80:	45e1      	cmp	r9, ip
 810aa82:	f84e 2b04 	str.w	r2, [lr], #4
 810aa86:	ea4f 4b23 	mov.w	fp, r3, asr #16
 810aa8a:	d2de      	bcs.n	810aa4a <quorem+0x42>
 810aa8c:	9b00      	ldr	r3, [sp, #0]
 810aa8e:	58eb      	ldr	r3, [r5, r3]
 810aa90:	b92b      	cbnz	r3, 810aa9e <quorem+0x96>
 810aa92:	9b01      	ldr	r3, [sp, #4]
 810aa94:	3b04      	subs	r3, #4
 810aa96:	429d      	cmp	r5, r3
 810aa98:	461a      	mov	r2, r3
 810aa9a:	d32f      	bcc.n	810aafc <quorem+0xf4>
 810aa9c:	613c      	str	r4, [r7, #16]
 810aa9e:	4638      	mov	r0, r7
 810aaa0:	f001 f9c2 	bl	810be28 <__mcmp>
 810aaa4:	2800      	cmp	r0, #0
 810aaa6:	db25      	blt.n	810aaf4 <quorem+0xec>
 810aaa8:	4629      	mov	r1, r5
 810aaaa:	2000      	movs	r0, #0
 810aaac:	f858 2b04 	ldr.w	r2, [r8], #4
 810aab0:	f8d1 c000 	ldr.w	ip, [r1]
 810aab4:	fa1f fe82 	uxth.w	lr, r2
 810aab8:	fa1f f38c 	uxth.w	r3, ip
 810aabc:	eba3 030e 	sub.w	r3, r3, lr
 810aac0:	4403      	add	r3, r0
 810aac2:	0c12      	lsrs	r2, r2, #16
 810aac4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 810aac8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 810aacc:	b29b      	uxth	r3, r3
 810aace:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810aad2:	45c1      	cmp	r9, r8
 810aad4:	f841 3b04 	str.w	r3, [r1], #4
 810aad8:	ea4f 4022 	mov.w	r0, r2, asr #16
 810aadc:	d2e6      	bcs.n	810aaac <quorem+0xa4>
 810aade:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810aae2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810aae6:	b922      	cbnz	r2, 810aaf2 <quorem+0xea>
 810aae8:	3b04      	subs	r3, #4
 810aaea:	429d      	cmp	r5, r3
 810aaec:	461a      	mov	r2, r3
 810aaee:	d30b      	bcc.n	810ab08 <quorem+0x100>
 810aaf0:	613c      	str	r4, [r7, #16]
 810aaf2:	3601      	adds	r6, #1
 810aaf4:	4630      	mov	r0, r6
 810aaf6:	b003      	add	sp, #12
 810aaf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810aafc:	6812      	ldr	r2, [r2, #0]
 810aafe:	3b04      	subs	r3, #4
 810ab00:	2a00      	cmp	r2, #0
 810ab02:	d1cb      	bne.n	810aa9c <quorem+0x94>
 810ab04:	3c01      	subs	r4, #1
 810ab06:	e7c6      	b.n	810aa96 <quorem+0x8e>
 810ab08:	6812      	ldr	r2, [r2, #0]
 810ab0a:	3b04      	subs	r3, #4
 810ab0c:	2a00      	cmp	r2, #0
 810ab0e:	d1ef      	bne.n	810aaf0 <quorem+0xe8>
 810ab10:	3c01      	subs	r4, #1
 810ab12:	e7ea      	b.n	810aaea <quorem+0xe2>
 810ab14:	2000      	movs	r0, #0
 810ab16:	e7ee      	b.n	810aaf6 <quorem+0xee>

0810ab18 <_dtoa_r>:
 810ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ab1c:	69c7      	ldr	r7, [r0, #28]
 810ab1e:	b099      	sub	sp, #100	@ 0x64
 810ab20:	ed8d 0b02 	vstr	d0, [sp, #8]
 810ab24:	ec55 4b10 	vmov	r4, r5, d0
 810ab28:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 810ab2a:	9109      	str	r1, [sp, #36]	@ 0x24
 810ab2c:	4683      	mov	fp, r0
 810ab2e:	920e      	str	r2, [sp, #56]	@ 0x38
 810ab30:	9313      	str	r3, [sp, #76]	@ 0x4c
 810ab32:	b97f      	cbnz	r7, 810ab54 <_dtoa_r+0x3c>
 810ab34:	2010      	movs	r0, #16
 810ab36:	f000 fdfd 	bl	810b734 <malloc>
 810ab3a:	4602      	mov	r2, r0
 810ab3c:	f8cb 001c 	str.w	r0, [fp, #28]
 810ab40:	b920      	cbnz	r0, 810ab4c <_dtoa_r+0x34>
 810ab42:	4ba7      	ldr	r3, [pc, #668]	@ (810ade0 <_dtoa_r+0x2c8>)
 810ab44:	21ef      	movs	r1, #239	@ 0xef
 810ab46:	48a7      	ldr	r0, [pc, #668]	@ (810ade4 <_dtoa_r+0x2cc>)
 810ab48:	f7fe fdb8 	bl	81096bc <__assert_func>
 810ab4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 810ab50:	6007      	str	r7, [r0, #0]
 810ab52:	60c7      	str	r7, [r0, #12]
 810ab54:	f8db 301c 	ldr.w	r3, [fp, #28]
 810ab58:	6819      	ldr	r1, [r3, #0]
 810ab5a:	b159      	cbz	r1, 810ab74 <_dtoa_r+0x5c>
 810ab5c:	685a      	ldr	r2, [r3, #4]
 810ab5e:	604a      	str	r2, [r1, #4]
 810ab60:	2301      	movs	r3, #1
 810ab62:	4093      	lsls	r3, r2
 810ab64:	608b      	str	r3, [r1, #8]
 810ab66:	4658      	mov	r0, fp
 810ab68:	f000 feda 	bl	810b920 <_Bfree>
 810ab6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 810ab70:	2200      	movs	r2, #0
 810ab72:	601a      	str	r2, [r3, #0]
 810ab74:	1e2b      	subs	r3, r5, #0
 810ab76:	bfb9      	ittee	lt
 810ab78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 810ab7c:	9303      	strlt	r3, [sp, #12]
 810ab7e:	2300      	movge	r3, #0
 810ab80:	6033      	strge	r3, [r6, #0]
 810ab82:	9f03      	ldr	r7, [sp, #12]
 810ab84:	4b98      	ldr	r3, [pc, #608]	@ (810ade8 <_dtoa_r+0x2d0>)
 810ab86:	bfbc      	itt	lt
 810ab88:	2201      	movlt	r2, #1
 810ab8a:	6032      	strlt	r2, [r6, #0]
 810ab8c:	43bb      	bics	r3, r7
 810ab8e:	d112      	bne.n	810abb6 <_dtoa_r+0x9e>
 810ab90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810ab92:	f242 730f 	movw	r3, #9999	@ 0x270f
 810ab96:	6013      	str	r3, [r2, #0]
 810ab98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810ab9c:	4323      	orrs	r3, r4
 810ab9e:	f000 854d 	beq.w	810b63c <_dtoa_r+0xb24>
 810aba2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810aba4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 810adfc <_dtoa_r+0x2e4>
 810aba8:	2b00      	cmp	r3, #0
 810abaa:	f000 854f 	beq.w	810b64c <_dtoa_r+0xb34>
 810abae:	f10a 0303 	add.w	r3, sl, #3
 810abb2:	f000 bd49 	b.w	810b648 <_dtoa_r+0xb30>
 810abb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 810abba:	2200      	movs	r2, #0
 810abbc:	ec51 0b17 	vmov	r0, r1, d7
 810abc0:	2300      	movs	r3, #0
 810abc2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 810abc6:	f7f6 f807 	bl	8100bd8 <__aeabi_dcmpeq>
 810abca:	4680      	mov	r8, r0
 810abcc:	b158      	cbz	r0, 810abe6 <_dtoa_r+0xce>
 810abce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810abd0:	2301      	movs	r3, #1
 810abd2:	6013      	str	r3, [r2, #0]
 810abd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810abd6:	b113      	cbz	r3, 810abde <_dtoa_r+0xc6>
 810abd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810abda:	4b84      	ldr	r3, [pc, #528]	@ (810adec <_dtoa_r+0x2d4>)
 810abdc:	6013      	str	r3, [r2, #0]
 810abde:	f8df a220 	ldr.w	sl, [pc, #544]	@ 810ae00 <_dtoa_r+0x2e8>
 810abe2:	f000 bd33 	b.w	810b64c <_dtoa_r+0xb34>
 810abe6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 810abea:	aa16      	add	r2, sp, #88	@ 0x58
 810abec:	a917      	add	r1, sp, #92	@ 0x5c
 810abee:	4658      	mov	r0, fp
 810abf0:	f001 fa3a 	bl	810c068 <__d2b>
 810abf4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 810abf8:	4681      	mov	r9, r0
 810abfa:	2e00      	cmp	r6, #0
 810abfc:	d077      	beq.n	810acee <_dtoa_r+0x1d6>
 810abfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810ac00:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 810ac04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810ac08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810ac0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 810ac10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 810ac14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 810ac18:	4619      	mov	r1, r3
 810ac1a:	2200      	movs	r2, #0
 810ac1c:	4b74      	ldr	r3, [pc, #464]	@ (810adf0 <_dtoa_r+0x2d8>)
 810ac1e:	f7f5 fbbb 	bl	8100398 <__aeabi_dsub>
 810ac22:	a369      	add	r3, pc, #420	@ (adr r3, 810adc8 <_dtoa_r+0x2b0>)
 810ac24:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ac28:	f7f5 fd6e 	bl	8100708 <__aeabi_dmul>
 810ac2c:	a368      	add	r3, pc, #416	@ (adr r3, 810add0 <_dtoa_r+0x2b8>)
 810ac2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ac32:	f7f5 fbb3 	bl	810039c <__adddf3>
 810ac36:	4604      	mov	r4, r0
 810ac38:	4630      	mov	r0, r6
 810ac3a:	460d      	mov	r5, r1
 810ac3c:	f7f5 fcfa 	bl	8100634 <__aeabi_i2d>
 810ac40:	a365      	add	r3, pc, #404	@ (adr r3, 810add8 <_dtoa_r+0x2c0>)
 810ac42:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ac46:	f7f5 fd5f 	bl	8100708 <__aeabi_dmul>
 810ac4a:	4602      	mov	r2, r0
 810ac4c:	460b      	mov	r3, r1
 810ac4e:	4620      	mov	r0, r4
 810ac50:	4629      	mov	r1, r5
 810ac52:	f7f5 fba3 	bl	810039c <__adddf3>
 810ac56:	4604      	mov	r4, r0
 810ac58:	460d      	mov	r5, r1
 810ac5a:	f7f6 f805 	bl	8100c68 <__aeabi_d2iz>
 810ac5e:	2200      	movs	r2, #0
 810ac60:	4607      	mov	r7, r0
 810ac62:	2300      	movs	r3, #0
 810ac64:	4620      	mov	r0, r4
 810ac66:	4629      	mov	r1, r5
 810ac68:	f7f5 ffc0 	bl	8100bec <__aeabi_dcmplt>
 810ac6c:	b140      	cbz	r0, 810ac80 <_dtoa_r+0x168>
 810ac6e:	4638      	mov	r0, r7
 810ac70:	f7f5 fce0 	bl	8100634 <__aeabi_i2d>
 810ac74:	4622      	mov	r2, r4
 810ac76:	462b      	mov	r3, r5
 810ac78:	f7f5 ffae 	bl	8100bd8 <__aeabi_dcmpeq>
 810ac7c:	b900      	cbnz	r0, 810ac80 <_dtoa_r+0x168>
 810ac7e:	3f01      	subs	r7, #1
 810ac80:	2f16      	cmp	r7, #22
 810ac82:	d851      	bhi.n	810ad28 <_dtoa_r+0x210>
 810ac84:	4b5b      	ldr	r3, [pc, #364]	@ (810adf4 <_dtoa_r+0x2dc>)
 810ac86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810ac8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ac8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810ac92:	f7f5 ffab 	bl	8100bec <__aeabi_dcmplt>
 810ac96:	2800      	cmp	r0, #0
 810ac98:	d048      	beq.n	810ad2c <_dtoa_r+0x214>
 810ac9a:	3f01      	subs	r7, #1
 810ac9c:	2300      	movs	r3, #0
 810ac9e:	9312      	str	r3, [sp, #72]	@ 0x48
 810aca0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810aca2:	1b9b      	subs	r3, r3, r6
 810aca4:	1e5a      	subs	r2, r3, #1
 810aca6:	bf44      	itt	mi
 810aca8:	f1c3 0801 	rsbmi	r8, r3, #1
 810acac:	2300      	movmi	r3, #0
 810acae:	9208      	str	r2, [sp, #32]
 810acb0:	bf54      	ite	pl
 810acb2:	f04f 0800 	movpl.w	r8, #0
 810acb6:	9308      	strmi	r3, [sp, #32]
 810acb8:	2f00      	cmp	r7, #0
 810acba:	db39      	blt.n	810ad30 <_dtoa_r+0x218>
 810acbc:	9b08      	ldr	r3, [sp, #32]
 810acbe:	970f      	str	r7, [sp, #60]	@ 0x3c
 810acc0:	443b      	add	r3, r7
 810acc2:	9308      	str	r3, [sp, #32]
 810acc4:	2300      	movs	r3, #0
 810acc6:	930a      	str	r3, [sp, #40]	@ 0x28
 810acc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810acca:	2b09      	cmp	r3, #9
 810accc:	d864      	bhi.n	810ad98 <_dtoa_r+0x280>
 810acce:	2b05      	cmp	r3, #5
 810acd0:	bfc4      	itt	gt
 810acd2:	3b04      	subgt	r3, #4
 810acd4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 810acd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810acd8:	f1a3 0302 	sub.w	r3, r3, #2
 810acdc:	bfcc      	ite	gt
 810acde:	2400      	movgt	r4, #0
 810ace0:	2401      	movle	r4, #1
 810ace2:	2b03      	cmp	r3, #3
 810ace4:	d863      	bhi.n	810adae <_dtoa_r+0x296>
 810ace6:	e8df f003 	tbb	[pc, r3]
 810acea:	372a      	.short	0x372a
 810acec:	5535      	.short	0x5535
 810acee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 810acf2:	441e      	add	r6, r3
 810acf4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 810acf8:	2b20      	cmp	r3, #32
 810acfa:	bfc1      	itttt	gt
 810acfc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 810ad00:	409f      	lslgt	r7, r3
 810ad02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 810ad06:	fa24 f303 	lsrgt.w	r3, r4, r3
 810ad0a:	bfd6      	itet	le
 810ad0c:	f1c3 0320 	rsble	r3, r3, #32
 810ad10:	ea47 0003 	orrgt.w	r0, r7, r3
 810ad14:	fa04 f003 	lslle.w	r0, r4, r3
 810ad18:	f7f5 fc7c 	bl	8100614 <__aeabi_ui2d>
 810ad1c:	2201      	movs	r2, #1
 810ad1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 810ad22:	3e01      	subs	r6, #1
 810ad24:	9214      	str	r2, [sp, #80]	@ 0x50
 810ad26:	e777      	b.n	810ac18 <_dtoa_r+0x100>
 810ad28:	2301      	movs	r3, #1
 810ad2a:	e7b8      	b.n	810ac9e <_dtoa_r+0x186>
 810ad2c:	9012      	str	r0, [sp, #72]	@ 0x48
 810ad2e:	e7b7      	b.n	810aca0 <_dtoa_r+0x188>
 810ad30:	427b      	negs	r3, r7
 810ad32:	930a      	str	r3, [sp, #40]	@ 0x28
 810ad34:	2300      	movs	r3, #0
 810ad36:	eba8 0807 	sub.w	r8, r8, r7
 810ad3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 810ad3c:	e7c4      	b.n	810acc8 <_dtoa_r+0x1b0>
 810ad3e:	2300      	movs	r3, #0
 810ad40:	930b      	str	r3, [sp, #44]	@ 0x2c
 810ad42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810ad44:	2b00      	cmp	r3, #0
 810ad46:	dc35      	bgt.n	810adb4 <_dtoa_r+0x29c>
 810ad48:	2301      	movs	r3, #1
 810ad4a:	9300      	str	r3, [sp, #0]
 810ad4c:	9307      	str	r3, [sp, #28]
 810ad4e:	461a      	mov	r2, r3
 810ad50:	920e      	str	r2, [sp, #56]	@ 0x38
 810ad52:	e00b      	b.n	810ad6c <_dtoa_r+0x254>
 810ad54:	2301      	movs	r3, #1
 810ad56:	e7f3      	b.n	810ad40 <_dtoa_r+0x228>
 810ad58:	2300      	movs	r3, #0
 810ad5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 810ad5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810ad5e:	18fb      	adds	r3, r7, r3
 810ad60:	9300      	str	r3, [sp, #0]
 810ad62:	3301      	adds	r3, #1
 810ad64:	2b01      	cmp	r3, #1
 810ad66:	9307      	str	r3, [sp, #28]
 810ad68:	bfb8      	it	lt
 810ad6a:	2301      	movlt	r3, #1
 810ad6c:	f8db 001c 	ldr.w	r0, [fp, #28]
 810ad70:	2100      	movs	r1, #0
 810ad72:	2204      	movs	r2, #4
 810ad74:	f102 0514 	add.w	r5, r2, #20
 810ad78:	429d      	cmp	r5, r3
 810ad7a:	d91f      	bls.n	810adbc <_dtoa_r+0x2a4>
 810ad7c:	6041      	str	r1, [r0, #4]
 810ad7e:	4658      	mov	r0, fp
 810ad80:	f000 fd8e 	bl	810b8a0 <_Balloc>
 810ad84:	4682      	mov	sl, r0
 810ad86:	2800      	cmp	r0, #0
 810ad88:	d13c      	bne.n	810ae04 <_dtoa_r+0x2ec>
 810ad8a:	4b1b      	ldr	r3, [pc, #108]	@ (810adf8 <_dtoa_r+0x2e0>)
 810ad8c:	4602      	mov	r2, r0
 810ad8e:	f240 11af 	movw	r1, #431	@ 0x1af
 810ad92:	e6d8      	b.n	810ab46 <_dtoa_r+0x2e>
 810ad94:	2301      	movs	r3, #1
 810ad96:	e7e0      	b.n	810ad5a <_dtoa_r+0x242>
 810ad98:	2401      	movs	r4, #1
 810ad9a:	2300      	movs	r3, #0
 810ad9c:	9309      	str	r3, [sp, #36]	@ 0x24
 810ad9e:	940b      	str	r4, [sp, #44]	@ 0x2c
 810ada0:	f04f 33ff 	mov.w	r3, #4294967295
 810ada4:	9300      	str	r3, [sp, #0]
 810ada6:	9307      	str	r3, [sp, #28]
 810ada8:	2200      	movs	r2, #0
 810adaa:	2312      	movs	r3, #18
 810adac:	e7d0      	b.n	810ad50 <_dtoa_r+0x238>
 810adae:	2301      	movs	r3, #1
 810adb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 810adb2:	e7f5      	b.n	810ada0 <_dtoa_r+0x288>
 810adb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810adb6:	9300      	str	r3, [sp, #0]
 810adb8:	9307      	str	r3, [sp, #28]
 810adba:	e7d7      	b.n	810ad6c <_dtoa_r+0x254>
 810adbc:	3101      	adds	r1, #1
 810adbe:	0052      	lsls	r2, r2, #1
 810adc0:	e7d8      	b.n	810ad74 <_dtoa_r+0x25c>
 810adc2:	bf00      	nop
 810adc4:	f3af 8000 	nop.w
 810adc8:	636f4361 	.word	0x636f4361
 810adcc:	3fd287a7 	.word	0x3fd287a7
 810add0:	8b60c8b3 	.word	0x8b60c8b3
 810add4:	3fc68a28 	.word	0x3fc68a28
 810add8:	509f79fb 	.word	0x509f79fb
 810addc:	3fd34413 	.word	0x3fd34413
 810ade0:	0810eb1a 	.word	0x0810eb1a
 810ade4:	0810eb31 	.word	0x0810eb31
 810ade8:	7ff00000 	.word	0x7ff00000
 810adec:	0810eae5 	.word	0x0810eae5
 810adf0:	3ff80000 	.word	0x3ff80000
 810adf4:	0810ec28 	.word	0x0810ec28
 810adf8:	0810eb89 	.word	0x0810eb89
 810adfc:	0810eb16 	.word	0x0810eb16
 810ae00:	0810eae4 	.word	0x0810eae4
 810ae04:	f8db 301c 	ldr.w	r3, [fp, #28]
 810ae08:	6018      	str	r0, [r3, #0]
 810ae0a:	9b07      	ldr	r3, [sp, #28]
 810ae0c:	2b0e      	cmp	r3, #14
 810ae0e:	f200 80a4 	bhi.w	810af5a <_dtoa_r+0x442>
 810ae12:	2c00      	cmp	r4, #0
 810ae14:	f000 80a1 	beq.w	810af5a <_dtoa_r+0x442>
 810ae18:	2f00      	cmp	r7, #0
 810ae1a:	dd33      	ble.n	810ae84 <_dtoa_r+0x36c>
 810ae1c:	4bad      	ldr	r3, [pc, #692]	@ (810b0d4 <_dtoa_r+0x5bc>)
 810ae1e:	f007 020f 	and.w	r2, r7, #15
 810ae22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810ae26:	ed93 7b00 	vldr	d7, [r3]
 810ae2a:	05f8      	lsls	r0, r7, #23
 810ae2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 810ae30:	ea4f 1427 	mov.w	r4, r7, asr #4
 810ae34:	d516      	bpl.n	810ae64 <_dtoa_r+0x34c>
 810ae36:	4ba8      	ldr	r3, [pc, #672]	@ (810b0d8 <_dtoa_r+0x5c0>)
 810ae38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810ae3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810ae40:	f7f5 fd8c 	bl	810095c <__aeabi_ddiv>
 810ae44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810ae48:	f004 040f 	and.w	r4, r4, #15
 810ae4c:	2603      	movs	r6, #3
 810ae4e:	4da2      	ldr	r5, [pc, #648]	@ (810b0d8 <_dtoa_r+0x5c0>)
 810ae50:	b954      	cbnz	r4, 810ae68 <_dtoa_r+0x350>
 810ae52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810ae56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810ae5a:	f7f5 fd7f 	bl	810095c <__aeabi_ddiv>
 810ae5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810ae62:	e028      	b.n	810aeb6 <_dtoa_r+0x39e>
 810ae64:	2602      	movs	r6, #2
 810ae66:	e7f2      	b.n	810ae4e <_dtoa_r+0x336>
 810ae68:	07e1      	lsls	r1, r4, #31
 810ae6a:	d508      	bpl.n	810ae7e <_dtoa_r+0x366>
 810ae6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810ae70:	e9d5 2300 	ldrd	r2, r3, [r5]
 810ae74:	f7f5 fc48 	bl	8100708 <__aeabi_dmul>
 810ae78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810ae7c:	3601      	adds	r6, #1
 810ae7e:	1064      	asrs	r4, r4, #1
 810ae80:	3508      	adds	r5, #8
 810ae82:	e7e5      	b.n	810ae50 <_dtoa_r+0x338>
 810ae84:	f000 80d2 	beq.w	810b02c <_dtoa_r+0x514>
 810ae88:	427c      	negs	r4, r7
 810ae8a:	4b92      	ldr	r3, [pc, #584]	@ (810b0d4 <_dtoa_r+0x5bc>)
 810ae8c:	4d92      	ldr	r5, [pc, #584]	@ (810b0d8 <_dtoa_r+0x5c0>)
 810ae8e:	f004 020f 	and.w	r2, r4, #15
 810ae92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810ae96:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ae9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810ae9e:	f7f5 fc33 	bl	8100708 <__aeabi_dmul>
 810aea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810aea6:	1124      	asrs	r4, r4, #4
 810aea8:	2300      	movs	r3, #0
 810aeaa:	2602      	movs	r6, #2
 810aeac:	2c00      	cmp	r4, #0
 810aeae:	f040 80b2 	bne.w	810b016 <_dtoa_r+0x4fe>
 810aeb2:	2b00      	cmp	r3, #0
 810aeb4:	d1d3      	bne.n	810ae5e <_dtoa_r+0x346>
 810aeb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810aeb8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810aebc:	2b00      	cmp	r3, #0
 810aebe:	f000 80b7 	beq.w	810b030 <_dtoa_r+0x518>
 810aec2:	4b86      	ldr	r3, [pc, #536]	@ (810b0dc <_dtoa_r+0x5c4>)
 810aec4:	2200      	movs	r2, #0
 810aec6:	4620      	mov	r0, r4
 810aec8:	4629      	mov	r1, r5
 810aeca:	f7f5 fe8f 	bl	8100bec <__aeabi_dcmplt>
 810aece:	2800      	cmp	r0, #0
 810aed0:	f000 80ae 	beq.w	810b030 <_dtoa_r+0x518>
 810aed4:	9b07      	ldr	r3, [sp, #28]
 810aed6:	2b00      	cmp	r3, #0
 810aed8:	f000 80aa 	beq.w	810b030 <_dtoa_r+0x518>
 810aedc:	9b00      	ldr	r3, [sp, #0]
 810aede:	2b00      	cmp	r3, #0
 810aee0:	dd37      	ble.n	810af52 <_dtoa_r+0x43a>
 810aee2:	1e7b      	subs	r3, r7, #1
 810aee4:	9304      	str	r3, [sp, #16]
 810aee6:	4620      	mov	r0, r4
 810aee8:	4b7d      	ldr	r3, [pc, #500]	@ (810b0e0 <_dtoa_r+0x5c8>)
 810aeea:	2200      	movs	r2, #0
 810aeec:	4629      	mov	r1, r5
 810aeee:	f7f5 fc0b 	bl	8100708 <__aeabi_dmul>
 810aef2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810aef6:	9c00      	ldr	r4, [sp, #0]
 810aef8:	3601      	adds	r6, #1
 810aefa:	4630      	mov	r0, r6
 810aefc:	f7f5 fb9a 	bl	8100634 <__aeabi_i2d>
 810af00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810af04:	f7f5 fc00 	bl	8100708 <__aeabi_dmul>
 810af08:	4b76      	ldr	r3, [pc, #472]	@ (810b0e4 <_dtoa_r+0x5cc>)
 810af0a:	2200      	movs	r2, #0
 810af0c:	f7f5 fa46 	bl	810039c <__adddf3>
 810af10:	4605      	mov	r5, r0
 810af12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 810af16:	2c00      	cmp	r4, #0
 810af18:	f040 808d 	bne.w	810b036 <_dtoa_r+0x51e>
 810af1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810af20:	4b71      	ldr	r3, [pc, #452]	@ (810b0e8 <_dtoa_r+0x5d0>)
 810af22:	2200      	movs	r2, #0
 810af24:	f7f5 fa38 	bl	8100398 <__aeabi_dsub>
 810af28:	4602      	mov	r2, r0
 810af2a:	460b      	mov	r3, r1
 810af2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810af30:	462a      	mov	r2, r5
 810af32:	4633      	mov	r3, r6
 810af34:	f7f5 fe78 	bl	8100c28 <__aeabi_dcmpgt>
 810af38:	2800      	cmp	r0, #0
 810af3a:	f040 828b 	bne.w	810b454 <_dtoa_r+0x93c>
 810af3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810af42:	462a      	mov	r2, r5
 810af44:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 810af48:	f7f5 fe50 	bl	8100bec <__aeabi_dcmplt>
 810af4c:	2800      	cmp	r0, #0
 810af4e:	f040 8128 	bne.w	810b1a2 <_dtoa_r+0x68a>
 810af52:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 810af56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 810af5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810af5c:	2b00      	cmp	r3, #0
 810af5e:	f2c0 815a 	blt.w	810b216 <_dtoa_r+0x6fe>
 810af62:	2f0e      	cmp	r7, #14
 810af64:	f300 8157 	bgt.w	810b216 <_dtoa_r+0x6fe>
 810af68:	4b5a      	ldr	r3, [pc, #360]	@ (810b0d4 <_dtoa_r+0x5bc>)
 810af6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810af6e:	ed93 7b00 	vldr	d7, [r3]
 810af72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810af74:	2b00      	cmp	r3, #0
 810af76:	ed8d 7b00 	vstr	d7, [sp]
 810af7a:	da03      	bge.n	810af84 <_dtoa_r+0x46c>
 810af7c:	9b07      	ldr	r3, [sp, #28]
 810af7e:	2b00      	cmp	r3, #0
 810af80:	f340 8101 	ble.w	810b186 <_dtoa_r+0x66e>
 810af84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810af88:	4656      	mov	r6, sl
 810af8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 810af8e:	4620      	mov	r0, r4
 810af90:	4629      	mov	r1, r5
 810af92:	f7f5 fce3 	bl	810095c <__aeabi_ddiv>
 810af96:	f7f5 fe67 	bl	8100c68 <__aeabi_d2iz>
 810af9a:	4680      	mov	r8, r0
 810af9c:	f7f5 fb4a 	bl	8100634 <__aeabi_i2d>
 810afa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 810afa4:	f7f5 fbb0 	bl	8100708 <__aeabi_dmul>
 810afa8:	4602      	mov	r2, r0
 810afaa:	460b      	mov	r3, r1
 810afac:	4620      	mov	r0, r4
 810afae:	4629      	mov	r1, r5
 810afb0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 810afb4:	f7f5 f9f0 	bl	8100398 <__aeabi_dsub>
 810afb8:	f806 4b01 	strb.w	r4, [r6], #1
 810afbc:	9d07      	ldr	r5, [sp, #28]
 810afbe:	eba6 040a 	sub.w	r4, r6, sl
 810afc2:	42a5      	cmp	r5, r4
 810afc4:	4602      	mov	r2, r0
 810afc6:	460b      	mov	r3, r1
 810afc8:	f040 8117 	bne.w	810b1fa <_dtoa_r+0x6e2>
 810afcc:	f7f5 f9e6 	bl	810039c <__adddf3>
 810afd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 810afd4:	4604      	mov	r4, r0
 810afd6:	460d      	mov	r5, r1
 810afd8:	f7f5 fe26 	bl	8100c28 <__aeabi_dcmpgt>
 810afdc:	2800      	cmp	r0, #0
 810afde:	f040 80f9 	bne.w	810b1d4 <_dtoa_r+0x6bc>
 810afe2:	e9dd 2300 	ldrd	r2, r3, [sp]
 810afe6:	4620      	mov	r0, r4
 810afe8:	4629      	mov	r1, r5
 810afea:	f7f5 fdf5 	bl	8100bd8 <__aeabi_dcmpeq>
 810afee:	b118      	cbz	r0, 810aff8 <_dtoa_r+0x4e0>
 810aff0:	f018 0f01 	tst.w	r8, #1
 810aff4:	f040 80ee 	bne.w	810b1d4 <_dtoa_r+0x6bc>
 810aff8:	4649      	mov	r1, r9
 810affa:	4658      	mov	r0, fp
 810affc:	f000 fc90 	bl	810b920 <_Bfree>
 810b000:	2300      	movs	r3, #0
 810b002:	7033      	strb	r3, [r6, #0]
 810b004:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810b006:	3701      	adds	r7, #1
 810b008:	601f      	str	r7, [r3, #0]
 810b00a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810b00c:	2b00      	cmp	r3, #0
 810b00e:	f000 831d 	beq.w	810b64c <_dtoa_r+0xb34>
 810b012:	601e      	str	r6, [r3, #0]
 810b014:	e31a      	b.n	810b64c <_dtoa_r+0xb34>
 810b016:	07e2      	lsls	r2, r4, #31
 810b018:	d505      	bpl.n	810b026 <_dtoa_r+0x50e>
 810b01a:	e9d5 2300 	ldrd	r2, r3, [r5]
 810b01e:	f7f5 fb73 	bl	8100708 <__aeabi_dmul>
 810b022:	3601      	adds	r6, #1
 810b024:	2301      	movs	r3, #1
 810b026:	1064      	asrs	r4, r4, #1
 810b028:	3508      	adds	r5, #8
 810b02a:	e73f      	b.n	810aeac <_dtoa_r+0x394>
 810b02c:	2602      	movs	r6, #2
 810b02e:	e742      	b.n	810aeb6 <_dtoa_r+0x39e>
 810b030:	9c07      	ldr	r4, [sp, #28]
 810b032:	9704      	str	r7, [sp, #16]
 810b034:	e761      	b.n	810aefa <_dtoa_r+0x3e2>
 810b036:	4b27      	ldr	r3, [pc, #156]	@ (810b0d4 <_dtoa_r+0x5bc>)
 810b038:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810b03a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810b03e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810b042:	4454      	add	r4, sl
 810b044:	2900      	cmp	r1, #0
 810b046:	d053      	beq.n	810b0f0 <_dtoa_r+0x5d8>
 810b048:	4928      	ldr	r1, [pc, #160]	@ (810b0ec <_dtoa_r+0x5d4>)
 810b04a:	2000      	movs	r0, #0
 810b04c:	f7f5 fc86 	bl	810095c <__aeabi_ddiv>
 810b050:	4633      	mov	r3, r6
 810b052:	462a      	mov	r2, r5
 810b054:	f7f5 f9a0 	bl	8100398 <__aeabi_dsub>
 810b058:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810b05c:	4656      	mov	r6, sl
 810b05e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b062:	f7f5 fe01 	bl	8100c68 <__aeabi_d2iz>
 810b066:	4605      	mov	r5, r0
 810b068:	f7f5 fae4 	bl	8100634 <__aeabi_i2d>
 810b06c:	4602      	mov	r2, r0
 810b06e:	460b      	mov	r3, r1
 810b070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b074:	f7f5 f990 	bl	8100398 <__aeabi_dsub>
 810b078:	3530      	adds	r5, #48	@ 0x30
 810b07a:	4602      	mov	r2, r0
 810b07c:	460b      	mov	r3, r1
 810b07e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810b082:	f806 5b01 	strb.w	r5, [r6], #1
 810b086:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810b08a:	f7f5 fdaf 	bl	8100bec <__aeabi_dcmplt>
 810b08e:	2800      	cmp	r0, #0
 810b090:	d171      	bne.n	810b176 <_dtoa_r+0x65e>
 810b092:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b096:	4911      	ldr	r1, [pc, #68]	@ (810b0dc <_dtoa_r+0x5c4>)
 810b098:	2000      	movs	r0, #0
 810b09a:	f7f5 f97d 	bl	8100398 <__aeabi_dsub>
 810b09e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810b0a2:	f7f5 fda3 	bl	8100bec <__aeabi_dcmplt>
 810b0a6:	2800      	cmp	r0, #0
 810b0a8:	f040 8095 	bne.w	810b1d6 <_dtoa_r+0x6be>
 810b0ac:	42a6      	cmp	r6, r4
 810b0ae:	f43f af50 	beq.w	810af52 <_dtoa_r+0x43a>
 810b0b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810b0b6:	4b0a      	ldr	r3, [pc, #40]	@ (810b0e0 <_dtoa_r+0x5c8>)
 810b0b8:	2200      	movs	r2, #0
 810b0ba:	f7f5 fb25 	bl	8100708 <__aeabi_dmul>
 810b0be:	4b08      	ldr	r3, [pc, #32]	@ (810b0e0 <_dtoa_r+0x5c8>)
 810b0c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810b0c4:	2200      	movs	r2, #0
 810b0c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b0ca:	f7f5 fb1d 	bl	8100708 <__aeabi_dmul>
 810b0ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b0d2:	e7c4      	b.n	810b05e <_dtoa_r+0x546>
 810b0d4:	0810ec28 	.word	0x0810ec28
 810b0d8:	0810ec00 	.word	0x0810ec00
 810b0dc:	3ff00000 	.word	0x3ff00000
 810b0e0:	40240000 	.word	0x40240000
 810b0e4:	401c0000 	.word	0x401c0000
 810b0e8:	40140000 	.word	0x40140000
 810b0ec:	3fe00000 	.word	0x3fe00000
 810b0f0:	4631      	mov	r1, r6
 810b0f2:	4628      	mov	r0, r5
 810b0f4:	f7f5 fb08 	bl	8100708 <__aeabi_dmul>
 810b0f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810b0fc:	9415      	str	r4, [sp, #84]	@ 0x54
 810b0fe:	4656      	mov	r6, sl
 810b100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b104:	f7f5 fdb0 	bl	8100c68 <__aeabi_d2iz>
 810b108:	4605      	mov	r5, r0
 810b10a:	f7f5 fa93 	bl	8100634 <__aeabi_i2d>
 810b10e:	4602      	mov	r2, r0
 810b110:	460b      	mov	r3, r1
 810b112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b116:	f7f5 f93f 	bl	8100398 <__aeabi_dsub>
 810b11a:	3530      	adds	r5, #48	@ 0x30
 810b11c:	f806 5b01 	strb.w	r5, [r6], #1
 810b120:	4602      	mov	r2, r0
 810b122:	460b      	mov	r3, r1
 810b124:	42a6      	cmp	r6, r4
 810b126:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810b12a:	f04f 0200 	mov.w	r2, #0
 810b12e:	d124      	bne.n	810b17a <_dtoa_r+0x662>
 810b130:	4bac      	ldr	r3, [pc, #688]	@ (810b3e4 <_dtoa_r+0x8cc>)
 810b132:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810b136:	f7f5 f931 	bl	810039c <__adddf3>
 810b13a:	4602      	mov	r2, r0
 810b13c:	460b      	mov	r3, r1
 810b13e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b142:	f7f5 fd71 	bl	8100c28 <__aeabi_dcmpgt>
 810b146:	2800      	cmp	r0, #0
 810b148:	d145      	bne.n	810b1d6 <_dtoa_r+0x6be>
 810b14a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810b14e:	49a5      	ldr	r1, [pc, #660]	@ (810b3e4 <_dtoa_r+0x8cc>)
 810b150:	2000      	movs	r0, #0
 810b152:	f7f5 f921 	bl	8100398 <__aeabi_dsub>
 810b156:	4602      	mov	r2, r0
 810b158:	460b      	mov	r3, r1
 810b15a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b15e:	f7f5 fd45 	bl	8100bec <__aeabi_dcmplt>
 810b162:	2800      	cmp	r0, #0
 810b164:	f43f aef5 	beq.w	810af52 <_dtoa_r+0x43a>
 810b168:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 810b16a:	1e73      	subs	r3, r6, #1
 810b16c:	9315      	str	r3, [sp, #84]	@ 0x54
 810b16e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810b172:	2b30      	cmp	r3, #48	@ 0x30
 810b174:	d0f8      	beq.n	810b168 <_dtoa_r+0x650>
 810b176:	9f04      	ldr	r7, [sp, #16]
 810b178:	e73e      	b.n	810aff8 <_dtoa_r+0x4e0>
 810b17a:	4b9b      	ldr	r3, [pc, #620]	@ (810b3e8 <_dtoa_r+0x8d0>)
 810b17c:	f7f5 fac4 	bl	8100708 <__aeabi_dmul>
 810b180:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b184:	e7bc      	b.n	810b100 <_dtoa_r+0x5e8>
 810b186:	d10c      	bne.n	810b1a2 <_dtoa_r+0x68a>
 810b188:	4b98      	ldr	r3, [pc, #608]	@ (810b3ec <_dtoa_r+0x8d4>)
 810b18a:	2200      	movs	r2, #0
 810b18c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810b190:	f7f5 faba 	bl	8100708 <__aeabi_dmul>
 810b194:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b198:	f7f5 fd3c 	bl	8100c14 <__aeabi_dcmpge>
 810b19c:	2800      	cmp	r0, #0
 810b19e:	f000 8157 	beq.w	810b450 <_dtoa_r+0x938>
 810b1a2:	2400      	movs	r4, #0
 810b1a4:	4625      	mov	r5, r4
 810b1a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810b1a8:	43db      	mvns	r3, r3
 810b1aa:	9304      	str	r3, [sp, #16]
 810b1ac:	4656      	mov	r6, sl
 810b1ae:	2700      	movs	r7, #0
 810b1b0:	4621      	mov	r1, r4
 810b1b2:	4658      	mov	r0, fp
 810b1b4:	f000 fbb4 	bl	810b920 <_Bfree>
 810b1b8:	2d00      	cmp	r5, #0
 810b1ba:	d0dc      	beq.n	810b176 <_dtoa_r+0x65e>
 810b1bc:	b12f      	cbz	r7, 810b1ca <_dtoa_r+0x6b2>
 810b1be:	42af      	cmp	r7, r5
 810b1c0:	d003      	beq.n	810b1ca <_dtoa_r+0x6b2>
 810b1c2:	4639      	mov	r1, r7
 810b1c4:	4658      	mov	r0, fp
 810b1c6:	f000 fbab 	bl	810b920 <_Bfree>
 810b1ca:	4629      	mov	r1, r5
 810b1cc:	4658      	mov	r0, fp
 810b1ce:	f000 fba7 	bl	810b920 <_Bfree>
 810b1d2:	e7d0      	b.n	810b176 <_dtoa_r+0x65e>
 810b1d4:	9704      	str	r7, [sp, #16]
 810b1d6:	4633      	mov	r3, r6
 810b1d8:	461e      	mov	r6, r3
 810b1da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b1de:	2a39      	cmp	r2, #57	@ 0x39
 810b1e0:	d107      	bne.n	810b1f2 <_dtoa_r+0x6da>
 810b1e2:	459a      	cmp	sl, r3
 810b1e4:	d1f8      	bne.n	810b1d8 <_dtoa_r+0x6c0>
 810b1e6:	9a04      	ldr	r2, [sp, #16]
 810b1e8:	3201      	adds	r2, #1
 810b1ea:	9204      	str	r2, [sp, #16]
 810b1ec:	2230      	movs	r2, #48	@ 0x30
 810b1ee:	f88a 2000 	strb.w	r2, [sl]
 810b1f2:	781a      	ldrb	r2, [r3, #0]
 810b1f4:	3201      	adds	r2, #1
 810b1f6:	701a      	strb	r2, [r3, #0]
 810b1f8:	e7bd      	b.n	810b176 <_dtoa_r+0x65e>
 810b1fa:	4b7b      	ldr	r3, [pc, #492]	@ (810b3e8 <_dtoa_r+0x8d0>)
 810b1fc:	2200      	movs	r2, #0
 810b1fe:	f7f5 fa83 	bl	8100708 <__aeabi_dmul>
 810b202:	2200      	movs	r2, #0
 810b204:	2300      	movs	r3, #0
 810b206:	4604      	mov	r4, r0
 810b208:	460d      	mov	r5, r1
 810b20a:	f7f5 fce5 	bl	8100bd8 <__aeabi_dcmpeq>
 810b20e:	2800      	cmp	r0, #0
 810b210:	f43f aebb 	beq.w	810af8a <_dtoa_r+0x472>
 810b214:	e6f0      	b.n	810aff8 <_dtoa_r+0x4e0>
 810b216:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 810b218:	2a00      	cmp	r2, #0
 810b21a:	f000 80db 	beq.w	810b3d4 <_dtoa_r+0x8bc>
 810b21e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810b220:	2a01      	cmp	r2, #1
 810b222:	f300 80bf 	bgt.w	810b3a4 <_dtoa_r+0x88c>
 810b226:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 810b228:	2a00      	cmp	r2, #0
 810b22a:	f000 80b7 	beq.w	810b39c <_dtoa_r+0x884>
 810b22e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 810b232:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810b234:	4646      	mov	r6, r8
 810b236:	9a08      	ldr	r2, [sp, #32]
 810b238:	2101      	movs	r1, #1
 810b23a:	441a      	add	r2, r3
 810b23c:	4658      	mov	r0, fp
 810b23e:	4498      	add	r8, r3
 810b240:	9208      	str	r2, [sp, #32]
 810b242:	f000 fc6b 	bl	810bb1c <__i2b>
 810b246:	4605      	mov	r5, r0
 810b248:	b15e      	cbz	r6, 810b262 <_dtoa_r+0x74a>
 810b24a:	9b08      	ldr	r3, [sp, #32]
 810b24c:	2b00      	cmp	r3, #0
 810b24e:	dd08      	ble.n	810b262 <_dtoa_r+0x74a>
 810b250:	42b3      	cmp	r3, r6
 810b252:	9a08      	ldr	r2, [sp, #32]
 810b254:	bfa8      	it	ge
 810b256:	4633      	movge	r3, r6
 810b258:	eba8 0803 	sub.w	r8, r8, r3
 810b25c:	1af6      	subs	r6, r6, r3
 810b25e:	1ad3      	subs	r3, r2, r3
 810b260:	9308      	str	r3, [sp, #32]
 810b262:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b264:	b1f3      	cbz	r3, 810b2a4 <_dtoa_r+0x78c>
 810b266:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810b268:	2b00      	cmp	r3, #0
 810b26a:	f000 80b7 	beq.w	810b3dc <_dtoa_r+0x8c4>
 810b26e:	b18c      	cbz	r4, 810b294 <_dtoa_r+0x77c>
 810b270:	4629      	mov	r1, r5
 810b272:	4622      	mov	r2, r4
 810b274:	4658      	mov	r0, fp
 810b276:	f000 fd11 	bl	810bc9c <__pow5mult>
 810b27a:	464a      	mov	r2, r9
 810b27c:	4601      	mov	r1, r0
 810b27e:	4605      	mov	r5, r0
 810b280:	4658      	mov	r0, fp
 810b282:	f000 fc61 	bl	810bb48 <__multiply>
 810b286:	4649      	mov	r1, r9
 810b288:	9004      	str	r0, [sp, #16]
 810b28a:	4658      	mov	r0, fp
 810b28c:	f000 fb48 	bl	810b920 <_Bfree>
 810b290:	9b04      	ldr	r3, [sp, #16]
 810b292:	4699      	mov	r9, r3
 810b294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b296:	1b1a      	subs	r2, r3, r4
 810b298:	d004      	beq.n	810b2a4 <_dtoa_r+0x78c>
 810b29a:	4649      	mov	r1, r9
 810b29c:	4658      	mov	r0, fp
 810b29e:	f000 fcfd 	bl	810bc9c <__pow5mult>
 810b2a2:	4681      	mov	r9, r0
 810b2a4:	2101      	movs	r1, #1
 810b2a6:	4658      	mov	r0, fp
 810b2a8:	f000 fc38 	bl	810bb1c <__i2b>
 810b2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810b2ae:	4604      	mov	r4, r0
 810b2b0:	2b00      	cmp	r3, #0
 810b2b2:	f000 81cf 	beq.w	810b654 <_dtoa_r+0xb3c>
 810b2b6:	461a      	mov	r2, r3
 810b2b8:	4601      	mov	r1, r0
 810b2ba:	4658      	mov	r0, fp
 810b2bc:	f000 fcee 	bl	810bc9c <__pow5mult>
 810b2c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b2c2:	2b01      	cmp	r3, #1
 810b2c4:	4604      	mov	r4, r0
 810b2c6:	f300 8095 	bgt.w	810b3f4 <_dtoa_r+0x8dc>
 810b2ca:	9b02      	ldr	r3, [sp, #8]
 810b2cc:	2b00      	cmp	r3, #0
 810b2ce:	f040 8087 	bne.w	810b3e0 <_dtoa_r+0x8c8>
 810b2d2:	9b03      	ldr	r3, [sp, #12]
 810b2d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810b2d8:	2b00      	cmp	r3, #0
 810b2da:	f040 8089 	bne.w	810b3f0 <_dtoa_r+0x8d8>
 810b2de:	9b03      	ldr	r3, [sp, #12]
 810b2e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810b2e4:	0d1b      	lsrs	r3, r3, #20
 810b2e6:	051b      	lsls	r3, r3, #20
 810b2e8:	b12b      	cbz	r3, 810b2f6 <_dtoa_r+0x7de>
 810b2ea:	9b08      	ldr	r3, [sp, #32]
 810b2ec:	3301      	adds	r3, #1
 810b2ee:	9308      	str	r3, [sp, #32]
 810b2f0:	f108 0801 	add.w	r8, r8, #1
 810b2f4:	2301      	movs	r3, #1
 810b2f6:	930a      	str	r3, [sp, #40]	@ 0x28
 810b2f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810b2fa:	2b00      	cmp	r3, #0
 810b2fc:	f000 81b0 	beq.w	810b660 <_dtoa_r+0xb48>
 810b300:	6923      	ldr	r3, [r4, #16]
 810b302:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810b306:	6918      	ldr	r0, [r3, #16]
 810b308:	f000 fbbc 	bl	810ba84 <__hi0bits>
 810b30c:	f1c0 0020 	rsb	r0, r0, #32
 810b310:	9b08      	ldr	r3, [sp, #32]
 810b312:	4418      	add	r0, r3
 810b314:	f010 001f 	ands.w	r0, r0, #31
 810b318:	d077      	beq.n	810b40a <_dtoa_r+0x8f2>
 810b31a:	f1c0 0320 	rsb	r3, r0, #32
 810b31e:	2b04      	cmp	r3, #4
 810b320:	dd6b      	ble.n	810b3fa <_dtoa_r+0x8e2>
 810b322:	9b08      	ldr	r3, [sp, #32]
 810b324:	f1c0 001c 	rsb	r0, r0, #28
 810b328:	4403      	add	r3, r0
 810b32a:	4480      	add	r8, r0
 810b32c:	4406      	add	r6, r0
 810b32e:	9308      	str	r3, [sp, #32]
 810b330:	f1b8 0f00 	cmp.w	r8, #0
 810b334:	dd05      	ble.n	810b342 <_dtoa_r+0x82a>
 810b336:	4649      	mov	r1, r9
 810b338:	4642      	mov	r2, r8
 810b33a:	4658      	mov	r0, fp
 810b33c:	f000 fd08 	bl	810bd50 <__lshift>
 810b340:	4681      	mov	r9, r0
 810b342:	9b08      	ldr	r3, [sp, #32]
 810b344:	2b00      	cmp	r3, #0
 810b346:	dd05      	ble.n	810b354 <_dtoa_r+0x83c>
 810b348:	4621      	mov	r1, r4
 810b34a:	461a      	mov	r2, r3
 810b34c:	4658      	mov	r0, fp
 810b34e:	f000 fcff 	bl	810bd50 <__lshift>
 810b352:	4604      	mov	r4, r0
 810b354:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810b356:	2b00      	cmp	r3, #0
 810b358:	d059      	beq.n	810b40e <_dtoa_r+0x8f6>
 810b35a:	4621      	mov	r1, r4
 810b35c:	4648      	mov	r0, r9
 810b35e:	f000 fd63 	bl	810be28 <__mcmp>
 810b362:	2800      	cmp	r0, #0
 810b364:	da53      	bge.n	810b40e <_dtoa_r+0x8f6>
 810b366:	1e7b      	subs	r3, r7, #1
 810b368:	9304      	str	r3, [sp, #16]
 810b36a:	4649      	mov	r1, r9
 810b36c:	2300      	movs	r3, #0
 810b36e:	220a      	movs	r2, #10
 810b370:	4658      	mov	r0, fp
 810b372:	f000 faf7 	bl	810b964 <__multadd>
 810b376:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810b378:	4681      	mov	r9, r0
 810b37a:	2b00      	cmp	r3, #0
 810b37c:	f000 8172 	beq.w	810b664 <_dtoa_r+0xb4c>
 810b380:	2300      	movs	r3, #0
 810b382:	4629      	mov	r1, r5
 810b384:	220a      	movs	r2, #10
 810b386:	4658      	mov	r0, fp
 810b388:	f000 faec 	bl	810b964 <__multadd>
 810b38c:	9b00      	ldr	r3, [sp, #0]
 810b38e:	2b00      	cmp	r3, #0
 810b390:	4605      	mov	r5, r0
 810b392:	dc67      	bgt.n	810b464 <_dtoa_r+0x94c>
 810b394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b396:	2b02      	cmp	r3, #2
 810b398:	dc41      	bgt.n	810b41e <_dtoa_r+0x906>
 810b39a:	e063      	b.n	810b464 <_dtoa_r+0x94c>
 810b39c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810b39e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 810b3a2:	e746      	b.n	810b232 <_dtoa_r+0x71a>
 810b3a4:	9b07      	ldr	r3, [sp, #28]
 810b3a6:	1e5c      	subs	r4, r3, #1
 810b3a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b3aa:	42a3      	cmp	r3, r4
 810b3ac:	bfbf      	itttt	lt
 810b3ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 810b3b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 810b3b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 810b3b4:	1ae3      	sublt	r3, r4, r3
 810b3b6:	bfb4      	ite	lt
 810b3b8:	18d2      	addlt	r2, r2, r3
 810b3ba:	1b1c      	subge	r4, r3, r4
 810b3bc:	9b07      	ldr	r3, [sp, #28]
 810b3be:	bfbc      	itt	lt
 810b3c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 810b3c2:	2400      	movlt	r4, #0
 810b3c4:	2b00      	cmp	r3, #0
 810b3c6:	bfb5      	itete	lt
 810b3c8:	eba8 0603 	sublt.w	r6, r8, r3
 810b3cc:	9b07      	ldrge	r3, [sp, #28]
 810b3ce:	2300      	movlt	r3, #0
 810b3d0:	4646      	movge	r6, r8
 810b3d2:	e730      	b.n	810b236 <_dtoa_r+0x71e>
 810b3d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810b3d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 810b3d8:	4646      	mov	r6, r8
 810b3da:	e735      	b.n	810b248 <_dtoa_r+0x730>
 810b3dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810b3de:	e75c      	b.n	810b29a <_dtoa_r+0x782>
 810b3e0:	2300      	movs	r3, #0
 810b3e2:	e788      	b.n	810b2f6 <_dtoa_r+0x7de>
 810b3e4:	3fe00000 	.word	0x3fe00000
 810b3e8:	40240000 	.word	0x40240000
 810b3ec:	40140000 	.word	0x40140000
 810b3f0:	9b02      	ldr	r3, [sp, #8]
 810b3f2:	e780      	b.n	810b2f6 <_dtoa_r+0x7de>
 810b3f4:	2300      	movs	r3, #0
 810b3f6:	930a      	str	r3, [sp, #40]	@ 0x28
 810b3f8:	e782      	b.n	810b300 <_dtoa_r+0x7e8>
 810b3fa:	d099      	beq.n	810b330 <_dtoa_r+0x818>
 810b3fc:	9a08      	ldr	r2, [sp, #32]
 810b3fe:	331c      	adds	r3, #28
 810b400:	441a      	add	r2, r3
 810b402:	4498      	add	r8, r3
 810b404:	441e      	add	r6, r3
 810b406:	9208      	str	r2, [sp, #32]
 810b408:	e792      	b.n	810b330 <_dtoa_r+0x818>
 810b40a:	4603      	mov	r3, r0
 810b40c:	e7f6      	b.n	810b3fc <_dtoa_r+0x8e4>
 810b40e:	9b07      	ldr	r3, [sp, #28]
 810b410:	9704      	str	r7, [sp, #16]
 810b412:	2b00      	cmp	r3, #0
 810b414:	dc20      	bgt.n	810b458 <_dtoa_r+0x940>
 810b416:	9300      	str	r3, [sp, #0]
 810b418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b41a:	2b02      	cmp	r3, #2
 810b41c:	dd1e      	ble.n	810b45c <_dtoa_r+0x944>
 810b41e:	9b00      	ldr	r3, [sp, #0]
 810b420:	2b00      	cmp	r3, #0
 810b422:	f47f aec0 	bne.w	810b1a6 <_dtoa_r+0x68e>
 810b426:	4621      	mov	r1, r4
 810b428:	2205      	movs	r2, #5
 810b42a:	4658      	mov	r0, fp
 810b42c:	f000 fa9a 	bl	810b964 <__multadd>
 810b430:	4601      	mov	r1, r0
 810b432:	4604      	mov	r4, r0
 810b434:	4648      	mov	r0, r9
 810b436:	f000 fcf7 	bl	810be28 <__mcmp>
 810b43a:	2800      	cmp	r0, #0
 810b43c:	f77f aeb3 	ble.w	810b1a6 <_dtoa_r+0x68e>
 810b440:	4656      	mov	r6, sl
 810b442:	2331      	movs	r3, #49	@ 0x31
 810b444:	f806 3b01 	strb.w	r3, [r6], #1
 810b448:	9b04      	ldr	r3, [sp, #16]
 810b44a:	3301      	adds	r3, #1
 810b44c:	9304      	str	r3, [sp, #16]
 810b44e:	e6ae      	b.n	810b1ae <_dtoa_r+0x696>
 810b450:	9c07      	ldr	r4, [sp, #28]
 810b452:	9704      	str	r7, [sp, #16]
 810b454:	4625      	mov	r5, r4
 810b456:	e7f3      	b.n	810b440 <_dtoa_r+0x928>
 810b458:	9b07      	ldr	r3, [sp, #28]
 810b45a:	9300      	str	r3, [sp, #0]
 810b45c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810b45e:	2b00      	cmp	r3, #0
 810b460:	f000 8104 	beq.w	810b66c <_dtoa_r+0xb54>
 810b464:	2e00      	cmp	r6, #0
 810b466:	dd05      	ble.n	810b474 <_dtoa_r+0x95c>
 810b468:	4629      	mov	r1, r5
 810b46a:	4632      	mov	r2, r6
 810b46c:	4658      	mov	r0, fp
 810b46e:	f000 fc6f 	bl	810bd50 <__lshift>
 810b472:	4605      	mov	r5, r0
 810b474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b476:	2b00      	cmp	r3, #0
 810b478:	d05a      	beq.n	810b530 <_dtoa_r+0xa18>
 810b47a:	6869      	ldr	r1, [r5, #4]
 810b47c:	4658      	mov	r0, fp
 810b47e:	f000 fa0f 	bl	810b8a0 <_Balloc>
 810b482:	4606      	mov	r6, r0
 810b484:	b928      	cbnz	r0, 810b492 <_dtoa_r+0x97a>
 810b486:	4b84      	ldr	r3, [pc, #528]	@ (810b698 <_dtoa_r+0xb80>)
 810b488:	4602      	mov	r2, r0
 810b48a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 810b48e:	f7ff bb5a 	b.w	810ab46 <_dtoa_r+0x2e>
 810b492:	692a      	ldr	r2, [r5, #16]
 810b494:	3202      	adds	r2, #2
 810b496:	0092      	lsls	r2, r2, #2
 810b498:	f105 010c 	add.w	r1, r5, #12
 810b49c:	300c      	adds	r0, #12
 810b49e:	f7ff fa86 	bl	810a9ae <memcpy>
 810b4a2:	2201      	movs	r2, #1
 810b4a4:	4631      	mov	r1, r6
 810b4a6:	4658      	mov	r0, fp
 810b4a8:	f000 fc52 	bl	810bd50 <__lshift>
 810b4ac:	f10a 0301 	add.w	r3, sl, #1
 810b4b0:	9307      	str	r3, [sp, #28]
 810b4b2:	9b00      	ldr	r3, [sp, #0]
 810b4b4:	4453      	add	r3, sl
 810b4b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 810b4b8:	9b02      	ldr	r3, [sp, #8]
 810b4ba:	f003 0301 	and.w	r3, r3, #1
 810b4be:	462f      	mov	r7, r5
 810b4c0:	930a      	str	r3, [sp, #40]	@ 0x28
 810b4c2:	4605      	mov	r5, r0
 810b4c4:	9b07      	ldr	r3, [sp, #28]
 810b4c6:	4621      	mov	r1, r4
 810b4c8:	3b01      	subs	r3, #1
 810b4ca:	4648      	mov	r0, r9
 810b4cc:	9300      	str	r3, [sp, #0]
 810b4ce:	f7ff fa9b 	bl	810aa08 <quorem>
 810b4d2:	4639      	mov	r1, r7
 810b4d4:	9002      	str	r0, [sp, #8]
 810b4d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810b4da:	4648      	mov	r0, r9
 810b4dc:	f000 fca4 	bl	810be28 <__mcmp>
 810b4e0:	462a      	mov	r2, r5
 810b4e2:	9008      	str	r0, [sp, #32]
 810b4e4:	4621      	mov	r1, r4
 810b4e6:	4658      	mov	r0, fp
 810b4e8:	f000 fcba 	bl	810be60 <__mdiff>
 810b4ec:	68c2      	ldr	r2, [r0, #12]
 810b4ee:	4606      	mov	r6, r0
 810b4f0:	bb02      	cbnz	r2, 810b534 <_dtoa_r+0xa1c>
 810b4f2:	4601      	mov	r1, r0
 810b4f4:	4648      	mov	r0, r9
 810b4f6:	f000 fc97 	bl	810be28 <__mcmp>
 810b4fa:	4602      	mov	r2, r0
 810b4fc:	4631      	mov	r1, r6
 810b4fe:	4658      	mov	r0, fp
 810b500:	920e      	str	r2, [sp, #56]	@ 0x38
 810b502:	f000 fa0d 	bl	810b920 <_Bfree>
 810b506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b508:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810b50a:	9e07      	ldr	r6, [sp, #28]
 810b50c:	ea43 0102 	orr.w	r1, r3, r2
 810b510:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b512:	4319      	orrs	r1, r3
 810b514:	d110      	bne.n	810b538 <_dtoa_r+0xa20>
 810b516:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810b51a:	d029      	beq.n	810b570 <_dtoa_r+0xa58>
 810b51c:	9b08      	ldr	r3, [sp, #32]
 810b51e:	2b00      	cmp	r3, #0
 810b520:	dd02      	ble.n	810b528 <_dtoa_r+0xa10>
 810b522:	9b02      	ldr	r3, [sp, #8]
 810b524:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 810b528:	9b00      	ldr	r3, [sp, #0]
 810b52a:	f883 8000 	strb.w	r8, [r3]
 810b52e:	e63f      	b.n	810b1b0 <_dtoa_r+0x698>
 810b530:	4628      	mov	r0, r5
 810b532:	e7bb      	b.n	810b4ac <_dtoa_r+0x994>
 810b534:	2201      	movs	r2, #1
 810b536:	e7e1      	b.n	810b4fc <_dtoa_r+0x9e4>
 810b538:	9b08      	ldr	r3, [sp, #32]
 810b53a:	2b00      	cmp	r3, #0
 810b53c:	db04      	blt.n	810b548 <_dtoa_r+0xa30>
 810b53e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810b540:	430b      	orrs	r3, r1
 810b542:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810b544:	430b      	orrs	r3, r1
 810b546:	d120      	bne.n	810b58a <_dtoa_r+0xa72>
 810b548:	2a00      	cmp	r2, #0
 810b54a:	dded      	ble.n	810b528 <_dtoa_r+0xa10>
 810b54c:	4649      	mov	r1, r9
 810b54e:	2201      	movs	r2, #1
 810b550:	4658      	mov	r0, fp
 810b552:	f000 fbfd 	bl	810bd50 <__lshift>
 810b556:	4621      	mov	r1, r4
 810b558:	4681      	mov	r9, r0
 810b55a:	f000 fc65 	bl	810be28 <__mcmp>
 810b55e:	2800      	cmp	r0, #0
 810b560:	dc03      	bgt.n	810b56a <_dtoa_r+0xa52>
 810b562:	d1e1      	bne.n	810b528 <_dtoa_r+0xa10>
 810b564:	f018 0f01 	tst.w	r8, #1
 810b568:	d0de      	beq.n	810b528 <_dtoa_r+0xa10>
 810b56a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810b56e:	d1d8      	bne.n	810b522 <_dtoa_r+0xa0a>
 810b570:	9a00      	ldr	r2, [sp, #0]
 810b572:	2339      	movs	r3, #57	@ 0x39
 810b574:	7013      	strb	r3, [r2, #0]
 810b576:	4633      	mov	r3, r6
 810b578:	461e      	mov	r6, r3
 810b57a:	3b01      	subs	r3, #1
 810b57c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 810b580:	2a39      	cmp	r2, #57	@ 0x39
 810b582:	d052      	beq.n	810b62a <_dtoa_r+0xb12>
 810b584:	3201      	adds	r2, #1
 810b586:	701a      	strb	r2, [r3, #0]
 810b588:	e612      	b.n	810b1b0 <_dtoa_r+0x698>
 810b58a:	2a00      	cmp	r2, #0
 810b58c:	dd07      	ble.n	810b59e <_dtoa_r+0xa86>
 810b58e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810b592:	d0ed      	beq.n	810b570 <_dtoa_r+0xa58>
 810b594:	9a00      	ldr	r2, [sp, #0]
 810b596:	f108 0301 	add.w	r3, r8, #1
 810b59a:	7013      	strb	r3, [r2, #0]
 810b59c:	e608      	b.n	810b1b0 <_dtoa_r+0x698>
 810b59e:	9b07      	ldr	r3, [sp, #28]
 810b5a0:	9a07      	ldr	r2, [sp, #28]
 810b5a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 810b5a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810b5a8:	4293      	cmp	r3, r2
 810b5aa:	d028      	beq.n	810b5fe <_dtoa_r+0xae6>
 810b5ac:	4649      	mov	r1, r9
 810b5ae:	2300      	movs	r3, #0
 810b5b0:	220a      	movs	r2, #10
 810b5b2:	4658      	mov	r0, fp
 810b5b4:	f000 f9d6 	bl	810b964 <__multadd>
 810b5b8:	42af      	cmp	r7, r5
 810b5ba:	4681      	mov	r9, r0
 810b5bc:	f04f 0300 	mov.w	r3, #0
 810b5c0:	f04f 020a 	mov.w	r2, #10
 810b5c4:	4639      	mov	r1, r7
 810b5c6:	4658      	mov	r0, fp
 810b5c8:	d107      	bne.n	810b5da <_dtoa_r+0xac2>
 810b5ca:	f000 f9cb 	bl	810b964 <__multadd>
 810b5ce:	4607      	mov	r7, r0
 810b5d0:	4605      	mov	r5, r0
 810b5d2:	9b07      	ldr	r3, [sp, #28]
 810b5d4:	3301      	adds	r3, #1
 810b5d6:	9307      	str	r3, [sp, #28]
 810b5d8:	e774      	b.n	810b4c4 <_dtoa_r+0x9ac>
 810b5da:	f000 f9c3 	bl	810b964 <__multadd>
 810b5de:	4629      	mov	r1, r5
 810b5e0:	4607      	mov	r7, r0
 810b5e2:	2300      	movs	r3, #0
 810b5e4:	220a      	movs	r2, #10
 810b5e6:	4658      	mov	r0, fp
 810b5e8:	f000 f9bc 	bl	810b964 <__multadd>
 810b5ec:	4605      	mov	r5, r0
 810b5ee:	e7f0      	b.n	810b5d2 <_dtoa_r+0xaba>
 810b5f0:	9b00      	ldr	r3, [sp, #0]
 810b5f2:	2b00      	cmp	r3, #0
 810b5f4:	bfcc      	ite	gt
 810b5f6:	461e      	movgt	r6, r3
 810b5f8:	2601      	movle	r6, #1
 810b5fa:	4456      	add	r6, sl
 810b5fc:	2700      	movs	r7, #0
 810b5fe:	4649      	mov	r1, r9
 810b600:	2201      	movs	r2, #1
 810b602:	4658      	mov	r0, fp
 810b604:	f000 fba4 	bl	810bd50 <__lshift>
 810b608:	4621      	mov	r1, r4
 810b60a:	4681      	mov	r9, r0
 810b60c:	f000 fc0c 	bl	810be28 <__mcmp>
 810b610:	2800      	cmp	r0, #0
 810b612:	dcb0      	bgt.n	810b576 <_dtoa_r+0xa5e>
 810b614:	d102      	bne.n	810b61c <_dtoa_r+0xb04>
 810b616:	f018 0f01 	tst.w	r8, #1
 810b61a:	d1ac      	bne.n	810b576 <_dtoa_r+0xa5e>
 810b61c:	4633      	mov	r3, r6
 810b61e:	461e      	mov	r6, r3
 810b620:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b624:	2a30      	cmp	r2, #48	@ 0x30
 810b626:	d0fa      	beq.n	810b61e <_dtoa_r+0xb06>
 810b628:	e5c2      	b.n	810b1b0 <_dtoa_r+0x698>
 810b62a:	459a      	cmp	sl, r3
 810b62c:	d1a4      	bne.n	810b578 <_dtoa_r+0xa60>
 810b62e:	9b04      	ldr	r3, [sp, #16]
 810b630:	3301      	adds	r3, #1
 810b632:	9304      	str	r3, [sp, #16]
 810b634:	2331      	movs	r3, #49	@ 0x31
 810b636:	f88a 3000 	strb.w	r3, [sl]
 810b63a:	e5b9      	b.n	810b1b0 <_dtoa_r+0x698>
 810b63c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810b63e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 810b69c <_dtoa_r+0xb84>
 810b642:	b11b      	cbz	r3, 810b64c <_dtoa_r+0xb34>
 810b644:	f10a 0308 	add.w	r3, sl, #8
 810b648:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810b64a:	6013      	str	r3, [r2, #0]
 810b64c:	4650      	mov	r0, sl
 810b64e:	b019      	add	sp, #100	@ 0x64
 810b650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b656:	2b01      	cmp	r3, #1
 810b658:	f77f ae37 	ble.w	810b2ca <_dtoa_r+0x7b2>
 810b65c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810b65e:	930a      	str	r3, [sp, #40]	@ 0x28
 810b660:	2001      	movs	r0, #1
 810b662:	e655      	b.n	810b310 <_dtoa_r+0x7f8>
 810b664:	9b00      	ldr	r3, [sp, #0]
 810b666:	2b00      	cmp	r3, #0
 810b668:	f77f aed6 	ble.w	810b418 <_dtoa_r+0x900>
 810b66c:	4656      	mov	r6, sl
 810b66e:	4621      	mov	r1, r4
 810b670:	4648      	mov	r0, r9
 810b672:	f7ff f9c9 	bl	810aa08 <quorem>
 810b676:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810b67a:	f806 8b01 	strb.w	r8, [r6], #1
 810b67e:	9b00      	ldr	r3, [sp, #0]
 810b680:	eba6 020a 	sub.w	r2, r6, sl
 810b684:	4293      	cmp	r3, r2
 810b686:	ddb3      	ble.n	810b5f0 <_dtoa_r+0xad8>
 810b688:	4649      	mov	r1, r9
 810b68a:	2300      	movs	r3, #0
 810b68c:	220a      	movs	r2, #10
 810b68e:	4658      	mov	r0, fp
 810b690:	f000 f968 	bl	810b964 <__multadd>
 810b694:	4681      	mov	r9, r0
 810b696:	e7ea      	b.n	810b66e <_dtoa_r+0xb56>
 810b698:	0810eb89 	.word	0x0810eb89
 810b69c:	0810eb0d 	.word	0x0810eb0d

0810b6a0 <_free_r>:
 810b6a0:	b538      	push	{r3, r4, r5, lr}
 810b6a2:	4605      	mov	r5, r0
 810b6a4:	2900      	cmp	r1, #0
 810b6a6:	d041      	beq.n	810b72c <_free_r+0x8c>
 810b6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810b6ac:	1f0c      	subs	r4, r1, #4
 810b6ae:	2b00      	cmp	r3, #0
 810b6b0:	bfb8      	it	lt
 810b6b2:	18e4      	addlt	r4, r4, r3
 810b6b4:	f000 f8e8 	bl	810b888 <__malloc_lock>
 810b6b8:	4a1d      	ldr	r2, [pc, #116]	@ (810b730 <_free_r+0x90>)
 810b6ba:	6813      	ldr	r3, [r2, #0]
 810b6bc:	b933      	cbnz	r3, 810b6cc <_free_r+0x2c>
 810b6be:	6063      	str	r3, [r4, #4]
 810b6c0:	6014      	str	r4, [r2, #0]
 810b6c2:	4628      	mov	r0, r5
 810b6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b6c8:	f000 b8e4 	b.w	810b894 <__malloc_unlock>
 810b6cc:	42a3      	cmp	r3, r4
 810b6ce:	d908      	bls.n	810b6e2 <_free_r+0x42>
 810b6d0:	6820      	ldr	r0, [r4, #0]
 810b6d2:	1821      	adds	r1, r4, r0
 810b6d4:	428b      	cmp	r3, r1
 810b6d6:	bf01      	itttt	eq
 810b6d8:	6819      	ldreq	r1, [r3, #0]
 810b6da:	685b      	ldreq	r3, [r3, #4]
 810b6dc:	1809      	addeq	r1, r1, r0
 810b6de:	6021      	streq	r1, [r4, #0]
 810b6e0:	e7ed      	b.n	810b6be <_free_r+0x1e>
 810b6e2:	461a      	mov	r2, r3
 810b6e4:	685b      	ldr	r3, [r3, #4]
 810b6e6:	b10b      	cbz	r3, 810b6ec <_free_r+0x4c>
 810b6e8:	42a3      	cmp	r3, r4
 810b6ea:	d9fa      	bls.n	810b6e2 <_free_r+0x42>
 810b6ec:	6811      	ldr	r1, [r2, #0]
 810b6ee:	1850      	adds	r0, r2, r1
 810b6f0:	42a0      	cmp	r0, r4
 810b6f2:	d10b      	bne.n	810b70c <_free_r+0x6c>
 810b6f4:	6820      	ldr	r0, [r4, #0]
 810b6f6:	4401      	add	r1, r0
 810b6f8:	1850      	adds	r0, r2, r1
 810b6fa:	4283      	cmp	r3, r0
 810b6fc:	6011      	str	r1, [r2, #0]
 810b6fe:	d1e0      	bne.n	810b6c2 <_free_r+0x22>
 810b700:	6818      	ldr	r0, [r3, #0]
 810b702:	685b      	ldr	r3, [r3, #4]
 810b704:	6053      	str	r3, [r2, #4]
 810b706:	4408      	add	r0, r1
 810b708:	6010      	str	r0, [r2, #0]
 810b70a:	e7da      	b.n	810b6c2 <_free_r+0x22>
 810b70c:	d902      	bls.n	810b714 <_free_r+0x74>
 810b70e:	230c      	movs	r3, #12
 810b710:	602b      	str	r3, [r5, #0]
 810b712:	e7d6      	b.n	810b6c2 <_free_r+0x22>
 810b714:	6820      	ldr	r0, [r4, #0]
 810b716:	1821      	adds	r1, r4, r0
 810b718:	428b      	cmp	r3, r1
 810b71a:	bf04      	itt	eq
 810b71c:	6819      	ldreq	r1, [r3, #0]
 810b71e:	685b      	ldreq	r3, [r3, #4]
 810b720:	6063      	str	r3, [r4, #4]
 810b722:	bf04      	itt	eq
 810b724:	1809      	addeq	r1, r1, r0
 810b726:	6021      	streq	r1, [r4, #0]
 810b728:	6054      	str	r4, [r2, #4]
 810b72a:	e7ca      	b.n	810b6c2 <_free_r+0x22>
 810b72c:	bd38      	pop	{r3, r4, r5, pc}
 810b72e:	bf00      	nop
 810b730:	10000aa0 	.word	0x10000aa0

0810b734 <malloc>:
 810b734:	4b02      	ldr	r3, [pc, #8]	@ (810b740 <malloc+0xc>)
 810b736:	4601      	mov	r1, r0
 810b738:	6818      	ldr	r0, [r3, #0]
 810b73a:	f000 b825 	b.w	810b788 <_malloc_r>
 810b73e:	bf00      	nop
 810b740:	1000002c 	.word	0x1000002c

0810b744 <sbrk_aligned>:
 810b744:	b570      	push	{r4, r5, r6, lr}
 810b746:	4e0f      	ldr	r6, [pc, #60]	@ (810b784 <sbrk_aligned+0x40>)
 810b748:	460c      	mov	r4, r1
 810b74a:	6831      	ldr	r1, [r6, #0]
 810b74c:	4605      	mov	r5, r0
 810b74e:	b911      	cbnz	r1, 810b756 <sbrk_aligned+0x12>
 810b750:	f002 f816 	bl	810d780 <_sbrk_r>
 810b754:	6030      	str	r0, [r6, #0]
 810b756:	4621      	mov	r1, r4
 810b758:	4628      	mov	r0, r5
 810b75a:	f002 f811 	bl	810d780 <_sbrk_r>
 810b75e:	1c43      	adds	r3, r0, #1
 810b760:	d103      	bne.n	810b76a <sbrk_aligned+0x26>
 810b762:	f04f 34ff 	mov.w	r4, #4294967295
 810b766:	4620      	mov	r0, r4
 810b768:	bd70      	pop	{r4, r5, r6, pc}
 810b76a:	1cc4      	adds	r4, r0, #3
 810b76c:	f024 0403 	bic.w	r4, r4, #3
 810b770:	42a0      	cmp	r0, r4
 810b772:	d0f8      	beq.n	810b766 <sbrk_aligned+0x22>
 810b774:	1a21      	subs	r1, r4, r0
 810b776:	4628      	mov	r0, r5
 810b778:	f002 f802 	bl	810d780 <_sbrk_r>
 810b77c:	3001      	adds	r0, #1
 810b77e:	d1f2      	bne.n	810b766 <sbrk_aligned+0x22>
 810b780:	e7ef      	b.n	810b762 <sbrk_aligned+0x1e>
 810b782:	bf00      	nop
 810b784:	10000a9c 	.word	0x10000a9c

0810b788 <_malloc_r>:
 810b788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b78c:	1ccd      	adds	r5, r1, #3
 810b78e:	f025 0503 	bic.w	r5, r5, #3
 810b792:	3508      	adds	r5, #8
 810b794:	2d0c      	cmp	r5, #12
 810b796:	bf38      	it	cc
 810b798:	250c      	movcc	r5, #12
 810b79a:	2d00      	cmp	r5, #0
 810b79c:	4606      	mov	r6, r0
 810b79e:	db01      	blt.n	810b7a4 <_malloc_r+0x1c>
 810b7a0:	42a9      	cmp	r1, r5
 810b7a2:	d904      	bls.n	810b7ae <_malloc_r+0x26>
 810b7a4:	230c      	movs	r3, #12
 810b7a6:	6033      	str	r3, [r6, #0]
 810b7a8:	2000      	movs	r0, #0
 810b7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b7ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810b884 <_malloc_r+0xfc>
 810b7b2:	f000 f869 	bl	810b888 <__malloc_lock>
 810b7b6:	f8d8 3000 	ldr.w	r3, [r8]
 810b7ba:	461c      	mov	r4, r3
 810b7bc:	bb44      	cbnz	r4, 810b810 <_malloc_r+0x88>
 810b7be:	4629      	mov	r1, r5
 810b7c0:	4630      	mov	r0, r6
 810b7c2:	f7ff ffbf 	bl	810b744 <sbrk_aligned>
 810b7c6:	1c43      	adds	r3, r0, #1
 810b7c8:	4604      	mov	r4, r0
 810b7ca:	d158      	bne.n	810b87e <_malloc_r+0xf6>
 810b7cc:	f8d8 4000 	ldr.w	r4, [r8]
 810b7d0:	4627      	mov	r7, r4
 810b7d2:	2f00      	cmp	r7, #0
 810b7d4:	d143      	bne.n	810b85e <_malloc_r+0xd6>
 810b7d6:	2c00      	cmp	r4, #0
 810b7d8:	d04b      	beq.n	810b872 <_malloc_r+0xea>
 810b7da:	6823      	ldr	r3, [r4, #0]
 810b7dc:	4639      	mov	r1, r7
 810b7de:	4630      	mov	r0, r6
 810b7e0:	eb04 0903 	add.w	r9, r4, r3
 810b7e4:	f001 ffcc 	bl	810d780 <_sbrk_r>
 810b7e8:	4581      	cmp	r9, r0
 810b7ea:	d142      	bne.n	810b872 <_malloc_r+0xea>
 810b7ec:	6821      	ldr	r1, [r4, #0]
 810b7ee:	1a6d      	subs	r5, r5, r1
 810b7f0:	4629      	mov	r1, r5
 810b7f2:	4630      	mov	r0, r6
 810b7f4:	f7ff ffa6 	bl	810b744 <sbrk_aligned>
 810b7f8:	3001      	adds	r0, #1
 810b7fa:	d03a      	beq.n	810b872 <_malloc_r+0xea>
 810b7fc:	6823      	ldr	r3, [r4, #0]
 810b7fe:	442b      	add	r3, r5
 810b800:	6023      	str	r3, [r4, #0]
 810b802:	f8d8 3000 	ldr.w	r3, [r8]
 810b806:	685a      	ldr	r2, [r3, #4]
 810b808:	bb62      	cbnz	r2, 810b864 <_malloc_r+0xdc>
 810b80a:	f8c8 7000 	str.w	r7, [r8]
 810b80e:	e00f      	b.n	810b830 <_malloc_r+0xa8>
 810b810:	6822      	ldr	r2, [r4, #0]
 810b812:	1b52      	subs	r2, r2, r5
 810b814:	d420      	bmi.n	810b858 <_malloc_r+0xd0>
 810b816:	2a0b      	cmp	r2, #11
 810b818:	d917      	bls.n	810b84a <_malloc_r+0xc2>
 810b81a:	1961      	adds	r1, r4, r5
 810b81c:	42a3      	cmp	r3, r4
 810b81e:	6025      	str	r5, [r4, #0]
 810b820:	bf18      	it	ne
 810b822:	6059      	strne	r1, [r3, #4]
 810b824:	6863      	ldr	r3, [r4, #4]
 810b826:	bf08      	it	eq
 810b828:	f8c8 1000 	streq.w	r1, [r8]
 810b82c:	5162      	str	r2, [r4, r5]
 810b82e:	604b      	str	r3, [r1, #4]
 810b830:	4630      	mov	r0, r6
 810b832:	f000 f82f 	bl	810b894 <__malloc_unlock>
 810b836:	f104 000b 	add.w	r0, r4, #11
 810b83a:	1d23      	adds	r3, r4, #4
 810b83c:	f020 0007 	bic.w	r0, r0, #7
 810b840:	1ac2      	subs	r2, r0, r3
 810b842:	bf1c      	itt	ne
 810b844:	1a1b      	subne	r3, r3, r0
 810b846:	50a3      	strne	r3, [r4, r2]
 810b848:	e7af      	b.n	810b7aa <_malloc_r+0x22>
 810b84a:	6862      	ldr	r2, [r4, #4]
 810b84c:	42a3      	cmp	r3, r4
 810b84e:	bf0c      	ite	eq
 810b850:	f8c8 2000 	streq.w	r2, [r8]
 810b854:	605a      	strne	r2, [r3, #4]
 810b856:	e7eb      	b.n	810b830 <_malloc_r+0xa8>
 810b858:	4623      	mov	r3, r4
 810b85a:	6864      	ldr	r4, [r4, #4]
 810b85c:	e7ae      	b.n	810b7bc <_malloc_r+0x34>
 810b85e:	463c      	mov	r4, r7
 810b860:	687f      	ldr	r7, [r7, #4]
 810b862:	e7b6      	b.n	810b7d2 <_malloc_r+0x4a>
 810b864:	461a      	mov	r2, r3
 810b866:	685b      	ldr	r3, [r3, #4]
 810b868:	42a3      	cmp	r3, r4
 810b86a:	d1fb      	bne.n	810b864 <_malloc_r+0xdc>
 810b86c:	2300      	movs	r3, #0
 810b86e:	6053      	str	r3, [r2, #4]
 810b870:	e7de      	b.n	810b830 <_malloc_r+0xa8>
 810b872:	230c      	movs	r3, #12
 810b874:	6033      	str	r3, [r6, #0]
 810b876:	4630      	mov	r0, r6
 810b878:	f000 f80c 	bl	810b894 <__malloc_unlock>
 810b87c:	e794      	b.n	810b7a8 <_malloc_r+0x20>
 810b87e:	6005      	str	r5, [r0, #0]
 810b880:	e7d6      	b.n	810b830 <_malloc_r+0xa8>
 810b882:	bf00      	nop
 810b884:	10000aa0 	.word	0x10000aa0

0810b888 <__malloc_lock>:
 810b888:	4801      	ldr	r0, [pc, #4]	@ (810b890 <__malloc_lock+0x8>)
 810b88a:	f7ff b88e 	b.w	810a9aa <__retarget_lock_acquire_recursive>
 810b88e:	bf00      	nop
 810b890:	10000a98 	.word	0x10000a98

0810b894 <__malloc_unlock>:
 810b894:	4801      	ldr	r0, [pc, #4]	@ (810b89c <__malloc_unlock+0x8>)
 810b896:	f7ff b889 	b.w	810a9ac <__retarget_lock_release_recursive>
 810b89a:	bf00      	nop
 810b89c:	10000a98 	.word	0x10000a98

0810b8a0 <_Balloc>:
 810b8a0:	b570      	push	{r4, r5, r6, lr}
 810b8a2:	69c6      	ldr	r6, [r0, #28]
 810b8a4:	4604      	mov	r4, r0
 810b8a6:	460d      	mov	r5, r1
 810b8a8:	b976      	cbnz	r6, 810b8c8 <_Balloc+0x28>
 810b8aa:	2010      	movs	r0, #16
 810b8ac:	f7ff ff42 	bl	810b734 <malloc>
 810b8b0:	4602      	mov	r2, r0
 810b8b2:	61e0      	str	r0, [r4, #28]
 810b8b4:	b920      	cbnz	r0, 810b8c0 <_Balloc+0x20>
 810b8b6:	4b18      	ldr	r3, [pc, #96]	@ (810b918 <_Balloc+0x78>)
 810b8b8:	4818      	ldr	r0, [pc, #96]	@ (810b91c <_Balloc+0x7c>)
 810b8ba:	216b      	movs	r1, #107	@ 0x6b
 810b8bc:	f7fd fefe 	bl	81096bc <__assert_func>
 810b8c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810b8c4:	6006      	str	r6, [r0, #0]
 810b8c6:	60c6      	str	r6, [r0, #12]
 810b8c8:	69e6      	ldr	r6, [r4, #28]
 810b8ca:	68f3      	ldr	r3, [r6, #12]
 810b8cc:	b183      	cbz	r3, 810b8f0 <_Balloc+0x50>
 810b8ce:	69e3      	ldr	r3, [r4, #28]
 810b8d0:	68db      	ldr	r3, [r3, #12]
 810b8d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810b8d6:	b9b8      	cbnz	r0, 810b908 <_Balloc+0x68>
 810b8d8:	2101      	movs	r1, #1
 810b8da:	fa01 f605 	lsl.w	r6, r1, r5
 810b8de:	1d72      	adds	r2, r6, #5
 810b8e0:	0092      	lsls	r2, r2, #2
 810b8e2:	4620      	mov	r0, r4
 810b8e4:	f001 ff64 	bl	810d7b0 <_calloc_r>
 810b8e8:	b160      	cbz	r0, 810b904 <_Balloc+0x64>
 810b8ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810b8ee:	e00e      	b.n	810b90e <_Balloc+0x6e>
 810b8f0:	2221      	movs	r2, #33	@ 0x21
 810b8f2:	2104      	movs	r1, #4
 810b8f4:	4620      	mov	r0, r4
 810b8f6:	f001 ff5b 	bl	810d7b0 <_calloc_r>
 810b8fa:	69e3      	ldr	r3, [r4, #28]
 810b8fc:	60f0      	str	r0, [r6, #12]
 810b8fe:	68db      	ldr	r3, [r3, #12]
 810b900:	2b00      	cmp	r3, #0
 810b902:	d1e4      	bne.n	810b8ce <_Balloc+0x2e>
 810b904:	2000      	movs	r0, #0
 810b906:	bd70      	pop	{r4, r5, r6, pc}
 810b908:	6802      	ldr	r2, [r0, #0]
 810b90a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810b90e:	2300      	movs	r3, #0
 810b910:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810b914:	e7f7      	b.n	810b906 <_Balloc+0x66>
 810b916:	bf00      	nop
 810b918:	0810eb1a 	.word	0x0810eb1a
 810b91c:	0810eb9a 	.word	0x0810eb9a

0810b920 <_Bfree>:
 810b920:	b570      	push	{r4, r5, r6, lr}
 810b922:	69c6      	ldr	r6, [r0, #28]
 810b924:	4605      	mov	r5, r0
 810b926:	460c      	mov	r4, r1
 810b928:	b976      	cbnz	r6, 810b948 <_Bfree+0x28>
 810b92a:	2010      	movs	r0, #16
 810b92c:	f7ff ff02 	bl	810b734 <malloc>
 810b930:	4602      	mov	r2, r0
 810b932:	61e8      	str	r0, [r5, #28]
 810b934:	b920      	cbnz	r0, 810b940 <_Bfree+0x20>
 810b936:	4b09      	ldr	r3, [pc, #36]	@ (810b95c <_Bfree+0x3c>)
 810b938:	4809      	ldr	r0, [pc, #36]	@ (810b960 <_Bfree+0x40>)
 810b93a:	218f      	movs	r1, #143	@ 0x8f
 810b93c:	f7fd febe 	bl	81096bc <__assert_func>
 810b940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810b944:	6006      	str	r6, [r0, #0]
 810b946:	60c6      	str	r6, [r0, #12]
 810b948:	b13c      	cbz	r4, 810b95a <_Bfree+0x3a>
 810b94a:	69eb      	ldr	r3, [r5, #28]
 810b94c:	6862      	ldr	r2, [r4, #4]
 810b94e:	68db      	ldr	r3, [r3, #12]
 810b950:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810b954:	6021      	str	r1, [r4, #0]
 810b956:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810b95a:	bd70      	pop	{r4, r5, r6, pc}
 810b95c:	0810eb1a 	.word	0x0810eb1a
 810b960:	0810eb9a 	.word	0x0810eb9a

0810b964 <__multadd>:
 810b964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b968:	690d      	ldr	r5, [r1, #16]
 810b96a:	4607      	mov	r7, r0
 810b96c:	460c      	mov	r4, r1
 810b96e:	461e      	mov	r6, r3
 810b970:	f101 0c14 	add.w	ip, r1, #20
 810b974:	2000      	movs	r0, #0
 810b976:	f8dc 3000 	ldr.w	r3, [ip]
 810b97a:	b299      	uxth	r1, r3
 810b97c:	fb02 6101 	mla	r1, r2, r1, r6
 810b980:	0c1e      	lsrs	r6, r3, #16
 810b982:	0c0b      	lsrs	r3, r1, #16
 810b984:	fb02 3306 	mla	r3, r2, r6, r3
 810b988:	b289      	uxth	r1, r1
 810b98a:	3001      	adds	r0, #1
 810b98c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810b990:	4285      	cmp	r5, r0
 810b992:	f84c 1b04 	str.w	r1, [ip], #4
 810b996:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810b99a:	dcec      	bgt.n	810b976 <__multadd+0x12>
 810b99c:	b30e      	cbz	r6, 810b9e2 <__multadd+0x7e>
 810b99e:	68a3      	ldr	r3, [r4, #8]
 810b9a0:	42ab      	cmp	r3, r5
 810b9a2:	dc19      	bgt.n	810b9d8 <__multadd+0x74>
 810b9a4:	6861      	ldr	r1, [r4, #4]
 810b9a6:	4638      	mov	r0, r7
 810b9a8:	3101      	adds	r1, #1
 810b9aa:	f7ff ff79 	bl	810b8a0 <_Balloc>
 810b9ae:	4680      	mov	r8, r0
 810b9b0:	b928      	cbnz	r0, 810b9be <__multadd+0x5a>
 810b9b2:	4602      	mov	r2, r0
 810b9b4:	4b0c      	ldr	r3, [pc, #48]	@ (810b9e8 <__multadd+0x84>)
 810b9b6:	480d      	ldr	r0, [pc, #52]	@ (810b9ec <__multadd+0x88>)
 810b9b8:	21ba      	movs	r1, #186	@ 0xba
 810b9ba:	f7fd fe7f 	bl	81096bc <__assert_func>
 810b9be:	6922      	ldr	r2, [r4, #16]
 810b9c0:	3202      	adds	r2, #2
 810b9c2:	f104 010c 	add.w	r1, r4, #12
 810b9c6:	0092      	lsls	r2, r2, #2
 810b9c8:	300c      	adds	r0, #12
 810b9ca:	f7fe fff0 	bl	810a9ae <memcpy>
 810b9ce:	4621      	mov	r1, r4
 810b9d0:	4638      	mov	r0, r7
 810b9d2:	f7ff ffa5 	bl	810b920 <_Bfree>
 810b9d6:	4644      	mov	r4, r8
 810b9d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810b9dc:	3501      	adds	r5, #1
 810b9de:	615e      	str	r6, [r3, #20]
 810b9e0:	6125      	str	r5, [r4, #16]
 810b9e2:	4620      	mov	r0, r4
 810b9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b9e8:	0810eb89 	.word	0x0810eb89
 810b9ec:	0810eb9a 	.word	0x0810eb9a

0810b9f0 <__s2b>:
 810b9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b9f4:	460c      	mov	r4, r1
 810b9f6:	4615      	mov	r5, r2
 810b9f8:	461f      	mov	r7, r3
 810b9fa:	2209      	movs	r2, #9
 810b9fc:	3308      	adds	r3, #8
 810b9fe:	4606      	mov	r6, r0
 810ba00:	fb93 f3f2 	sdiv	r3, r3, r2
 810ba04:	2100      	movs	r1, #0
 810ba06:	2201      	movs	r2, #1
 810ba08:	429a      	cmp	r2, r3
 810ba0a:	db09      	blt.n	810ba20 <__s2b+0x30>
 810ba0c:	4630      	mov	r0, r6
 810ba0e:	f7ff ff47 	bl	810b8a0 <_Balloc>
 810ba12:	b940      	cbnz	r0, 810ba26 <__s2b+0x36>
 810ba14:	4602      	mov	r2, r0
 810ba16:	4b19      	ldr	r3, [pc, #100]	@ (810ba7c <__s2b+0x8c>)
 810ba18:	4819      	ldr	r0, [pc, #100]	@ (810ba80 <__s2b+0x90>)
 810ba1a:	21d3      	movs	r1, #211	@ 0xd3
 810ba1c:	f7fd fe4e 	bl	81096bc <__assert_func>
 810ba20:	0052      	lsls	r2, r2, #1
 810ba22:	3101      	adds	r1, #1
 810ba24:	e7f0      	b.n	810ba08 <__s2b+0x18>
 810ba26:	9b08      	ldr	r3, [sp, #32]
 810ba28:	6143      	str	r3, [r0, #20]
 810ba2a:	2d09      	cmp	r5, #9
 810ba2c:	f04f 0301 	mov.w	r3, #1
 810ba30:	6103      	str	r3, [r0, #16]
 810ba32:	dd16      	ble.n	810ba62 <__s2b+0x72>
 810ba34:	f104 0909 	add.w	r9, r4, #9
 810ba38:	46c8      	mov	r8, r9
 810ba3a:	442c      	add	r4, r5
 810ba3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 810ba40:	4601      	mov	r1, r0
 810ba42:	3b30      	subs	r3, #48	@ 0x30
 810ba44:	220a      	movs	r2, #10
 810ba46:	4630      	mov	r0, r6
 810ba48:	f7ff ff8c 	bl	810b964 <__multadd>
 810ba4c:	45a0      	cmp	r8, r4
 810ba4e:	d1f5      	bne.n	810ba3c <__s2b+0x4c>
 810ba50:	f1a5 0408 	sub.w	r4, r5, #8
 810ba54:	444c      	add	r4, r9
 810ba56:	1b2d      	subs	r5, r5, r4
 810ba58:	1963      	adds	r3, r4, r5
 810ba5a:	42bb      	cmp	r3, r7
 810ba5c:	db04      	blt.n	810ba68 <__s2b+0x78>
 810ba5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ba62:	340a      	adds	r4, #10
 810ba64:	2509      	movs	r5, #9
 810ba66:	e7f6      	b.n	810ba56 <__s2b+0x66>
 810ba68:	f814 3b01 	ldrb.w	r3, [r4], #1
 810ba6c:	4601      	mov	r1, r0
 810ba6e:	3b30      	subs	r3, #48	@ 0x30
 810ba70:	220a      	movs	r2, #10
 810ba72:	4630      	mov	r0, r6
 810ba74:	f7ff ff76 	bl	810b964 <__multadd>
 810ba78:	e7ee      	b.n	810ba58 <__s2b+0x68>
 810ba7a:	bf00      	nop
 810ba7c:	0810eb89 	.word	0x0810eb89
 810ba80:	0810eb9a 	.word	0x0810eb9a

0810ba84 <__hi0bits>:
 810ba84:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 810ba88:	4603      	mov	r3, r0
 810ba8a:	bf36      	itet	cc
 810ba8c:	0403      	lslcc	r3, r0, #16
 810ba8e:	2000      	movcs	r0, #0
 810ba90:	2010      	movcc	r0, #16
 810ba92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810ba96:	bf3c      	itt	cc
 810ba98:	021b      	lslcc	r3, r3, #8
 810ba9a:	3008      	addcc	r0, #8
 810ba9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810baa0:	bf3c      	itt	cc
 810baa2:	011b      	lslcc	r3, r3, #4
 810baa4:	3004      	addcc	r0, #4
 810baa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810baaa:	bf3c      	itt	cc
 810baac:	009b      	lslcc	r3, r3, #2
 810baae:	3002      	addcc	r0, #2
 810bab0:	2b00      	cmp	r3, #0
 810bab2:	db05      	blt.n	810bac0 <__hi0bits+0x3c>
 810bab4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 810bab8:	f100 0001 	add.w	r0, r0, #1
 810babc:	bf08      	it	eq
 810babe:	2020      	moveq	r0, #32
 810bac0:	4770      	bx	lr

0810bac2 <__lo0bits>:
 810bac2:	6803      	ldr	r3, [r0, #0]
 810bac4:	4602      	mov	r2, r0
 810bac6:	f013 0007 	ands.w	r0, r3, #7
 810baca:	d00b      	beq.n	810bae4 <__lo0bits+0x22>
 810bacc:	07d9      	lsls	r1, r3, #31
 810bace:	d421      	bmi.n	810bb14 <__lo0bits+0x52>
 810bad0:	0798      	lsls	r0, r3, #30
 810bad2:	bf49      	itett	mi
 810bad4:	085b      	lsrmi	r3, r3, #1
 810bad6:	089b      	lsrpl	r3, r3, #2
 810bad8:	2001      	movmi	r0, #1
 810bada:	6013      	strmi	r3, [r2, #0]
 810badc:	bf5c      	itt	pl
 810bade:	6013      	strpl	r3, [r2, #0]
 810bae0:	2002      	movpl	r0, #2
 810bae2:	4770      	bx	lr
 810bae4:	b299      	uxth	r1, r3
 810bae6:	b909      	cbnz	r1, 810baec <__lo0bits+0x2a>
 810bae8:	0c1b      	lsrs	r3, r3, #16
 810baea:	2010      	movs	r0, #16
 810baec:	b2d9      	uxtb	r1, r3
 810baee:	b909      	cbnz	r1, 810baf4 <__lo0bits+0x32>
 810baf0:	3008      	adds	r0, #8
 810baf2:	0a1b      	lsrs	r3, r3, #8
 810baf4:	0719      	lsls	r1, r3, #28
 810baf6:	bf04      	itt	eq
 810baf8:	091b      	lsreq	r3, r3, #4
 810bafa:	3004      	addeq	r0, #4
 810bafc:	0799      	lsls	r1, r3, #30
 810bafe:	bf04      	itt	eq
 810bb00:	089b      	lsreq	r3, r3, #2
 810bb02:	3002      	addeq	r0, #2
 810bb04:	07d9      	lsls	r1, r3, #31
 810bb06:	d403      	bmi.n	810bb10 <__lo0bits+0x4e>
 810bb08:	085b      	lsrs	r3, r3, #1
 810bb0a:	f100 0001 	add.w	r0, r0, #1
 810bb0e:	d003      	beq.n	810bb18 <__lo0bits+0x56>
 810bb10:	6013      	str	r3, [r2, #0]
 810bb12:	4770      	bx	lr
 810bb14:	2000      	movs	r0, #0
 810bb16:	4770      	bx	lr
 810bb18:	2020      	movs	r0, #32
 810bb1a:	4770      	bx	lr

0810bb1c <__i2b>:
 810bb1c:	b510      	push	{r4, lr}
 810bb1e:	460c      	mov	r4, r1
 810bb20:	2101      	movs	r1, #1
 810bb22:	f7ff febd 	bl	810b8a0 <_Balloc>
 810bb26:	4602      	mov	r2, r0
 810bb28:	b928      	cbnz	r0, 810bb36 <__i2b+0x1a>
 810bb2a:	4b05      	ldr	r3, [pc, #20]	@ (810bb40 <__i2b+0x24>)
 810bb2c:	4805      	ldr	r0, [pc, #20]	@ (810bb44 <__i2b+0x28>)
 810bb2e:	f240 1145 	movw	r1, #325	@ 0x145
 810bb32:	f7fd fdc3 	bl	81096bc <__assert_func>
 810bb36:	2301      	movs	r3, #1
 810bb38:	6144      	str	r4, [r0, #20]
 810bb3a:	6103      	str	r3, [r0, #16]
 810bb3c:	bd10      	pop	{r4, pc}
 810bb3e:	bf00      	nop
 810bb40:	0810eb89 	.word	0x0810eb89
 810bb44:	0810eb9a 	.word	0x0810eb9a

0810bb48 <__multiply>:
 810bb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bb4c:	4614      	mov	r4, r2
 810bb4e:	690a      	ldr	r2, [r1, #16]
 810bb50:	6923      	ldr	r3, [r4, #16]
 810bb52:	429a      	cmp	r2, r3
 810bb54:	bfa8      	it	ge
 810bb56:	4623      	movge	r3, r4
 810bb58:	460f      	mov	r7, r1
 810bb5a:	bfa4      	itt	ge
 810bb5c:	460c      	movge	r4, r1
 810bb5e:	461f      	movge	r7, r3
 810bb60:	f8d4 a010 	ldr.w	sl, [r4, #16]
 810bb64:	f8d7 9010 	ldr.w	r9, [r7, #16]
 810bb68:	68a3      	ldr	r3, [r4, #8]
 810bb6a:	6861      	ldr	r1, [r4, #4]
 810bb6c:	eb0a 0609 	add.w	r6, sl, r9
 810bb70:	42b3      	cmp	r3, r6
 810bb72:	b085      	sub	sp, #20
 810bb74:	bfb8      	it	lt
 810bb76:	3101      	addlt	r1, #1
 810bb78:	f7ff fe92 	bl	810b8a0 <_Balloc>
 810bb7c:	b930      	cbnz	r0, 810bb8c <__multiply+0x44>
 810bb7e:	4602      	mov	r2, r0
 810bb80:	4b44      	ldr	r3, [pc, #272]	@ (810bc94 <__multiply+0x14c>)
 810bb82:	4845      	ldr	r0, [pc, #276]	@ (810bc98 <__multiply+0x150>)
 810bb84:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 810bb88:	f7fd fd98 	bl	81096bc <__assert_func>
 810bb8c:	f100 0514 	add.w	r5, r0, #20
 810bb90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810bb94:	462b      	mov	r3, r5
 810bb96:	2200      	movs	r2, #0
 810bb98:	4543      	cmp	r3, r8
 810bb9a:	d321      	bcc.n	810bbe0 <__multiply+0x98>
 810bb9c:	f107 0114 	add.w	r1, r7, #20
 810bba0:	f104 0214 	add.w	r2, r4, #20
 810bba4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 810bba8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 810bbac:	9302      	str	r3, [sp, #8]
 810bbae:	1b13      	subs	r3, r2, r4
 810bbb0:	3b15      	subs	r3, #21
 810bbb2:	f023 0303 	bic.w	r3, r3, #3
 810bbb6:	3304      	adds	r3, #4
 810bbb8:	f104 0715 	add.w	r7, r4, #21
 810bbbc:	42ba      	cmp	r2, r7
 810bbbe:	bf38      	it	cc
 810bbc0:	2304      	movcc	r3, #4
 810bbc2:	9301      	str	r3, [sp, #4]
 810bbc4:	9b02      	ldr	r3, [sp, #8]
 810bbc6:	9103      	str	r1, [sp, #12]
 810bbc8:	428b      	cmp	r3, r1
 810bbca:	d80c      	bhi.n	810bbe6 <__multiply+0x9e>
 810bbcc:	2e00      	cmp	r6, #0
 810bbce:	dd03      	ble.n	810bbd8 <__multiply+0x90>
 810bbd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810bbd4:	2b00      	cmp	r3, #0
 810bbd6:	d05b      	beq.n	810bc90 <__multiply+0x148>
 810bbd8:	6106      	str	r6, [r0, #16]
 810bbda:	b005      	add	sp, #20
 810bbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bbe0:	f843 2b04 	str.w	r2, [r3], #4
 810bbe4:	e7d8      	b.n	810bb98 <__multiply+0x50>
 810bbe6:	f8b1 a000 	ldrh.w	sl, [r1]
 810bbea:	f1ba 0f00 	cmp.w	sl, #0
 810bbee:	d024      	beq.n	810bc3a <__multiply+0xf2>
 810bbf0:	f104 0e14 	add.w	lr, r4, #20
 810bbf4:	46a9      	mov	r9, r5
 810bbf6:	f04f 0c00 	mov.w	ip, #0
 810bbfa:	f85e 7b04 	ldr.w	r7, [lr], #4
 810bbfe:	f8d9 3000 	ldr.w	r3, [r9]
 810bc02:	fa1f fb87 	uxth.w	fp, r7
 810bc06:	b29b      	uxth	r3, r3
 810bc08:	fb0a 330b 	mla	r3, sl, fp, r3
 810bc0c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 810bc10:	f8d9 7000 	ldr.w	r7, [r9]
 810bc14:	4463      	add	r3, ip
 810bc16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810bc1a:	fb0a c70b 	mla	r7, sl, fp, ip
 810bc1e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 810bc22:	b29b      	uxth	r3, r3
 810bc24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810bc28:	4572      	cmp	r2, lr
 810bc2a:	f849 3b04 	str.w	r3, [r9], #4
 810bc2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810bc32:	d8e2      	bhi.n	810bbfa <__multiply+0xb2>
 810bc34:	9b01      	ldr	r3, [sp, #4]
 810bc36:	f845 c003 	str.w	ip, [r5, r3]
 810bc3a:	9b03      	ldr	r3, [sp, #12]
 810bc3c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 810bc40:	3104      	adds	r1, #4
 810bc42:	f1b9 0f00 	cmp.w	r9, #0
 810bc46:	d021      	beq.n	810bc8c <__multiply+0x144>
 810bc48:	682b      	ldr	r3, [r5, #0]
 810bc4a:	f104 0c14 	add.w	ip, r4, #20
 810bc4e:	46ae      	mov	lr, r5
 810bc50:	f04f 0a00 	mov.w	sl, #0
 810bc54:	f8bc b000 	ldrh.w	fp, [ip]
 810bc58:	f8be 7002 	ldrh.w	r7, [lr, #2]
 810bc5c:	fb09 770b 	mla	r7, r9, fp, r7
 810bc60:	4457      	add	r7, sl
 810bc62:	b29b      	uxth	r3, r3
 810bc64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810bc68:	f84e 3b04 	str.w	r3, [lr], #4
 810bc6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 810bc70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810bc74:	f8be 3000 	ldrh.w	r3, [lr]
 810bc78:	fb09 330a 	mla	r3, r9, sl, r3
 810bc7c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 810bc80:	4562      	cmp	r2, ip
 810bc82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810bc86:	d8e5      	bhi.n	810bc54 <__multiply+0x10c>
 810bc88:	9f01      	ldr	r7, [sp, #4]
 810bc8a:	51eb      	str	r3, [r5, r7]
 810bc8c:	3504      	adds	r5, #4
 810bc8e:	e799      	b.n	810bbc4 <__multiply+0x7c>
 810bc90:	3e01      	subs	r6, #1
 810bc92:	e79b      	b.n	810bbcc <__multiply+0x84>
 810bc94:	0810eb89 	.word	0x0810eb89
 810bc98:	0810eb9a 	.word	0x0810eb9a

0810bc9c <__pow5mult>:
 810bc9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810bca0:	4615      	mov	r5, r2
 810bca2:	f012 0203 	ands.w	r2, r2, #3
 810bca6:	4607      	mov	r7, r0
 810bca8:	460e      	mov	r6, r1
 810bcaa:	d007      	beq.n	810bcbc <__pow5mult+0x20>
 810bcac:	4c25      	ldr	r4, [pc, #148]	@ (810bd44 <__pow5mult+0xa8>)
 810bcae:	3a01      	subs	r2, #1
 810bcb0:	2300      	movs	r3, #0
 810bcb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810bcb6:	f7ff fe55 	bl	810b964 <__multadd>
 810bcba:	4606      	mov	r6, r0
 810bcbc:	10ad      	asrs	r5, r5, #2
 810bcbe:	d03d      	beq.n	810bd3c <__pow5mult+0xa0>
 810bcc0:	69fc      	ldr	r4, [r7, #28]
 810bcc2:	b97c      	cbnz	r4, 810bce4 <__pow5mult+0x48>
 810bcc4:	2010      	movs	r0, #16
 810bcc6:	f7ff fd35 	bl	810b734 <malloc>
 810bcca:	4602      	mov	r2, r0
 810bccc:	61f8      	str	r0, [r7, #28]
 810bcce:	b928      	cbnz	r0, 810bcdc <__pow5mult+0x40>
 810bcd0:	4b1d      	ldr	r3, [pc, #116]	@ (810bd48 <__pow5mult+0xac>)
 810bcd2:	481e      	ldr	r0, [pc, #120]	@ (810bd4c <__pow5mult+0xb0>)
 810bcd4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 810bcd8:	f7fd fcf0 	bl	81096bc <__assert_func>
 810bcdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810bce0:	6004      	str	r4, [r0, #0]
 810bce2:	60c4      	str	r4, [r0, #12]
 810bce4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 810bce8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810bcec:	b94c      	cbnz	r4, 810bd02 <__pow5mult+0x66>
 810bcee:	f240 2171 	movw	r1, #625	@ 0x271
 810bcf2:	4638      	mov	r0, r7
 810bcf4:	f7ff ff12 	bl	810bb1c <__i2b>
 810bcf8:	2300      	movs	r3, #0
 810bcfa:	f8c8 0008 	str.w	r0, [r8, #8]
 810bcfe:	4604      	mov	r4, r0
 810bd00:	6003      	str	r3, [r0, #0]
 810bd02:	f04f 0900 	mov.w	r9, #0
 810bd06:	07eb      	lsls	r3, r5, #31
 810bd08:	d50a      	bpl.n	810bd20 <__pow5mult+0x84>
 810bd0a:	4631      	mov	r1, r6
 810bd0c:	4622      	mov	r2, r4
 810bd0e:	4638      	mov	r0, r7
 810bd10:	f7ff ff1a 	bl	810bb48 <__multiply>
 810bd14:	4631      	mov	r1, r6
 810bd16:	4680      	mov	r8, r0
 810bd18:	4638      	mov	r0, r7
 810bd1a:	f7ff fe01 	bl	810b920 <_Bfree>
 810bd1e:	4646      	mov	r6, r8
 810bd20:	106d      	asrs	r5, r5, #1
 810bd22:	d00b      	beq.n	810bd3c <__pow5mult+0xa0>
 810bd24:	6820      	ldr	r0, [r4, #0]
 810bd26:	b938      	cbnz	r0, 810bd38 <__pow5mult+0x9c>
 810bd28:	4622      	mov	r2, r4
 810bd2a:	4621      	mov	r1, r4
 810bd2c:	4638      	mov	r0, r7
 810bd2e:	f7ff ff0b 	bl	810bb48 <__multiply>
 810bd32:	6020      	str	r0, [r4, #0]
 810bd34:	f8c0 9000 	str.w	r9, [r0]
 810bd38:	4604      	mov	r4, r0
 810bd3a:	e7e4      	b.n	810bd06 <__pow5mult+0x6a>
 810bd3c:	4630      	mov	r0, r6
 810bd3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810bd42:	bf00      	nop
 810bd44:	0810ebf4 	.word	0x0810ebf4
 810bd48:	0810eb1a 	.word	0x0810eb1a
 810bd4c:	0810eb9a 	.word	0x0810eb9a

0810bd50 <__lshift>:
 810bd50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810bd54:	460c      	mov	r4, r1
 810bd56:	6849      	ldr	r1, [r1, #4]
 810bd58:	6923      	ldr	r3, [r4, #16]
 810bd5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810bd5e:	68a3      	ldr	r3, [r4, #8]
 810bd60:	4607      	mov	r7, r0
 810bd62:	4691      	mov	r9, r2
 810bd64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810bd68:	f108 0601 	add.w	r6, r8, #1
 810bd6c:	42b3      	cmp	r3, r6
 810bd6e:	db0b      	blt.n	810bd88 <__lshift+0x38>
 810bd70:	4638      	mov	r0, r7
 810bd72:	f7ff fd95 	bl	810b8a0 <_Balloc>
 810bd76:	4605      	mov	r5, r0
 810bd78:	b948      	cbnz	r0, 810bd8e <__lshift+0x3e>
 810bd7a:	4602      	mov	r2, r0
 810bd7c:	4b28      	ldr	r3, [pc, #160]	@ (810be20 <__lshift+0xd0>)
 810bd7e:	4829      	ldr	r0, [pc, #164]	@ (810be24 <__lshift+0xd4>)
 810bd80:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 810bd84:	f7fd fc9a 	bl	81096bc <__assert_func>
 810bd88:	3101      	adds	r1, #1
 810bd8a:	005b      	lsls	r3, r3, #1
 810bd8c:	e7ee      	b.n	810bd6c <__lshift+0x1c>
 810bd8e:	2300      	movs	r3, #0
 810bd90:	f100 0114 	add.w	r1, r0, #20
 810bd94:	f100 0210 	add.w	r2, r0, #16
 810bd98:	4618      	mov	r0, r3
 810bd9a:	4553      	cmp	r3, sl
 810bd9c:	db33      	blt.n	810be06 <__lshift+0xb6>
 810bd9e:	6920      	ldr	r0, [r4, #16]
 810bda0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810bda4:	f104 0314 	add.w	r3, r4, #20
 810bda8:	f019 091f 	ands.w	r9, r9, #31
 810bdac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810bdb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810bdb4:	d02b      	beq.n	810be0e <__lshift+0xbe>
 810bdb6:	f1c9 0e20 	rsb	lr, r9, #32
 810bdba:	468a      	mov	sl, r1
 810bdbc:	2200      	movs	r2, #0
 810bdbe:	6818      	ldr	r0, [r3, #0]
 810bdc0:	fa00 f009 	lsl.w	r0, r0, r9
 810bdc4:	4310      	orrs	r0, r2
 810bdc6:	f84a 0b04 	str.w	r0, [sl], #4
 810bdca:	f853 2b04 	ldr.w	r2, [r3], #4
 810bdce:	459c      	cmp	ip, r3
 810bdd0:	fa22 f20e 	lsr.w	r2, r2, lr
 810bdd4:	d8f3      	bhi.n	810bdbe <__lshift+0x6e>
 810bdd6:	ebac 0304 	sub.w	r3, ip, r4
 810bdda:	3b15      	subs	r3, #21
 810bddc:	f023 0303 	bic.w	r3, r3, #3
 810bde0:	3304      	adds	r3, #4
 810bde2:	f104 0015 	add.w	r0, r4, #21
 810bde6:	4584      	cmp	ip, r0
 810bde8:	bf38      	it	cc
 810bdea:	2304      	movcc	r3, #4
 810bdec:	50ca      	str	r2, [r1, r3]
 810bdee:	b10a      	cbz	r2, 810bdf4 <__lshift+0xa4>
 810bdf0:	f108 0602 	add.w	r6, r8, #2
 810bdf4:	3e01      	subs	r6, #1
 810bdf6:	4638      	mov	r0, r7
 810bdf8:	612e      	str	r6, [r5, #16]
 810bdfa:	4621      	mov	r1, r4
 810bdfc:	f7ff fd90 	bl	810b920 <_Bfree>
 810be00:	4628      	mov	r0, r5
 810be02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810be06:	f842 0f04 	str.w	r0, [r2, #4]!
 810be0a:	3301      	adds	r3, #1
 810be0c:	e7c5      	b.n	810bd9a <__lshift+0x4a>
 810be0e:	3904      	subs	r1, #4
 810be10:	f853 2b04 	ldr.w	r2, [r3], #4
 810be14:	f841 2f04 	str.w	r2, [r1, #4]!
 810be18:	459c      	cmp	ip, r3
 810be1a:	d8f9      	bhi.n	810be10 <__lshift+0xc0>
 810be1c:	e7ea      	b.n	810bdf4 <__lshift+0xa4>
 810be1e:	bf00      	nop
 810be20:	0810eb89 	.word	0x0810eb89
 810be24:	0810eb9a 	.word	0x0810eb9a

0810be28 <__mcmp>:
 810be28:	690a      	ldr	r2, [r1, #16]
 810be2a:	4603      	mov	r3, r0
 810be2c:	6900      	ldr	r0, [r0, #16]
 810be2e:	1a80      	subs	r0, r0, r2
 810be30:	b530      	push	{r4, r5, lr}
 810be32:	d10e      	bne.n	810be52 <__mcmp+0x2a>
 810be34:	3314      	adds	r3, #20
 810be36:	3114      	adds	r1, #20
 810be38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 810be3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 810be40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810be44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810be48:	4295      	cmp	r5, r2
 810be4a:	d003      	beq.n	810be54 <__mcmp+0x2c>
 810be4c:	d205      	bcs.n	810be5a <__mcmp+0x32>
 810be4e:	f04f 30ff 	mov.w	r0, #4294967295
 810be52:	bd30      	pop	{r4, r5, pc}
 810be54:	42a3      	cmp	r3, r4
 810be56:	d3f3      	bcc.n	810be40 <__mcmp+0x18>
 810be58:	e7fb      	b.n	810be52 <__mcmp+0x2a>
 810be5a:	2001      	movs	r0, #1
 810be5c:	e7f9      	b.n	810be52 <__mcmp+0x2a>
	...

0810be60 <__mdiff>:
 810be60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810be64:	4689      	mov	r9, r1
 810be66:	4606      	mov	r6, r0
 810be68:	4611      	mov	r1, r2
 810be6a:	4648      	mov	r0, r9
 810be6c:	4614      	mov	r4, r2
 810be6e:	f7ff ffdb 	bl	810be28 <__mcmp>
 810be72:	1e05      	subs	r5, r0, #0
 810be74:	d112      	bne.n	810be9c <__mdiff+0x3c>
 810be76:	4629      	mov	r1, r5
 810be78:	4630      	mov	r0, r6
 810be7a:	f7ff fd11 	bl	810b8a0 <_Balloc>
 810be7e:	4602      	mov	r2, r0
 810be80:	b928      	cbnz	r0, 810be8e <__mdiff+0x2e>
 810be82:	4b3f      	ldr	r3, [pc, #252]	@ (810bf80 <__mdiff+0x120>)
 810be84:	f240 2137 	movw	r1, #567	@ 0x237
 810be88:	483e      	ldr	r0, [pc, #248]	@ (810bf84 <__mdiff+0x124>)
 810be8a:	f7fd fc17 	bl	81096bc <__assert_func>
 810be8e:	2301      	movs	r3, #1
 810be90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810be94:	4610      	mov	r0, r2
 810be96:	b003      	add	sp, #12
 810be98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810be9c:	bfbc      	itt	lt
 810be9e:	464b      	movlt	r3, r9
 810bea0:	46a1      	movlt	r9, r4
 810bea2:	4630      	mov	r0, r6
 810bea4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 810bea8:	bfba      	itte	lt
 810beaa:	461c      	movlt	r4, r3
 810beac:	2501      	movlt	r5, #1
 810beae:	2500      	movge	r5, #0
 810beb0:	f7ff fcf6 	bl	810b8a0 <_Balloc>
 810beb4:	4602      	mov	r2, r0
 810beb6:	b918      	cbnz	r0, 810bec0 <__mdiff+0x60>
 810beb8:	4b31      	ldr	r3, [pc, #196]	@ (810bf80 <__mdiff+0x120>)
 810beba:	f240 2145 	movw	r1, #581	@ 0x245
 810bebe:	e7e3      	b.n	810be88 <__mdiff+0x28>
 810bec0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 810bec4:	6926      	ldr	r6, [r4, #16]
 810bec6:	60c5      	str	r5, [r0, #12]
 810bec8:	f109 0310 	add.w	r3, r9, #16
 810becc:	f109 0514 	add.w	r5, r9, #20
 810bed0:	f104 0e14 	add.w	lr, r4, #20
 810bed4:	f100 0b14 	add.w	fp, r0, #20
 810bed8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 810bedc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 810bee0:	9301      	str	r3, [sp, #4]
 810bee2:	46d9      	mov	r9, fp
 810bee4:	f04f 0c00 	mov.w	ip, #0
 810bee8:	9b01      	ldr	r3, [sp, #4]
 810beea:	f85e 0b04 	ldr.w	r0, [lr], #4
 810beee:	f853 af04 	ldr.w	sl, [r3, #4]!
 810bef2:	9301      	str	r3, [sp, #4]
 810bef4:	fa1f f38a 	uxth.w	r3, sl
 810bef8:	4619      	mov	r1, r3
 810befa:	b283      	uxth	r3, r0
 810befc:	1acb      	subs	r3, r1, r3
 810befe:	0c00      	lsrs	r0, r0, #16
 810bf00:	4463      	add	r3, ip
 810bf02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 810bf06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 810bf0a:	b29b      	uxth	r3, r3
 810bf0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 810bf10:	4576      	cmp	r6, lr
 810bf12:	f849 3b04 	str.w	r3, [r9], #4
 810bf16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810bf1a:	d8e5      	bhi.n	810bee8 <__mdiff+0x88>
 810bf1c:	1b33      	subs	r3, r6, r4
 810bf1e:	3b15      	subs	r3, #21
 810bf20:	f023 0303 	bic.w	r3, r3, #3
 810bf24:	3415      	adds	r4, #21
 810bf26:	3304      	adds	r3, #4
 810bf28:	42a6      	cmp	r6, r4
 810bf2a:	bf38      	it	cc
 810bf2c:	2304      	movcc	r3, #4
 810bf2e:	441d      	add	r5, r3
 810bf30:	445b      	add	r3, fp
 810bf32:	461e      	mov	r6, r3
 810bf34:	462c      	mov	r4, r5
 810bf36:	4544      	cmp	r4, r8
 810bf38:	d30e      	bcc.n	810bf58 <__mdiff+0xf8>
 810bf3a:	f108 0103 	add.w	r1, r8, #3
 810bf3e:	1b49      	subs	r1, r1, r5
 810bf40:	f021 0103 	bic.w	r1, r1, #3
 810bf44:	3d03      	subs	r5, #3
 810bf46:	45a8      	cmp	r8, r5
 810bf48:	bf38      	it	cc
 810bf4a:	2100      	movcc	r1, #0
 810bf4c:	440b      	add	r3, r1
 810bf4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810bf52:	b191      	cbz	r1, 810bf7a <__mdiff+0x11a>
 810bf54:	6117      	str	r7, [r2, #16]
 810bf56:	e79d      	b.n	810be94 <__mdiff+0x34>
 810bf58:	f854 1b04 	ldr.w	r1, [r4], #4
 810bf5c:	46e6      	mov	lr, ip
 810bf5e:	0c08      	lsrs	r0, r1, #16
 810bf60:	fa1c fc81 	uxtah	ip, ip, r1
 810bf64:	4471      	add	r1, lr
 810bf66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 810bf6a:	b289      	uxth	r1, r1
 810bf6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 810bf70:	f846 1b04 	str.w	r1, [r6], #4
 810bf74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810bf78:	e7dd      	b.n	810bf36 <__mdiff+0xd6>
 810bf7a:	3f01      	subs	r7, #1
 810bf7c:	e7e7      	b.n	810bf4e <__mdiff+0xee>
 810bf7e:	bf00      	nop
 810bf80:	0810eb89 	.word	0x0810eb89
 810bf84:	0810eb9a 	.word	0x0810eb9a

0810bf88 <__ulp>:
 810bf88:	b082      	sub	sp, #8
 810bf8a:	ed8d 0b00 	vstr	d0, [sp]
 810bf8e:	9a01      	ldr	r2, [sp, #4]
 810bf90:	4b0f      	ldr	r3, [pc, #60]	@ (810bfd0 <__ulp+0x48>)
 810bf92:	4013      	ands	r3, r2
 810bf94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 810bf98:	2b00      	cmp	r3, #0
 810bf9a:	dc08      	bgt.n	810bfae <__ulp+0x26>
 810bf9c:	425b      	negs	r3, r3
 810bf9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 810bfa2:	ea4f 5223 	mov.w	r2, r3, asr #20
 810bfa6:	da04      	bge.n	810bfb2 <__ulp+0x2a>
 810bfa8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 810bfac:	4113      	asrs	r3, r2
 810bfae:	2200      	movs	r2, #0
 810bfb0:	e008      	b.n	810bfc4 <__ulp+0x3c>
 810bfb2:	f1a2 0314 	sub.w	r3, r2, #20
 810bfb6:	2b1e      	cmp	r3, #30
 810bfb8:	bfda      	itte	le
 810bfba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 810bfbe:	40da      	lsrle	r2, r3
 810bfc0:	2201      	movgt	r2, #1
 810bfc2:	2300      	movs	r3, #0
 810bfc4:	4619      	mov	r1, r3
 810bfc6:	4610      	mov	r0, r2
 810bfc8:	ec41 0b10 	vmov	d0, r0, r1
 810bfcc:	b002      	add	sp, #8
 810bfce:	4770      	bx	lr
 810bfd0:	7ff00000 	.word	0x7ff00000

0810bfd4 <__b2d>:
 810bfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810bfd8:	6906      	ldr	r6, [r0, #16]
 810bfda:	f100 0814 	add.w	r8, r0, #20
 810bfde:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810bfe2:	1f37      	subs	r7, r6, #4
 810bfe4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810bfe8:	4610      	mov	r0, r2
 810bfea:	f7ff fd4b 	bl	810ba84 <__hi0bits>
 810bfee:	f1c0 0320 	rsb	r3, r0, #32
 810bff2:	280a      	cmp	r0, #10
 810bff4:	600b      	str	r3, [r1, #0]
 810bff6:	491b      	ldr	r1, [pc, #108]	@ (810c064 <__b2d+0x90>)
 810bff8:	dc15      	bgt.n	810c026 <__b2d+0x52>
 810bffa:	f1c0 0c0b 	rsb	ip, r0, #11
 810bffe:	fa22 f30c 	lsr.w	r3, r2, ip
 810c002:	45b8      	cmp	r8, r7
 810c004:	ea43 0501 	orr.w	r5, r3, r1
 810c008:	bf34      	ite	cc
 810c00a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810c00e:	2300      	movcs	r3, #0
 810c010:	3015      	adds	r0, #21
 810c012:	fa02 f000 	lsl.w	r0, r2, r0
 810c016:	fa23 f30c 	lsr.w	r3, r3, ip
 810c01a:	4303      	orrs	r3, r0
 810c01c:	461c      	mov	r4, r3
 810c01e:	ec45 4b10 	vmov	d0, r4, r5
 810c022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c026:	45b8      	cmp	r8, r7
 810c028:	bf3a      	itte	cc
 810c02a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810c02e:	f1a6 0708 	subcc.w	r7, r6, #8
 810c032:	2300      	movcs	r3, #0
 810c034:	380b      	subs	r0, #11
 810c036:	d012      	beq.n	810c05e <__b2d+0x8a>
 810c038:	f1c0 0120 	rsb	r1, r0, #32
 810c03c:	fa23 f401 	lsr.w	r4, r3, r1
 810c040:	4082      	lsls	r2, r0
 810c042:	4322      	orrs	r2, r4
 810c044:	4547      	cmp	r7, r8
 810c046:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 810c04a:	bf8c      	ite	hi
 810c04c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 810c050:	2200      	movls	r2, #0
 810c052:	4083      	lsls	r3, r0
 810c054:	40ca      	lsrs	r2, r1
 810c056:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 810c05a:	4313      	orrs	r3, r2
 810c05c:	e7de      	b.n	810c01c <__b2d+0x48>
 810c05e:	ea42 0501 	orr.w	r5, r2, r1
 810c062:	e7db      	b.n	810c01c <__b2d+0x48>
 810c064:	3ff00000 	.word	0x3ff00000

0810c068 <__d2b>:
 810c068:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810c06c:	460f      	mov	r7, r1
 810c06e:	2101      	movs	r1, #1
 810c070:	ec59 8b10 	vmov	r8, r9, d0
 810c074:	4616      	mov	r6, r2
 810c076:	f7ff fc13 	bl	810b8a0 <_Balloc>
 810c07a:	4604      	mov	r4, r0
 810c07c:	b930      	cbnz	r0, 810c08c <__d2b+0x24>
 810c07e:	4602      	mov	r2, r0
 810c080:	4b23      	ldr	r3, [pc, #140]	@ (810c110 <__d2b+0xa8>)
 810c082:	4824      	ldr	r0, [pc, #144]	@ (810c114 <__d2b+0xac>)
 810c084:	f240 310f 	movw	r1, #783	@ 0x30f
 810c088:	f7fd fb18 	bl	81096bc <__assert_func>
 810c08c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810c090:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810c094:	b10d      	cbz	r5, 810c09a <__d2b+0x32>
 810c096:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810c09a:	9301      	str	r3, [sp, #4]
 810c09c:	f1b8 0300 	subs.w	r3, r8, #0
 810c0a0:	d023      	beq.n	810c0ea <__d2b+0x82>
 810c0a2:	4668      	mov	r0, sp
 810c0a4:	9300      	str	r3, [sp, #0]
 810c0a6:	f7ff fd0c 	bl	810bac2 <__lo0bits>
 810c0aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 810c0ae:	b1d0      	cbz	r0, 810c0e6 <__d2b+0x7e>
 810c0b0:	f1c0 0320 	rsb	r3, r0, #32
 810c0b4:	fa02 f303 	lsl.w	r3, r2, r3
 810c0b8:	430b      	orrs	r3, r1
 810c0ba:	40c2      	lsrs	r2, r0
 810c0bc:	6163      	str	r3, [r4, #20]
 810c0be:	9201      	str	r2, [sp, #4]
 810c0c0:	9b01      	ldr	r3, [sp, #4]
 810c0c2:	61a3      	str	r3, [r4, #24]
 810c0c4:	2b00      	cmp	r3, #0
 810c0c6:	bf0c      	ite	eq
 810c0c8:	2201      	moveq	r2, #1
 810c0ca:	2202      	movne	r2, #2
 810c0cc:	6122      	str	r2, [r4, #16]
 810c0ce:	b1a5      	cbz	r5, 810c0fa <__d2b+0x92>
 810c0d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 810c0d4:	4405      	add	r5, r0
 810c0d6:	603d      	str	r5, [r7, #0]
 810c0d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 810c0dc:	6030      	str	r0, [r6, #0]
 810c0de:	4620      	mov	r0, r4
 810c0e0:	b003      	add	sp, #12
 810c0e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810c0e6:	6161      	str	r1, [r4, #20]
 810c0e8:	e7ea      	b.n	810c0c0 <__d2b+0x58>
 810c0ea:	a801      	add	r0, sp, #4
 810c0ec:	f7ff fce9 	bl	810bac2 <__lo0bits>
 810c0f0:	9b01      	ldr	r3, [sp, #4]
 810c0f2:	6163      	str	r3, [r4, #20]
 810c0f4:	3020      	adds	r0, #32
 810c0f6:	2201      	movs	r2, #1
 810c0f8:	e7e8      	b.n	810c0cc <__d2b+0x64>
 810c0fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810c0fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 810c102:	6038      	str	r0, [r7, #0]
 810c104:	6918      	ldr	r0, [r3, #16]
 810c106:	f7ff fcbd 	bl	810ba84 <__hi0bits>
 810c10a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810c10e:	e7e5      	b.n	810c0dc <__d2b+0x74>
 810c110:	0810eb89 	.word	0x0810eb89
 810c114:	0810eb9a 	.word	0x0810eb9a

0810c118 <__ratio>:
 810c118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c11c:	b085      	sub	sp, #20
 810c11e:	e9cd 1000 	strd	r1, r0, [sp]
 810c122:	a902      	add	r1, sp, #8
 810c124:	f7ff ff56 	bl	810bfd4 <__b2d>
 810c128:	9800      	ldr	r0, [sp, #0]
 810c12a:	a903      	add	r1, sp, #12
 810c12c:	ec55 4b10 	vmov	r4, r5, d0
 810c130:	f7ff ff50 	bl	810bfd4 <__b2d>
 810c134:	9b01      	ldr	r3, [sp, #4]
 810c136:	6919      	ldr	r1, [r3, #16]
 810c138:	9b00      	ldr	r3, [sp, #0]
 810c13a:	691b      	ldr	r3, [r3, #16]
 810c13c:	1ac9      	subs	r1, r1, r3
 810c13e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 810c142:	1a9b      	subs	r3, r3, r2
 810c144:	ec5b ab10 	vmov	sl, fp, d0
 810c148:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 810c14c:	2b00      	cmp	r3, #0
 810c14e:	bfce      	itee	gt
 810c150:	462a      	movgt	r2, r5
 810c152:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810c156:	465a      	movle	r2, fp
 810c158:	462f      	mov	r7, r5
 810c15a:	46d9      	mov	r9, fp
 810c15c:	bfcc      	ite	gt
 810c15e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810c162:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 810c166:	464b      	mov	r3, r9
 810c168:	4652      	mov	r2, sl
 810c16a:	4620      	mov	r0, r4
 810c16c:	4639      	mov	r1, r7
 810c16e:	f7f4 fbf5 	bl	810095c <__aeabi_ddiv>
 810c172:	ec41 0b10 	vmov	d0, r0, r1
 810c176:	b005      	add	sp, #20
 810c178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c17c <__copybits>:
 810c17c:	3901      	subs	r1, #1
 810c17e:	b570      	push	{r4, r5, r6, lr}
 810c180:	1149      	asrs	r1, r1, #5
 810c182:	6914      	ldr	r4, [r2, #16]
 810c184:	3101      	adds	r1, #1
 810c186:	f102 0314 	add.w	r3, r2, #20
 810c18a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810c18e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810c192:	1f05      	subs	r5, r0, #4
 810c194:	42a3      	cmp	r3, r4
 810c196:	d30c      	bcc.n	810c1b2 <__copybits+0x36>
 810c198:	1aa3      	subs	r3, r4, r2
 810c19a:	3b11      	subs	r3, #17
 810c19c:	f023 0303 	bic.w	r3, r3, #3
 810c1a0:	3211      	adds	r2, #17
 810c1a2:	42a2      	cmp	r2, r4
 810c1a4:	bf88      	it	hi
 810c1a6:	2300      	movhi	r3, #0
 810c1a8:	4418      	add	r0, r3
 810c1aa:	2300      	movs	r3, #0
 810c1ac:	4288      	cmp	r0, r1
 810c1ae:	d305      	bcc.n	810c1bc <__copybits+0x40>
 810c1b0:	bd70      	pop	{r4, r5, r6, pc}
 810c1b2:	f853 6b04 	ldr.w	r6, [r3], #4
 810c1b6:	f845 6f04 	str.w	r6, [r5, #4]!
 810c1ba:	e7eb      	b.n	810c194 <__copybits+0x18>
 810c1bc:	f840 3b04 	str.w	r3, [r0], #4
 810c1c0:	e7f4      	b.n	810c1ac <__copybits+0x30>

0810c1c2 <__any_on>:
 810c1c2:	f100 0214 	add.w	r2, r0, #20
 810c1c6:	6900      	ldr	r0, [r0, #16]
 810c1c8:	114b      	asrs	r3, r1, #5
 810c1ca:	4298      	cmp	r0, r3
 810c1cc:	b510      	push	{r4, lr}
 810c1ce:	db11      	blt.n	810c1f4 <__any_on+0x32>
 810c1d0:	dd0a      	ble.n	810c1e8 <__any_on+0x26>
 810c1d2:	f011 011f 	ands.w	r1, r1, #31
 810c1d6:	d007      	beq.n	810c1e8 <__any_on+0x26>
 810c1d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810c1dc:	fa24 f001 	lsr.w	r0, r4, r1
 810c1e0:	fa00 f101 	lsl.w	r1, r0, r1
 810c1e4:	428c      	cmp	r4, r1
 810c1e6:	d10b      	bne.n	810c200 <__any_on+0x3e>
 810c1e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810c1ec:	4293      	cmp	r3, r2
 810c1ee:	d803      	bhi.n	810c1f8 <__any_on+0x36>
 810c1f0:	2000      	movs	r0, #0
 810c1f2:	bd10      	pop	{r4, pc}
 810c1f4:	4603      	mov	r3, r0
 810c1f6:	e7f7      	b.n	810c1e8 <__any_on+0x26>
 810c1f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810c1fc:	2900      	cmp	r1, #0
 810c1fe:	d0f5      	beq.n	810c1ec <__any_on+0x2a>
 810c200:	2001      	movs	r0, #1
 810c202:	e7f6      	b.n	810c1f2 <__any_on+0x30>

0810c204 <sulp>:
 810c204:	b570      	push	{r4, r5, r6, lr}
 810c206:	4604      	mov	r4, r0
 810c208:	460d      	mov	r5, r1
 810c20a:	ec45 4b10 	vmov	d0, r4, r5
 810c20e:	4616      	mov	r6, r2
 810c210:	f7ff feba 	bl	810bf88 <__ulp>
 810c214:	ec51 0b10 	vmov	r0, r1, d0
 810c218:	b17e      	cbz	r6, 810c23a <sulp+0x36>
 810c21a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810c21e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810c222:	2b00      	cmp	r3, #0
 810c224:	dd09      	ble.n	810c23a <sulp+0x36>
 810c226:	051b      	lsls	r3, r3, #20
 810c228:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 810c22c:	2400      	movs	r4, #0
 810c22e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 810c232:	4622      	mov	r2, r4
 810c234:	462b      	mov	r3, r5
 810c236:	f7f4 fa67 	bl	8100708 <__aeabi_dmul>
 810c23a:	ec41 0b10 	vmov	d0, r0, r1
 810c23e:	bd70      	pop	{r4, r5, r6, pc}

0810c240 <_strtod_l>:
 810c240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c244:	b09f      	sub	sp, #124	@ 0x7c
 810c246:	460c      	mov	r4, r1
 810c248:	9217      	str	r2, [sp, #92]	@ 0x5c
 810c24a:	2200      	movs	r2, #0
 810c24c:	921a      	str	r2, [sp, #104]	@ 0x68
 810c24e:	9005      	str	r0, [sp, #20]
 810c250:	f04f 0a00 	mov.w	sl, #0
 810c254:	f04f 0b00 	mov.w	fp, #0
 810c258:	460a      	mov	r2, r1
 810c25a:	9219      	str	r2, [sp, #100]	@ 0x64
 810c25c:	7811      	ldrb	r1, [r2, #0]
 810c25e:	292b      	cmp	r1, #43	@ 0x2b
 810c260:	d04a      	beq.n	810c2f8 <_strtod_l+0xb8>
 810c262:	d838      	bhi.n	810c2d6 <_strtod_l+0x96>
 810c264:	290d      	cmp	r1, #13
 810c266:	d832      	bhi.n	810c2ce <_strtod_l+0x8e>
 810c268:	2908      	cmp	r1, #8
 810c26a:	d832      	bhi.n	810c2d2 <_strtod_l+0x92>
 810c26c:	2900      	cmp	r1, #0
 810c26e:	d03b      	beq.n	810c2e8 <_strtod_l+0xa8>
 810c270:	2200      	movs	r2, #0
 810c272:	920b      	str	r2, [sp, #44]	@ 0x2c
 810c274:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 810c276:	782a      	ldrb	r2, [r5, #0]
 810c278:	2a30      	cmp	r2, #48	@ 0x30
 810c27a:	f040 80b3 	bne.w	810c3e4 <_strtod_l+0x1a4>
 810c27e:	786a      	ldrb	r2, [r5, #1]
 810c280:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 810c284:	2a58      	cmp	r2, #88	@ 0x58
 810c286:	d16e      	bne.n	810c366 <_strtod_l+0x126>
 810c288:	9302      	str	r3, [sp, #8]
 810c28a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810c28c:	9301      	str	r3, [sp, #4]
 810c28e:	ab1a      	add	r3, sp, #104	@ 0x68
 810c290:	9300      	str	r3, [sp, #0]
 810c292:	4a8e      	ldr	r2, [pc, #568]	@ (810c4cc <_strtod_l+0x28c>)
 810c294:	9805      	ldr	r0, [sp, #20]
 810c296:	ab1b      	add	r3, sp, #108	@ 0x6c
 810c298:	a919      	add	r1, sp, #100	@ 0x64
 810c29a:	f001 fb05 	bl	810d8a8 <__gethex>
 810c29e:	f010 060f 	ands.w	r6, r0, #15
 810c2a2:	4604      	mov	r4, r0
 810c2a4:	d005      	beq.n	810c2b2 <_strtod_l+0x72>
 810c2a6:	2e06      	cmp	r6, #6
 810c2a8:	d128      	bne.n	810c2fc <_strtod_l+0xbc>
 810c2aa:	3501      	adds	r5, #1
 810c2ac:	2300      	movs	r3, #0
 810c2ae:	9519      	str	r5, [sp, #100]	@ 0x64
 810c2b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 810c2b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810c2b4:	2b00      	cmp	r3, #0
 810c2b6:	f040 858e 	bne.w	810cdd6 <_strtod_l+0xb96>
 810c2ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810c2bc:	b1cb      	cbz	r3, 810c2f2 <_strtod_l+0xb2>
 810c2be:	4652      	mov	r2, sl
 810c2c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 810c2c4:	ec43 2b10 	vmov	d0, r2, r3
 810c2c8:	b01f      	add	sp, #124	@ 0x7c
 810c2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c2ce:	2920      	cmp	r1, #32
 810c2d0:	d1ce      	bne.n	810c270 <_strtod_l+0x30>
 810c2d2:	3201      	adds	r2, #1
 810c2d4:	e7c1      	b.n	810c25a <_strtod_l+0x1a>
 810c2d6:	292d      	cmp	r1, #45	@ 0x2d
 810c2d8:	d1ca      	bne.n	810c270 <_strtod_l+0x30>
 810c2da:	2101      	movs	r1, #1
 810c2dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 810c2de:	1c51      	adds	r1, r2, #1
 810c2e0:	9119      	str	r1, [sp, #100]	@ 0x64
 810c2e2:	7852      	ldrb	r2, [r2, #1]
 810c2e4:	2a00      	cmp	r2, #0
 810c2e6:	d1c5      	bne.n	810c274 <_strtod_l+0x34>
 810c2e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810c2ea:	9419      	str	r4, [sp, #100]	@ 0x64
 810c2ec:	2b00      	cmp	r3, #0
 810c2ee:	f040 8570 	bne.w	810cdd2 <_strtod_l+0xb92>
 810c2f2:	4652      	mov	r2, sl
 810c2f4:	465b      	mov	r3, fp
 810c2f6:	e7e5      	b.n	810c2c4 <_strtod_l+0x84>
 810c2f8:	2100      	movs	r1, #0
 810c2fa:	e7ef      	b.n	810c2dc <_strtod_l+0x9c>
 810c2fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810c2fe:	b13a      	cbz	r2, 810c310 <_strtod_l+0xd0>
 810c300:	2135      	movs	r1, #53	@ 0x35
 810c302:	a81c      	add	r0, sp, #112	@ 0x70
 810c304:	f7ff ff3a 	bl	810c17c <__copybits>
 810c308:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810c30a:	9805      	ldr	r0, [sp, #20]
 810c30c:	f7ff fb08 	bl	810b920 <_Bfree>
 810c310:	3e01      	subs	r6, #1
 810c312:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 810c314:	2e04      	cmp	r6, #4
 810c316:	d806      	bhi.n	810c326 <_strtod_l+0xe6>
 810c318:	e8df f006 	tbb	[pc, r6]
 810c31c:	201d0314 	.word	0x201d0314
 810c320:	14          	.byte	0x14
 810c321:	00          	.byte	0x00
 810c322:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 810c326:	05e1      	lsls	r1, r4, #23
 810c328:	bf48      	it	mi
 810c32a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 810c32e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810c332:	0d1b      	lsrs	r3, r3, #20
 810c334:	051b      	lsls	r3, r3, #20
 810c336:	2b00      	cmp	r3, #0
 810c338:	d1bb      	bne.n	810c2b2 <_strtod_l+0x72>
 810c33a:	f7fe fb0b 	bl	810a954 <__errno>
 810c33e:	2322      	movs	r3, #34	@ 0x22
 810c340:	6003      	str	r3, [r0, #0]
 810c342:	e7b6      	b.n	810c2b2 <_strtod_l+0x72>
 810c344:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 810c348:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 810c34c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 810c350:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810c354:	e7e7      	b.n	810c326 <_strtod_l+0xe6>
 810c356:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 810c4d4 <_strtod_l+0x294>
 810c35a:	e7e4      	b.n	810c326 <_strtod_l+0xe6>
 810c35c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 810c360:	f04f 3aff 	mov.w	sl, #4294967295
 810c364:	e7df      	b.n	810c326 <_strtod_l+0xe6>
 810c366:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c368:	1c5a      	adds	r2, r3, #1
 810c36a:	9219      	str	r2, [sp, #100]	@ 0x64
 810c36c:	785b      	ldrb	r3, [r3, #1]
 810c36e:	2b30      	cmp	r3, #48	@ 0x30
 810c370:	d0f9      	beq.n	810c366 <_strtod_l+0x126>
 810c372:	2b00      	cmp	r3, #0
 810c374:	d09d      	beq.n	810c2b2 <_strtod_l+0x72>
 810c376:	2301      	movs	r3, #1
 810c378:	9309      	str	r3, [sp, #36]	@ 0x24
 810c37a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c37c:	930c      	str	r3, [sp, #48]	@ 0x30
 810c37e:	2300      	movs	r3, #0
 810c380:	9308      	str	r3, [sp, #32]
 810c382:	930a      	str	r3, [sp, #40]	@ 0x28
 810c384:	461f      	mov	r7, r3
 810c386:	220a      	movs	r2, #10
 810c388:	9819      	ldr	r0, [sp, #100]	@ 0x64
 810c38a:	7805      	ldrb	r5, [r0, #0]
 810c38c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 810c390:	b2d9      	uxtb	r1, r3
 810c392:	2909      	cmp	r1, #9
 810c394:	d928      	bls.n	810c3e8 <_strtod_l+0x1a8>
 810c396:	494e      	ldr	r1, [pc, #312]	@ (810c4d0 <_strtod_l+0x290>)
 810c398:	2201      	movs	r2, #1
 810c39a:	f001 f979 	bl	810d690 <strncmp>
 810c39e:	2800      	cmp	r0, #0
 810c3a0:	d032      	beq.n	810c408 <_strtod_l+0x1c8>
 810c3a2:	2000      	movs	r0, #0
 810c3a4:	462a      	mov	r2, r5
 810c3a6:	4681      	mov	r9, r0
 810c3a8:	463d      	mov	r5, r7
 810c3aa:	4603      	mov	r3, r0
 810c3ac:	2a65      	cmp	r2, #101	@ 0x65
 810c3ae:	d001      	beq.n	810c3b4 <_strtod_l+0x174>
 810c3b0:	2a45      	cmp	r2, #69	@ 0x45
 810c3b2:	d114      	bne.n	810c3de <_strtod_l+0x19e>
 810c3b4:	b91d      	cbnz	r5, 810c3be <_strtod_l+0x17e>
 810c3b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810c3b8:	4302      	orrs	r2, r0
 810c3ba:	d095      	beq.n	810c2e8 <_strtod_l+0xa8>
 810c3bc:	2500      	movs	r5, #0
 810c3be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 810c3c0:	1c62      	adds	r2, r4, #1
 810c3c2:	9219      	str	r2, [sp, #100]	@ 0x64
 810c3c4:	7862      	ldrb	r2, [r4, #1]
 810c3c6:	2a2b      	cmp	r2, #43	@ 0x2b
 810c3c8:	d077      	beq.n	810c4ba <_strtod_l+0x27a>
 810c3ca:	2a2d      	cmp	r2, #45	@ 0x2d
 810c3cc:	d07b      	beq.n	810c4c6 <_strtod_l+0x286>
 810c3ce:	f04f 0c00 	mov.w	ip, #0
 810c3d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 810c3d6:	2909      	cmp	r1, #9
 810c3d8:	f240 8082 	bls.w	810c4e0 <_strtod_l+0x2a0>
 810c3dc:	9419      	str	r4, [sp, #100]	@ 0x64
 810c3de:	f04f 0800 	mov.w	r8, #0
 810c3e2:	e0a2      	b.n	810c52a <_strtod_l+0x2ea>
 810c3e4:	2300      	movs	r3, #0
 810c3e6:	e7c7      	b.n	810c378 <_strtod_l+0x138>
 810c3e8:	2f08      	cmp	r7, #8
 810c3ea:	bfd5      	itete	le
 810c3ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 810c3ee:	9908      	ldrgt	r1, [sp, #32]
 810c3f0:	fb02 3301 	mlale	r3, r2, r1, r3
 810c3f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 810c3f8:	f100 0001 	add.w	r0, r0, #1
 810c3fc:	bfd4      	ite	le
 810c3fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 810c400:	9308      	strgt	r3, [sp, #32]
 810c402:	3701      	adds	r7, #1
 810c404:	9019      	str	r0, [sp, #100]	@ 0x64
 810c406:	e7bf      	b.n	810c388 <_strtod_l+0x148>
 810c408:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c40a:	1c5a      	adds	r2, r3, #1
 810c40c:	9219      	str	r2, [sp, #100]	@ 0x64
 810c40e:	785a      	ldrb	r2, [r3, #1]
 810c410:	b37f      	cbz	r7, 810c472 <_strtod_l+0x232>
 810c412:	4681      	mov	r9, r0
 810c414:	463d      	mov	r5, r7
 810c416:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 810c41a:	2b09      	cmp	r3, #9
 810c41c:	d912      	bls.n	810c444 <_strtod_l+0x204>
 810c41e:	2301      	movs	r3, #1
 810c420:	e7c4      	b.n	810c3ac <_strtod_l+0x16c>
 810c422:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c424:	1c5a      	adds	r2, r3, #1
 810c426:	9219      	str	r2, [sp, #100]	@ 0x64
 810c428:	785a      	ldrb	r2, [r3, #1]
 810c42a:	3001      	adds	r0, #1
 810c42c:	2a30      	cmp	r2, #48	@ 0x30
 810c42e:	d0f8      	beq.n	810c422 <_strtod_l+0x1e2>
 810c430:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 810c434:	2b08      	cmp	r3, #8
 810c436:	f200 84d3 	bhi.w	810cde0 <_strtod_l+0xba0>
 810c43a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c43c:	930c      	str	r3, [sp, #48]	@ 0x30
 810c43e:	4681      	mov	r9, r0
 810c440:	2000      	movs	r0, #0
 810c442:	4605      	mov	r5, r0
 810c444:	3a30      	subs	r2, #48	@ 0x30
 810c446:	f100 0301 	add.w	r3, r0, #1
 810c44a:	d02a      	beq.n	810c4a2 <_strtod_l+0x262>
 810c44c:	4499      	add	r9, r3
 810c44e:	eb00 0c05 	add.w	ip, r0, r5
 810c452:	462b      	mov	r3, r5
 810c454:	210a      	movs	r1, #10
 810c456:	4563      	cmp	r3, ip
 810c458:	d10d      	bne.n	810c476 <_strtod_l+0x236>
 810c45a:	1c69      	adds	r1, r5, #1
 810c45c:	4401      	add	r1, r0
 810c45e:	4428      	add	r0, r5
 810c460:	2808      	cmp	r0, #8
 810c462:	dc16      	bgt.n	810c492 <_strtod_l+0x252>
 810c464:	980a      	ldr	r0, [sp, #40]	@ 0x28
 810c466:	230a      	movs	r3, #10
 810c468:	fb03 2300 	mla	r3, r3, r0, r2
 810c46c:	930a      	str	r3, [sp, #40]	@ 0x28
 810c46e:	2300      	movs	r3, #0
 810c470:	e018      	b.n	810c4a4 <_strtod_l+0x264>
 810c472:	4638      	mov	r0, r7
 810c474:	e7da      	b.n	810c42c <_strtod_l+0x1ec>
 810c476:	2b08      	cmp	r3, #8
 810c478:	f103 0301 	add.w	r3, r3, #1
 810c47c:	dc03      	bgt.n	810c486 <_strtod_l+0x246>
 810c47e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 810c480:	434e      	muls	r6, r1
 810c482:	960a      	str	r6, [sp, #40]	@ 0x28
 810c484:	e7e7      	b.n	810c456 <_strtod_l+0x216>
 810c486:	2b10      	cmp	r3, #16
 810c488:	bfde      	ittt	le
 810c48a:	9e08      	ldrle	r6, [sp, #32]
 810c48c:	434e      	mulle	r6, r1
 810c48e:	9608      	strle	r6, [sp, #32]
 810c490:	e7e1      	b.n	810c456 <_strtod_l+0x216>
 810c492:	280f      	cmp	r0, #15
 810c494:	dceb      	bgt.n	810c46e <_strtod_l+0x22e>
 810c496:	9808      	ldr	r0, [sp, #32]
 810c498:	230a      	movs	r3, #10
 810c49a:	fb03 2300 	mla	r3, r3, r0, r2
 810c49e:	9308      	str	r3, [sp, #32]
 810c4a0:	e7e5      	b.n	810c46e <_strtod_l+0x22e>
 810c4a2:	4629      	mov	r1, r5
 810c4a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810c4a6:	1c50      	adds	r0, r2, #1
 810c4a8:	9019      	str	r0, [sp, #100]	@ 0x64
 810c4aa:	7852      	ldrb	r2, [r2, #1]
 810c4ac:	4618      	mov	r0, r3
 810c4ae:	460d      	mov	r5, r1
 810c4b0:	e7b1      	b.n	810c416 <_strtod_l+0x1d6>
 810c4b2:	f04f 0900 	mov.w	r9, #0
 810c4b6:	2301      	movs	r3, #1
 810c4b8:	e77d      	b.n	810c3b6 <_strtod_l+0x176>
 810c4ba:	f04f 0c00 	mov.w	ip, #0
 810c4be:	1ca2      	adds	r2, r4, #2
 810c4c0:	9219      	str	r2, [sp, #100]	@ 0x64
 810c4c2:	78a2      	ldrb	r2, [r4, #2]
 810c4c4:	e785      	b.n	810c3d2 <_strtod_l+0x192>
 810c4c6:	f04f 0c01 	mov.w	ip, #1
 810c4ca:	e7f8      	b.n	810c4be <_strtod_l+0x27e>
 810c4cc:	0810ed08 	.word	0x0810ed08
 810c4d0:	0810ecf0 	.word	0x0810ecf0
 810c4d4:	7ff00000 	.word	0x7ff00000
 810c4d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810c4da:	1c51      	adds	r1, r2, #1
 810c4dc:	9119      	str	r1, [sp, #100]	@ 0x64
 810c4de:	7852      	ldrb	r2, [r2, #1]
 810c4e0:	2a30      	cmp	r2, #48	@ 0x30
 810c4e2:	d0f9      	beq.n	810c4d8 <_strtod_l+0x298>
 810c4e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 810c4e8:	2908      	cmp	r1, #8
 810c4ea:	f63f af78 	bhi.w	810c3de <_strtod_l+0x19e>
 810c4ee:	3a30      	subs	r2, #48	@ 0x30
 810c4f0:	920e      	str	r2, [sp, #56]	@ 0x38
 810c4f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810c4f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 810c4f6:	f04f 080a 	mov.w	r8, #10
 810c4fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810c4fc:	1c56      	adds	r6, r2, #1
 810c4fe:	9619      	str	r6, [sp, #100]	@ 0x64
 810c500:	7852      	ldrb	r2, [r2, #1]
 810c502:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 810c506:	f1be 0f09 	cmp.w	lr, #9
 810c50a:	d939      	bls.n	810c580 <_strtod_l+0x340>
 810c50c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 810c50e:	1a76      	subs	r6, r6, r1
 810c510:	2e08      	cmp	r6, #8
 810c512:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 810c516:	dc03      	bgt.n	810c520 <_strtod_l+0x2e0>
 810c518:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810c51a:	4588      	cmp	r8, r1
 810c51c:	bfa8      	it	ge
 810c51e:	4688      	movge	r8, r1
 810c520:	f1bc 0f00 	cmp.w	ip, #0
 810c524:	d001      	beq.n	810c52a <_strtod_l+0x2ea>
 810c526:	f1c8 0800 	rsb	r8, r8, #0
 810c52a:	2d00      	cmp	r5, #0
 810c52c:	d14e      	bne.n	810c5cc <_strtod_l+0x38c>
 810c52e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810c530:	4308      	orrs	r0, r1
 810c532:	f47f aebe 	bne.w	810c2b2 <_strtod_l+0x72>
 810c536:	2b00      	cmp	r3, #0
 810c538:	f47f aed6 	bne.w	810c2e8 <_strtod_l+0xa8>
 810c53c:	2a69      	cmp	r2, #105	@ 0x69
 810c53e:	d028      	beq.n	810c592 <_strtod_l+0x352>
 810c540:	dc25      	bgt.n	810c58e <_strtod_l+0x34e>
 810c542:	2a49      	cmp	r2, #73	@ 0x49
 810c544:	d025      	beq.n	810c592 <_strtod_l+0x352>
 810c546:	2a4e      	cmp	r2, #78	@ 0x4e
 810c548:	f47f aece 	bne.w	810c2e8 <_strtod_l+0xa8>
 810c54c:	499b      	ldr	r1, [pc, #620]	@ (810c7bc <_strtod_l+0x57c>)
 810c54e:	a819      	add	r0, sp, #100	@ 0x64
 810c550:	f001 fbcc 	bl	810dcec <__match>
 810c554:	2800      	cmp	r0, #0
 810c556:	f43f aec7 	beq.w	810c2e8 <_strtod_l+0xa8>
 810c55a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c55c:	781b      	ldrb	r3, [r3, #0]
 810c55e:	2b28      	cmp	r3, #40	@ 0x28
 810c560:	d12e      	bne.n	810c5c0 <_strtod_l+0x380>
 810c562:	4997      	ldr	r1, [pc, #604]	@ (810c7c0 <_strtod_l+0x580>)
 810c564:	aa1c      	add	r2, sp, #112	@ 0x70
 810c566:	a819      	add	r0, sp, #100	@ 0x64
 810c568:	f001 fbd4 	bl	810dd14 <__hexnan>
 810c56c:	2805      	cmp	r0, #5
 810c56e:	d127      	bne.n	810c5c0 <_strtod_l+0x380>
 810c570:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 810c572:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 810c576:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 810c57a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 810c57e:	e698      	b.n	810c2b2 <_strtod_l+0x72>
 810c580:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810c582:	fb08 2101 	mla	r1, r8, r1, r2
 810c586:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 810c58a:	920e      	str	r2, [sp, #56]	@ 0x38
 810c58c:	e7b5      	b.n	810c4fa <_strtod_l+0x2ba>
 810c58e:	2a6e      	cmp	r2, #110	@ 0x6e
 810c590:	e7da      	b.n	810c548 <_strtod_l+0x308>
 810c592:	498c      	ldr	r1, [pc, #560]	@ (810c7c4 <_strtod_l+0x584>)
 810c594:	a819      	add	r0, sp, #100	@ 0x64
 810c596:	f001 fba9 	bl	810dcec <__match>
 810c59a:	2800      	cmp	r0, #0
 810c59c:	f43f aea4 	beq.w	810c2e8 <_strtod_l+0xa8>
 810c5a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c5a2:	4989      	ldr	r1, [pc, #548]	@ (810c7c8 <_strtod_l+0x588>)
 810c5a4:	3b01      	subs	r3, #1
 810c5a6:	a819      	add	r0, sp, #100	@ 0x64
 810c5a8:	9319      	str	r3, [sp, #100]	@ 0x64
 810c5aa:	f001 fb9f 	bl	810dcec <__match>
 810c5ae:	b910      	cbnz	r0, 810c5b6 <_strtod_l+0x376>
 810c5b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c5b2:	3301      	adds	r3, #1
 810c5b4:	9319      	str	r3, [sp, #100]	@ 0x64
 810c5b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 810c7d8 <_strtod_l+0x598>
 810c5ba:	f04f 0a00 	mov.w	sl, #0
 810c5be:	e678      	b.n	810c2b2 <_strtod_l+0x72>
 810c5c0:	4882      	ldr	r0, [pc, #520]	@ (810c7cc <_strtod_l+0x58c>)
 810c5c2:	f001 f8ed 	bl	810d7a0 <nan>
 810c5c6:	ec5b ab10 	vmov	sl, fp, d0
 810c5ca:	e672      	b.n	810c2b2 <_strtod_l+0x72>
 810c5cc:	eba8 0309 	sub.w	r3, r8, r9
 810c5d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 810c5d2:	9309      	str	r3, [sp, #36]	@ 0x24
 810c5d4:	2f00      	cmp	r7, #0
 810c5d6:	bf08      	it	eq
 810c5d8:	462f      	moveq	r7, r5
 810c5da:	2d10      	cmp	r5, #16
 810c5dc:	462c      	mov	r4, r5
 810c5de:	bfa8      	it	ge
 810c5e0:	2410      	movge	r4, #16
 810c5e2:	f7f4 f817 	bl	8100614 <__aeabi_ui2d>
 810c5e6:	2d09      	cmp	r5, #9
 810c5e8:	4682      	mov	sl, r0
 810c5ea:	468b      	mov	fp, r1
 810c5ec:	dc13      	bgt.n	810c616 <_strtod_l+0x3d6>
 810c5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c5f0:	2b00      	cmp	r3, #0
 810c5f2:	f43f ae5e 	beq.w	810c2b2 <_strtod_l+0x72>
 810c5f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c5f8:	dd78      	ble.n	810c6ec <_strtod_l+0x4ac>
 810c5fa:	2b16      	cmp	r3, #22
 810c5fc:	dc5f      	bgt.n	810c6be <_strtod_l+0x47e>
 810c5fe:	4974      	ldr	r1, [pc, #464]	@ (810c7d0 <_strtod_l+0x590>)
 810c600:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810c604:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c608:	4652      	mov	r2, sl
 810c60a:	465b      	mov	r3, fp
 810c60c:	f7f4 f87c 	bl	8100708 <__aeabi_dmul>
 810c610:	4682      	mov	sl, r0
 810c612:	468b      	mov	fp, r1
 810c614:	e64d      	b.n	810c2b2 <_strtod_l+0x72>
 810c616:	4b6e      	ldr	r3, [pc, #440]	@ (810c7d0 <_strtod_l+0x590>)
 810c618:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810c61c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 810c620:	f7f4 f872 	bl	8100708 <__aeabi_dmul>
 810c624:	4682      	mov	sl, r0
 810c626:	9808      	ldr	r0, [sp, #32]
 810c628:	468b      	mov	fp, r1
 810c62a:	f7f3 fff3 	bl	8100614 <__aeabi_ui2d>
 810c62e:	4602      	mov	r2, r0
 810c630:	460b      	mov	r3, r1
 810c632:	4650      	mov	r0, sl
 810c634:	4659      	mov	r1, fp
 810c636:	f7f3 feb1 	bl	810039c <__adddf3>
 810c63a:	2d0f      	cmp	r5, #15
 810c63c:	4682      	mov	sl, r0
 810c63e:	468b      	mov	fp, r1
 810c640:	ddd5      	ble.n	810c5ee <_strtod_l+0x3ae>
 810c642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c644:	1b2c      	subs	r4, r5, r4
 810c646:	441c      	add	r4, r3
 810c648:	2c00      	cmp	r4, #0
 810c64a:	f340 8096 	ble.w	810c77a <_strtod_l+0x53a>
 810c64e:	f014 030f 	ands.w	r3, r4, #15
 810c652:	d00a      	beq.n	810c66a <_strtod_l+0x42a>
 810c654:	495e      	ldr	r1, [pc, #376]	@ (810c7d0 <_strtod_l+0x590>)
 810c656:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810c65a:	4652      	mov	r2, sl
 810c65c:	465b      	mov	r3, fp
 810c65e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c662:	f7f4 f851 	bl	8100708 <__aeabi_dmul>
 810c666:	4682      	mov	sl, r0
 810c668:	468b      	mov	fp, r1
 810c66a:	f034 040f 	bics.w	r4, r4, #15
 810c66e:	d073      	beq.n	810c758 <_strtod_l+0x518>
 810c670:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 810c674:	dd48      	ble.n	810c708 <_strtod_l+0x4c8>
 810c676:	2400      	movs	r4, #0
 810c678:	46a0      	mov	r8, r4
 810c67a:	940a      	str	r4, [sp, #40]	@ 0x28
 810c67c:	46a1      	mov	r9, r4
 810c67e:	9a05      	ldr	r2, [sp, #20]
 810c680:	f8df b154 	ldr.w	fp, [pc, #340]	@ 810c7d8 <_strtod_l+0x598>
 810c684:	2322      	movs	r3, #34	@ 0x22
 810c686:	6013      	str	r3, [r2, #0]
 810c688:	f04f 0a00 	mov.w	sl, #0
 810c68c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810c68e:	2b00      	cmp	r3, #0
 810c690:	f43f ae0f 	beq.w	810c2b2 <_strtod_l+0x72>
 810c694:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810c696:	9805      	ldr	r0, [sp, #20]
 810c698:	f7ff f942 	bl	810b920 <_Bfree>
 810c69c:	9805      	ldr	r0, [sp, #20]
 810c69e:	4649      	mov	r1, r9
 810c6a0:	f7ff f93e 	bl	810b920 <_Bfree>
 810c6a4:	9805      	ldr	r0, [sp, #20]
 810c6a6:	4641      	mov	r1, r8
 810c6a8:	f7ff f93a 	bl	810b920 <_Bfree>
 810c6ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810c6ae:	9805      	ldr	r0, [sp, #20]
 810c6b0:	f7ff f936 	bl	810b920 <_Bfree>
 810c6b4:	9805      	ldr	r0, [sp, #20]
 810c6b6:	4621      	mov	r1, r4
 810c6b8:	f7ff f932 	bl	810b920 <_Bfree>
 810c6bc:	e5f9      	b.n	810c2b2 <_strtod_l+0x72>
 810c6be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810c6c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 810c6c4:	4293      	cmp	r3, r2
 810c6c6:	dbbc      	blt.n	810c642 <_strtod_l+0x402>
 810c6c8:	4c41      	ldr	r4, [pc, #260]	@ (810c7d0 <_strtod_l+0x590>)
 810c6ca:	f1c5 050f 	rsb	r5, r5, #15
 810c6ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810c6d2:	4652      	mov	r2, sl
 810c6d4:	465b      	mov	r3, fp
 810c6d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c6da:	f7f4 f815 	bl	8100708 <__aeabi_dmul>
 810c6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c6e0:	1b5d      	subs	r5, r3, r5
 810c6e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810c6e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 810c6ea:	e78f      	b.n	810c60c <_strtod_l+0x3cc>
 810c6ec:	3316      	adds	r3, #22
 810c6ee:	dba8      	blt.n	810c642 <_strtod_l+0x402>
 810c6f0:	4b37      	ldr	r3, [pc, #220]	@ (810c7d0 <_strtod_l+0x590>)
 810c6f2:	eba9 0808 	sub.w	r8, r9, r8
 810c6f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 810c6fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 810c6fe:	4650      	mov	r0, sl
 810c700:	4659      	mov	r1, fp
 810c702:	f7f4 f92b 	bl	810095c <__aeabi_ddiv>
 810c706:	e783      	b.n	810c610 <_strtod_l+0x3d0>
 810c708:	4b32      	ldr	r3, [pc, #200]	@ (810c7d4 <_strtod_l+0x594>)
 810c70a:	9308      	str	r3, [sp, #32]
 810c70c:	2300      	movs	r3, #0
 810c70e:	1124      	asrs	r4, r4, #4
 810c710:	4650      	mov	r0, sl
 810c712:	4659      	mov	r1, fp
 810c714:	461e      	mov	r6, r3
 810c716:	2c01      	cmp	r4, #1
 810c718:	dc21      	bgt.n	810c75e <_strtod_l+0x51e>
 810c71a:	b10b      	cbz	r3, 810c720 <_strtod_l+0x4e0>
 810c71c:	4682      	mov	sl, r0
 810c71e:	468b      	mov	fp, r1
 810c720:	492c      	ldr	r1, [pc, #176]	@ (810c7d4 <_strtod_l+0x594>)
 810c722:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 810c726:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 810c72a:	4652      	mov	r2, sl
 810c72c:	465b      	mov	r3, fp
 810c72e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c732:	f7f3 ffe9 	bl	8100708 <__aeabi_dmul>
 810c736:	4b28      	ldr	r3, [pc, #160]	@ (810c7d8 <_strtod_l+0x598>)
 810c738:	460a      	mov	r2, r1
 810c73a:	400b      	ands	r3, r1
 810c73c:	4927      	ldr	r1, [pc, #156]	@ (810c7dc <_strtod_l+0x59c>)
 810c73e:	428b      	cmp	r3, r1
 810c740:	4682      	mov	sl, r0
 810c742:	d898      	bhi.n	810c676 <_strtod_l+0x436>
 810c744:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 810c748:	428b      	cmp	r3, r1
 810c74a:	bf86      	itte	hi
 810c74c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 810c7e0 <_strtod_l+0x5a0>
 810c750:	f04f 3aff 	movhi.w	sl, #4294967295
 810c754:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 810c758:	2300      	movs	r3, #0
 810c75a:	9308      	str	r3, [sp, #32]
 810c75c:	e07a      	b.n	810c854 <_strtod_l+0x614>
 810c75e:	07e2      	lsls	r2, r4, #31
 810c760:	d505      	bpl.n	810c76e <_strtod_l+0x52e>
 810c762:	9b08      	ldr	r3, [sp, #32]
 810c764:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c768:	f7f3 ffce 	bl	8100708 <__aeabi_dmul>
 810c76c:	2301      	movs	r3, #1
 810c76e:	9a08      	ldr	r2, [sp, #32]
 810c770:	3208      	adds	r2, #8
 810c772:	3601      	adds	r6, #1
 810c774:	1064      	asrs	r4, r4, #1
 810c776:	9208      	str	r2, [sp, #32]
 810c778:	e7cd      	b.n	810c716 <_strtod_l+0x4d6>
 810c77a:	d0ed      	beq.n	810c758 <_strtod_l+0x518>
 810c77c:	4264      	negs	r4, r4
 810c77e:	f014 020f 	ands.w	r2, r4, #15
 810c782:	d00a      	beq.n	810c79a <_strtod_l+0x55a>
 810c784:	4b12      	ldr	r3, [pc, #72]	@ (810c7d0 <_strtod_l+0x590>)
 810c786:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810c78a:	4650      	mov	r0, sl
 810c78c:	4659      	mov	r1, fp
 810c78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c792:	f7f4 f8e3 	bl	810095c <__aeabi_ddiv>
 810c796:	4682      	mov	sl, r0
 810c798:	468b      	mov	fp, r1
 810c79a:	1124      	asrs	r4, r4, #4
 810c79c:	d0dc      	beq.n	810c758 <_strtod_l+0x518>
 810c79e:	2c1f      	cmp	r4, #31
 810c7a0:	dd20      	ble.n	810c7e4 <_strtod_l+0x5a4>
 810c7a2:	2400      	movs	r4, #0
 810c7a4:	46a0      	mov	r8, r4
 810c7a6:	940a      	str	r4, [sp, #40]	@ 0x28
 810c7a8:	46a1      	mov	r9, r4
 810c7aa:	9a05      	ldr	r2, [sp, #20]
 810c7ac:	2322      	movs	r3, #34	@ 0x22
 810c7ae:	f04f 0a00 	mov.w	sl, #0
 810c7b2:	f04f 0b00 	mov.w	fp, #0
 810c7b6:	6013      	str	r3, [r2, #0]
 810c7b8:	e768      	b.n	810c68c <_strtod_l+0x44c>
 810c7ba:	bf00      	nop
 810c7bc:	0810eae1 	.word	0x0810eae1
 810c7c0:	0810ecf4 	.word	0x0810ecf4
 810c7c4:	0810ead9 	.word	0x0810ead9
 810c7c8:	0810eb10 	.word	0x0810eb10
 810c7cc:	0810ead3 	.word	0x0810ead3
 810c7d0:	0810ec28 	.word	0x0810ec28
 810c7d4:	0810ec00 	.word	0x0810ec00
 810c7d8:	7ff00000 	.word	0x7ff00000
 810c7dc:	7ca00000 	.word	0x7ca00000
 810c7e0:	7fefffff 	.word	0x7fefffff
 810c7e4:	f014 0310 	ands.w	r3, r4, #16
 810c7e8:	bf18      	it	ne
 810c7ea:	236a      	movne	r3, #106	@ 0x6a
 810c7ec:	4ea9      	ldr	r6, [pc, #676]	@ (810ca94 <_strtod_l+0x854>)
 810c7ee:	9308      	str	r3, [sp, #32]
 810c7f0:	4650      	mov	r0, sl
 810c7f2:	4659      	mov	r1, fp
 810c7f4:	2300      	movs	r3, #0
 810c7f6:	07e2      	lsls	r2, r4, #31
 810c7f8:	d504      	bpl.n	810c804 <_strtod_l+0x5c4>
 810c7fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 810c7fe:	f7f3 ff83 	bl	8100708 <__aeabi_dmul>
 810c802:	2301      	movs	r3, #1
 810c804:	1064      	asrs	r4, r4, #1
 810c806:	f106 0608 	add.w	r6, r6, #8
 810c80a:	d1f4      	bne.n	810c7f6 <_strtod_l+0x5b6>
 810c80c:	b10b      	cbz	r3, 810c812 <_strtod_l+0x5d2>
 810c80e:	4682      	mov	sl, r0
 810c810:	468b      	mov	fp, r1
 810c812:	9b08      	ldr	r3, [sp, #32]
 810c814:	b1b3      	cbz	r3, 810c844 <_strtod_l+0x604>
 810c816:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810c81a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 810c81e:	2b00      	cmp	r3, #0
 810c820:	4659      	mov	r1, fp
 810c822:	dd0f      	ble.n	810c844 <_strtod_l+0x604>
 810c824:	2b1f      	cmp	r3, #31
 810c826:	dd55      	ble.n	810c8d4 <_strtod_l+0x694>
 810c828:	2b34      	cmp	r3, #52	@ 0x34
 810c82a:	bfde      	ittt	le
 810c82c:	f04f 33ff 	movle.w	r3, #4294967295
 810c830:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 810c834:	4093      	lslle	r3, r2
 810c836:	f04f 0a00 	mov.w	sl, #0
 810c83a:	bfcc      	ite	gt
 810c83c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 810c840:	ea03 0b01 	andle.w	fp, r3, r1
 810c844:	2200      	movs	r2, #0
 810c846:	2300      	movs	r3, #0
 810c848:	4650      	mov	r0, sl
 810c84a:	4659      	mov	r1, fp
 810c84c:	f7f4 f9c4 	bl	8100bd8 <__aeabi_dcmpeq>
 810c850:	2800      	cmp	r0, #0
 810c852:	d1a6      	bne.n	810c7a2 <_strtod_l+0x562>
 810c854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810c856:	9300      	str	r3, [sp, #0]
 810c858:	990c      	ldr	r1, [sp, #48]	@ 0x30
 810c85a:	9805      	ldr	r0, [sp, #20]
 810c85c:	462b      	mov	r3, r5
 810c85e:	463a      	mov	r2, r7
 810c860:	f7ff f8c6 	bl	810b9f0 <__s2b>
 810c864:	900a      	str	r0, [sp, #40]	@ 0x28
 810c866:	2800      	cmp	r0, #0
 810c868:	f43f af05 	beq.w	810c676 <_strtod_l+0x436>
 810c86c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810c86e:	2a00      	cmp	r2, #0
 810c870:	eba9 0308 	sub.w	r3, r9, r8
 810c874:	bfa8      	it	ge
 810c876:	2300      	movge	r3, #0
 810c878:	9312      	str	r3, [sp, #72]	@ 0x48
 810c87a:	2400      	movs	r4, #0
 810c87c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810c880:	9316      	str	r3, [sp, #88]	@ 0x58
 810c882:	46a0      	mov	r8, r4
 810c884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810c886:	9805      	ldr	r0, [sp, #20]
 810c888:	6859      	ldr	r1, [r3, #4]
 810c88a:	f7ff f809 	bl	810b8a0 <_Balloc>
 810c88e:	4681      	mov	r9, r0
 810c890:	2800      	cmp	r0, #0
 810c892:	f43f aef4 	beq.w	810c67e <_strtod_l+0x43e>
 810c896:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810c898:	691a      	ldr	r2, [r3, #16]
 810c89a:	3202      	adds	r2, #2
 810c89c:	f103 010c 	add.w	r1, r3, #12
 810c8a0:	0092      	lsls	r2, r2, #2
 810c8a2:	300c      	adds	r0, #12
 810c8a4:	f7fe f883 	bl	810a9ae <memcpy>
 810c8a8:	ec4b ab10 	vmov	d0, sl, fp
 810c8ac:	9805      	ldr	r0, [sp, #20]
 810c8ae:	aa1c      	add	r2, sp, #112	@ 0x70
 810c8b0:	a91b      	add	r1, sp, #108	@ 0x6c
 810c8b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 810c8b6:	f7ff fbd7 	bl	810c068 <__d2b>
 810c8ba:	901a      	str	r0, [sp, #104]	@ 0x68
 810c8bc:	2800      	cmp	r0, #0
 810c8be:	f43f aede 	beq.w	810c67e <_strtod_l+0x43e>
 810c8c2:	9805      	ldr	r0, [sp, #20]
 810c8c4:	2101      	movs	r1, #1
 810c8c6:	f7ff f929 	bl	810bb1c <__i2b>
 810c8ca:	4680      	mov	r8, r0
 810c8cc:	b948      	cbnz	r0, 810c8e2 <_strtod_l+0x6a2>
 810c8ce:	f04f 0800 	mov.w	r8, #0
 810c8d2:	e6d4      	b.n	810c67e <_strtod_l+0x43e>
 810c8d4:	f04f 32ff 	mov.w	r2, #4294967295
 810c8d8:	fa02 f303 	lsl.w	r3, r2, r3
 810c8dc:	ea03 0a0a 	and.w	sl, r3, sl
 810c8e0:	e7b0      	b.n	810c844 <_strtod_l+0x604>
 810c8e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 810c8e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 810c8e6:	2d00      	cmp	r5, #0
 810c8e8:	bfab      	itete	ge
 810c8ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 810c8ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 810c8ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 810c8f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 810c8f2:	bfac      	ite	ge
 810c8f4:	18ef      	addge	r7, r5, r3
 810c8f6:	1b5e      	sublt	r6, r3, r5
 810c8f8:	9b08      	ldr	r3, [sp, #32]
 810c8fa:	1aed      	subs	r5, r5, r3
 810c8fc:	4415      	add	r5, r2
 810c8fe:	4b66      	ldr	r3, [pc, #408]	@ (810ca98 <_strtod_l+0x858>)
 810c900:	3d01      	subs	r5, #1
 810c902:	429d      	cmp	r5, r3
 810c904:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 810c908:	da50      	bge.n	810c9ac <_strtod_l+0x76c>
 810c90a:	1b5b      	subs	r3, r3, r5
 810c90c:	2b1f      	cmp	r3, #31
 810c90e:	eba2 0203 	sub.w	r2, r2, r3
 810c912:	f04f 0101 	mov.w	r1, #1
 810c916:	dc3d      	bgt.n	810c994 <_strtod_l+0x754>
 810c918:	fa01 f303 	lsl.w	r3, r1, r3
 810c91c:	9313      	str	r3, [sp, #76]	@ 0x4c
 810c91e:	2300      	movs	r3, #0
 810c920:	9310      	str	r3, [sp, #64]	@ 0x40
 810c922:	18bd      	adds	r5, r7, r2
 810c924:	9b08      	ldr	r3, [sp, #32]
 810c926:	42af      	cmp	r7, r5
 810c928:	4416      	add	r6, r2
 810c92a:	441e      	add	r6, r3
 810c92c:	463b      	mov	r3, r7
 810c92e:	bfa8      	it	ge
 810c930:	462b      	movge	r3, r5
 810c932:	42b3      	cmp	r3, r6
 810c934:	bfa8      	it	ge
 810c936:	4633      	movge	r3, r6
 810c938:	2b00      	cmp	r3, #0
 810c93a:	bfc2      	ittt	gt
 810c93c:	1aed      	subgt	r5, r5, r3
 810c93e:	1af6      	subgt	r6, r6, r3
 810c940:	1aff      	subgt	r7, r7, r3
 810c942:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810c944:	2b00      	cmp	r3, #0
 810c946:	dd16      	ble.n	810c976 <_strtod_l+0x736>
 810c948:	4641      	mov	r1, r8
 810c94a:	9805      	ldr	r0, [sp, #20]
 810c94c:	461a      	mov	r2, r3
 810c94e:	f7ff f9a5 	bl	810bc9c <__pow5mult>
 810c952:	4680      	mov	r8, r0
 810c954:	2800      	cmp	r0, #0
 810c956:	d0ba      	beq.n	810c8ce <_strtod_l+0x68e>
 810c958:	4601      	mov	r1, r0
 810c95a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810c95c:	9805      	ldr	r0, [sp, #20]
 810c95e:	f7ff f8f3 	bl	810bb48 <__multiply>
 810c962:	900e      	str	r0, [sp, #56]	@ 0x38
 810c964:	2800      	cmp	r0, #0
 810c966:	f43f ae8a 	beq.w	810c67e <_strtod_l+0x43e>
 810c96a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810c96c:	9805      	ldr	r0, [sp, #20]
 810c96e:	f7fe ffd7 	bl	810b920 <_Bfree>
 810c972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810c974:	931a      	str	r3, [sp, #104]	@ 0x68
 810c976:	2d00      	cmp	r5, #0
 810c978:	dc1d      	bgt.n	810c9b6 <_strtod_l+0x776>
 810c97a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c97c:	2b00      	cmp	r3, #0
 810c97e:	dd23      	ble.n	810c9c8 <_strtod_l+0x788>
 810c980:	4649      	mov	r1, r9
 810c982:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 810c984:	9805      	ldr	r0, [sp, #20]
 810c986:	f7ff f989 	bl	810bc9c <__pow5mult>
 810c98a:	4681      	mov	r9, r0
 810c98c:	b9e0      	cbnz	r0, 810c9c8 <_strtod_l+0x788>
 810c98e:	f04f 0900 	mov.w	r9, #0
 810c992:	e674      	b.n	810c67e <_strtod_l+0x43e>
 810c994:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 810c998:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 810c99c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 810c9a0:	35e2      	adds	r5, #226	@ 0xe2
 810c9a2:	fa01 f305 	lsl.w	r3, r1, r5
 810c9a6:	9310      	str	r3, [sp, #64]	@ 0x40
 810c9a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 810c9aa:	e7ba      	b.n	810c922 <_strtod_l+0x6e2>
 810c9ac:	2300      	movs	r3, #0
 810c9ae:	9310      	str	r3, [sp, #64]	@ 0x40
 810c9b0:	2301      	movs	r3, #1
 810c9b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 810c9b4:	e7b5      	b.n	810c922 <_strtod_l+0x6e2>
 810c9b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810c9b8:	9805      	ldr	r0, [sp, #20]
 810c9ba:	462a      	mov	r2, r5
 810c9bc:	f7ff f9c8 	bl	810bd50 <__lshift>
 810c9c0:	901a      	str	r0, [sp, #104]	@ 0x68
 810c9c2:	2800      	cmp	r0, #0
 810c9c4:	d1d9      	bne.n	810c97a <_strtod_l+0x73a>
 810c9c6:	e65a      	b.n	810c67e <_strtod_l+0x43e>
 810c9c8:	2e00      	cmp	r6, #0
 810c9ca:	dd07      	ble.n	810c9dc <_strtod_l+0x79c>
 810c9cc:	4649      	mov	r1, r9
 810c9ce:	9805      	ldr	r0, [sp, #20]
 810c9d0:	4632      	mov	r2, r6
 810c9d2:	f7ff f9bd 	bl	810bd50 <__lshift>
 810c9d6:	4681      	mov	r9, r0
 810c9d8:	2800      	cmp	r0, #0
 810c9da:	d0d8      	beq.n	810c98e <_strtod_l+0x74e>
 810c9dc:	2f00      	cmp	r7, #0
 810c9de:	dd08      	ble.n	810c9f2 <_strtod_l+0x7b2>
 810c9e0:	4641      	mov	r1, r8
 810c9e2:	9805      	ldr	r0, [sp, #20]
 810c9e4:	463a      	mov	r2, r7
 810c9e6:	f7ff f9b3 	bl	810bd50 <__lshift>
 810c9ea:	4680      	mov	r8, r0
 810c9ec:	2800      	cmp	r0, #0
 810c9ee:	f43f ae46 	beq.w	810c67e <_strtod_l+0x43e>
 810c9f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810c9f4:	9805      	ldr	r0, [sp, #20]
 810c9f6:	464a      	mov	r2, r9
 810c9f8:	f7ff fa32 	bl	810be60 <__mdiff>
 810c9fc:	4604      	mov	r4, r0
 810c9fe:	2800      	cmp	r0, #0
 810ca00:	f43f ae3d 	beq.w	810c67e <_strtod_l+0x43e>
 810ca04:	68c3      	ldr	r3, [r0, #12]
 810ca06:	930f      	str	r3, [sp, #60]	@ 0x3c
 810ca08:	2300      	movs	r3, #0
 810ca0a:	60c3      	str	r3, [r0, #12]
 810ca0c:	4641      	mov	r1, r8
 810ca0e:	f7ff fa0b 	bl	810be28 <__mcmp>
 810ca12:	2800      	cmp	r0, #0
 810ca14:	da46      	bge.n	810caa4 <_strtod_l+0x864>
 810ca16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810ca18:	ea53 030a 	orrs.w	r3, r3, sl
 810ca1c:	d16c      	bne.n	810caf8 <_strtod_l+0x8b8>
 810ca1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810ca22:	2b00      	cmp	r3, #0
 810ca24:	d168      	bne.n	810caf8 <_strtod_l+0x8b8>
 810ca26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810ca2a:	0d1b      	lsrs	r3, r3, #20
 810ca2c:	051b      	lsls	r3, r3, #20
 810ca2e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810ca32:	d961      	bls.n	810caf8 <_strtod_l+0x8b8>
 810ca34:	6963      	ldr	r3, [r4, #20]
 810ca36:	b913      	cbnz	r3, 810ca3e <_strtod_l+0x7fe>
 810ca38:	6923      	ldr	r3, [r4, #16]
 810ca3a:	2b01      	cmp	r3, #1
 810ca3c:	dd5c      	ble.n	810caf8 <_strtod_l+0x8b8>
 810ca3e:	4621      	mov	r1, r4
 810ca40:	2201      	movs	r2, #1
 810ca42:	9805      	ldr	r0, [sp, #20]
 810ca44:	f7ff f984 	bl	810bd50 <__lshift>
 810ca48:	4641      	mov	r1, r8
 810ca4a:	4604      	mov	r4, r0
 810ca4c:	f7ff f9ec 	bl	810be28 <__mcmp>
 810ca50:	2800      	cmp	r0, #0
 810ca52:	dd51      	ble.n	810caf8 <_strtod_l+0x8b8>
 810ca54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810ca58:	9a08      	ldr	r2, [sp, #32]
 810ca5a:	0d1b      	lsrs	r3, r3, #20
 810ca5c:	051b      	lsls	r3, r3, #20
 810ca5e:	2a00      	cmp	r2, #0
 810ca60:	d06b      	beq.n	810cb3a <_strtod_l+0x8fa>
 810ca62:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810ca66:	d868      	bhi.n	810cb3a <_strtod_l+0x8fa>
 810ca68:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 810ca6c:	f67f ae9d 	bls.w	810c7aa <_strtod_l+0x56a>
 810ca70:	4b0a      	ldr	r3, [pc, #40]	@ (810ca9c <_strtod_l+0x85c>)
 810ca72:	4650      	mov	r0, sl
 810ca74:	4659      	mov	r1, fp
 810ca76:	2200      	movs	r2, #0
 810ca78:	f7f3 fe46 	bl	8100708 <__aeabi_dmul>
 810ca7c:	4b08      	ldr	r3, [pc, #32]	@ (810caa0 <_strtod_l+0x860>)
 810ca7e:	400b      	ands	r3, r1
 810ca80:	4682      	mov	sl, r0
 810ca82:	468b      	mov	fp, r1
 810ca84:	2b00      	cmp	r3, #0
 810ca86:	f47f ae05 	bne.w	810c694 <_strtod_l+0x454>
 810ca8a:	9a05      	ldr	r2, [sp, #20]
 810ca8c:	2322      	movs	r3, #34	@ 0x22
 810ca8e:	6013      	str	r3, [r2, #0]
 810ca90:	e600      	b.n	810c694 <_strtod_l+0x454>
 810ca92:	bf00      	nop
 810ca94:	0810ed20 	.word	0x0810ed20
 810ca98:	fffffc02 	.word	0xfffffc02
 810ca9c:	39500000 	.word	0x39500000
 810caa0:	7ff00000 	.word	0x7ff00000
 810caa4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 810caa8:	d165      	bne.n	810cb76 <_strtod_l+0x936>
 810caaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 810caac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810cab0:	b35a      	cbz	r2, 810cb0a <_strtod_l+0x8ca>
 810cab2:	4a9f      	ldr	r2, [pc, #636]	@ (810cd30 <_strtod_l+0xaf0>)
 810cab4:	4293      	cmp	r3, r2
 810cab6:	d12b      	bne.n	810cb10 <_strtod_l+0x8d0>
 810cab8:	9b08      	ldr	r3, [sp, #32]
 810caba:	4651      	mov	r1, sl
 810cabc:	b303      	cbz	r3, 810cb00 <_strtod_l+0x8c0>
 810cabe:	4b9d      	ldr	r3, [pc, #628]	@ (810cd34 <_strtod_l+0xaf4>)
 810cac0:	465a      	mov	r2, fp
 810cac2:	4013      	ands	r3, r2
 810cac4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 810cac8:	f04f 32ff 	mov.w	r2, #4294967295
 810cacc:	d81b      	bhi.n	810cb06 <_strtod_l+0x8c6>
 810cace:	0d1b      	lsrs	r3, r3, #20
 810cad0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810cad4:	fa02 f303 	lsl.w	r3, r2, r3
 810cad8:	4299      	cmp	r1, r3
 810cada:	d119      	bne.n	810cb10 <_strtod_l+0x8d0>
 810cadc:	4b96      	ldr	r3, [pc, #600]	@ (810cd38 <_strtod_l+0xaf8>)
 810cade:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810cae0:	429a      	cmp	r2, r3
 810cae2:	d102      	bne.n	810caea <_strtod_l+0x8aa>
 810cae4:	3101      	adds	r1, #1
 810cae6:	f43f adca 	beq.w	810c67e <_strtod_l+0x43e>
 810caea:	4b92      	ldr	r3, [pc, #584]	@ (810cd34 <_strtod_l+0xaf4>)
 810caec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810caee:	401a      	ands	r2, r3
 810caf0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 810caf4:	f04f 0a00 	mov.w	sl, #0
 810caf8:	9b08      	ldr	r3, [sp, #32]
 810cafa:	2b00      	cmp	r3, #0
 810cafc:	d1b8      	bne.n	810ca70 <_strtod_l+0x830>
 810cafe:	e5c9      	b.n	810c694 <_strtod_l+0x454>
 810cb00:	f04f 33ff 	mov.w	r3, #4294967295
 810cb04:	e7e8      	b.n	810cad8 <_strtod_l+0x898>
 810cb06:	4613      	mov	r3, r2
 810cb08:	e7e6      	b.n	810cad8 <_strtod_l+0x898>
 810cb0a:	ea53 030a 	orrs.w	r3, r3, sl
 810cb0e:	d0a1      	beq.n	810ca54 <_strtod_l+0x814>
 810cb10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 810cb12:	b1db      	cbz	r3, 810cb4c <_strtod_l+0x90c>
 810cb14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810cb16:	4213      	tst	r3, r2
 810cb18:	d0ee      	beq.n	810caf8 <_strtod_l+0x8b8>
 810cb1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cb1c:	9a08      	ldr	r2, [sp, #32]
 810cb1e:	4650      	mov	r0, sl
 810cb20:	4659      	mov	r1, fp
 810cb22:	b1bb      	cbz	r3, 810cb54 <_strtod_l+0x914>
 810cb24:	f7ff fb6e 	bl	810c204 <sulp>
 810cb28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810cb2c:	ec53 2b10 	vmov	r2, r3, d0
 810cb30:	f7f3 fc34 	bl	810039c <__adddf3>
 810cb34:	4682      	mov	sl, r0
 810cb36:	468b      	mov	fp, r1
 810cb38:	e7de      	b.n	810caf8 <_strtod_l+0x8b8>
 810cb3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 810cb3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810cb42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810cb46:	f04f 3aff 	mov.w	sl, #4294967295
 810cb4a:	e7d5      	b.n	810caf8 <_strtod_l+0x8b8>
 810cb4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810cb4e:	ea13 0f0a 	tst.w	r3, sl
 810cb52:	e7e1      	b.n	810cb18 <_strtod_l+0x8d8>
 810cb54:	f7ff fb56 	bl	810c204 <sulp>
 810cb58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810cb5c:	ec53 2b10 	vmov	r2, r3, d0
 810cb60:	f7f3 fc1a 	bl	8100398 <__aeabi_dsub>
 810cb64:	2200      	movs	r2, #0
 810cb66:	2300      	movs	r3, #0
 810cb68:	4682      	mov	sl, r0
 810cb6a:	468b      	mov	fp, r1
 810cb6c:	f7f4 f834 	bl	8100bd8 <__aeabi_dcmpeq>
 810cb70:	2800      	cmp	r0, #0
 810cb72:	d0c1      	beq.n	810caf8 <_strtod_l+0x8b8>
 810cb74:	e619      	b.n	810c7aa <_strtod_l+0x56a>
 810cb76:	4641      	mov	r1, r8
 810cb78:	4620      	mov	r0, r4
 810cb7a:	f7ff facd 	bl	810c118 <__ratio>
 810cb7e:	ec57 6b10 	vmov	r6, r7, d0
 810cb82:	2200      	movs	r2, #0
 810cb84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 810cb88:	4630      	mov	r0, r6
 810cb8a:	4639      	mov	r1, r7
 810cb8c:	f7f4 f838 	bl	8100c00 <__aeabi_dcmple>
 810cb90:	2800      	cmp	r0, #0
 810cb92:	d06f      	beq.n	810cc74 <_strtod_l+0xa34>
 810cb94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cb96:	2b00      	cmp	r3, #0
 810cb98:	d17a      	bne.n	810cc90 <_strtod_l+0xa50>
 810cb9a:	f1ba 0f00 	cmp.w	sl, #0
 810cb9e:	d158      	bne.n	810cc52 <_strtod_l+0xa12>
 810cba0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810cba2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810cba6:	2b00      	cmp	r3, #0
 810cba8:	d15a      	bne.n	810cc60 <_strtod_l+0xa20>
 810cbaa:	4b64      	ldr	r3, [pc, #400]	@ (810cd3c <_strtod_l+0xafc>)
 810cbac:	2200      	movs	r2, #0
 810cbae:	4630      	mov	r0, r6
 810cbb0:	4639      	mov	r1, r7
 810cbb2:	f7f4 f81b 	bl	8100bec <__aeabi_dcmplt>
 810cbb6:	2800      	cmp	r0, #0
 810cbb8:	d159      	bne.n	810cc6e <_strtod_l+0xa2e>
 810cbba:	4630      	mov	r0, r6
 810cbbc:	4639      	mov	r1, r7
 810cbbe:	4b60      	ldr	r3, [pc, #384]	@ (810cd40 <_strtod_l+0xb00>)
 810cbc0:	2200      	movs	r2, #0
 810cbc2:	f7f3 fda1 	bl	8100708 <__aeabi_dmul>
 810cbc6:	4606      	mov	r6, r0
 810cbc8:	460f      	mov	r7, r1
 810cbca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 810cbce:	9606      	str	r6, [sp, #24]
 810cbd0:	9307      	str	r3, [sp, #28]
 810cbd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810cbd6:	4d57      	ldr	r5, [pc, #348]	@ (810cd34 <_strtod_l+0xaf4>)
 810cbd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 810cbdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810cbde:	401d      	ands	r5, r3
 810cbe0:	4b58      	ldr	r3, [pc, #352]	@ (810cd44 <_strtod_l+0xb04>)
 810cbe2:	429d      	cmp	r5, r3
 810cbe4:	f040 80b2 	bne.w	810cd4c <_strtod_l+0xb0c>
 810cbe8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810cbea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 810cbee:	ec4b ab10 	vmov	d0, sl, fp
 810cbf2:	f7ff f9c9 	bl	810bf88 <__ulp>
 810cbf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810cbfa:	ec51 0b10 	vmov	r0, r1, d0
 810cbfe:	f7f3 fd83 	bl	8100708 <__aeabi_dmul>
 810cc02:	4652      	mov	r2, sl
 810cc04:	465b      	mov	r3, fp
 810cc06:	f7f3 fbc9 	bl	810039c <__adddf3>
 810cc0a:	460b      	mov	r3, r1
 810cc0c:	4949      	ldr	r1, [pc, #292]	@ (810cd34 <_strtod_l+0xaf4>)
 810cc0e:	4a4e      	ldr	r2, [pc, #312]	@ (810cd48 <_strtod_l+0xb08>)
 810cc10:	4019      	ands	r1, r3
 810cc12:	4291      	cmp	r1, r2
 810cc14:	4682      	mov	sl, r0
 810cc16:	d942      	bls.n	810cc9e <_strtod_l+0xa5e>
 810cc18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 810cc1a:	4b47      	ldr	r3, [pc, #284]	@ (810cd38 <_strtod_l+0xaf8>)
 810cc1c:	429a      	cmp	r2, r3
 810cc1e:	d103      	bne.n	810cc28 <_strtod_l+0x9e8>
 810cc20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 810cc22:	3301      	adds	r3, #1
 810cc24:	f43f ad2b 	beq.w	810c67e <_strtod_l+0x43e>
 810cc28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 810cd38 <_strtod_l+0xaf8>
 810cc2c:	f04f 3aff 	mov.w	sl, #4294967295
 810cc30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810cc32:	9805      	ldr	r0, [sp, #20]
 810cc34:	f7fe fe74 	bl	810b920 <_Bfree>
 810cc38:	9805      	ldr	r0, [sp, #20]
 810cc3a:	4649      	mov	r1, r9
 810cc3c:	f7fe fe70 	bl	810b920 <_Bfree>
 810cc40:	9805      	ldr	r0, [sp, #20]
 810cc42:	4641      	mov	r1, r8
 810cc44:	f7fe fe6c 	bl	810b920 <_Bfree>
 810cc48:	9805      	ldr	r0, [sp, #20]
 810cc4a:	4621      	mov	r1, r4
 810cc4c:	f7fe fe68 	bl	810b920 <_Bfree>
 810cc50:	e618      	b.n	810c884 <_strtod_l+0x644>
 810cc52:	f1ba 0f01 	cmp.w	sl, #1
 810cc56:	d103      	bne.n	810cc60 <_strtod_l+0xa20>
 810cc58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810cc5a:	2b00      	cmp	r3, #0
 810cc5c:	f43f ada5 	beq.w	810c7aa <_strtod_l+0x56a>
 810cc60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 810cd10 <_strtod_l+0xad0>
 810cc64:	4f35      	ldr	r7, [pc, #212]	@ (810cd3c <_strtod_l+0xafc>)
 810cc66:	ed8d 7b06 	vstr	d7, [sp, #24]
 810cc6a:	2600      	movs	r6, #0
 810cc6c:	e7b1      	b.n	810cbd2 <_strtod_l+0x992>
 810cc6e:	4f34      	ldr	r7, [pc, #208]	@ (810cd40 <_strtod_l+0xb00>)
 810cc70:	2600      	movs	r6, #0
 810cc72:	e7aa      	b.n	810cbca <_strtod_l+0x98a>
 810cc74:	4b32      	ldr	r3, [pc, #200]	@ (810cd40 <_strtod_l+0xb00>)
 810cc76:	4630      	mov	r0, r6
 810cc78:	4639      	mov	r1, r7
 810cc7a:	2200      	movs	r2, #0
 810cc7c:	f7f3 fd44 	bl	8100708 <__aeabi_dmul>
 810cc80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cc82:	4606      	mov	r6, r0
 810cc84:	460f      	mov	r7, r1
 810cc86:	2b00      	cmp	r3, #0
 810cc88:	d09f      	beq.n	810cbca <_strtod_l+0x98a>
 810cc8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 810cc8e:	e7a0      	b.n	810cbd2 <_strtod_l+0x992>
 810cc90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 810cd18 <_strtod_l+0xad8>
 810cc94:	ed8d 7b06 	vstr	d7, [sp, #24]
 810cc98:	ec57 6b17 	vmov	r6, r7, d7
 810cc9c:	e799      	b.n	810cbd2 <_strtod_l+0x992>
 810cc9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 810cca2:	9b08      	ldr	r3, [sp, #32]
 810cca4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 810cca8:	2b00      	cmp	r3, #0
 810ccaa:	d1c1      	bne.n	810cc30 <_strtod_l+0x9f0>
 810ccac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810ccb0:	0d1b      	lsrs	r3, r3, #20
 810ccb2:	051b      	lsls	r3, r3, #20
 810ccb4:	429d      	cmp	r5, r3
 810ccb6:	d1bb      	bne.n	810cc30 <_strtod_l+0x9f0>
 810ccb8:	4630      	mov	r0, r6
 810ccba:	4639      	mov	r1, r7
 810ccbc:	f7f4 f884 	bl	8100dc8 <__aeabi_d2lz>
 810ccc0:	f7f3 fcf4 	bl	81006ac <__aeabi_l2d>
 810ccc4:	4602      	mov	r2, r0
 810ccc6:	460b      	mov	r3, r1
 810ccc8:	4630      	mov	r0, r6
 810ccca:	4639      	mov	r1, r7
 810cccc:	f7f3 fb64 	bl	8100398 <__aeabi_dsub>
 810ccd0:	460b      	mov	r3, r1
 810ccd2:	4602      	mov	r2, r0
 810ccd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 810ccd8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 810ccdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810ccde:	ea46 060a 	orr.w	r6, r6, sl
 810cce2:	431e      	orrs	r6, r3
 810cce4:	d06f      	beq.n	810cdc6 <_strtod_l+0xb86>
 810cce6:	a30e      	add	r3, pc, #56	@ (adr r3, 810cd20 <_strtod_l+0xae0>)
 810cce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ccec:	f7f3 ff7e 	bl	8100bec <__aeabi_dcmplt>
 810ccf0:	2800      	cmp	r0, #0
 810ccf2:	f47f accf 	bne.w	810c694 <_strtod_l+0x454>
 810ccf6:	a30c      	add	r3, pc, #48	@ (adr r3, 810cd28 <_strtod_l+0xae8>)
 810ccf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ccfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810cd00:	f7f3 ff92 	bl	8100c28 <__aeabi_dcmpgt>
 810cd04:	2800      	cmp	r0, #0
 810cd06:	d093      	beq.n	810cc30 <_strtod_l+0x9f0>
 810cd08:	e4c4      	b.n	810c694 <_strtod_l+0x454>
 810cd0a:	bf00      	nop
 810cd0c:	f3af 8000 	nop.w
 810cd10:	00000000 	.word	0x00000000
 810cd14:	bff00000 	.word	0xbff00000
 810cd18:	00000000 	.word	0x00000000
 810cd1c:	3ff00000 	.word	0x3ff00000
 810cd20:	94a03595 	.word	0x94a03595
 810cd24:	3fdfffff 	.word	0x3fdfffff
 810cd28:	35afe535 	.word	0x35afe535
 810cd2c:	3fe00000 	.word	0x3fe00000
 810cd30:	000fffff 	.word	0x000fffff
 810cd34:	7ff00000 	.word	0x7ff00000
 810cd38:	7fefffff 	.word	0x7fefffff
 810cd3c:	3ff00000 	.word	0x3ff00000
 810cd40:	3fe00000 	.word	0x3fe00000
 810cd44:	7fe00000 	.word	0x7fe00000
 810cd48:	7c9fffff 	.word	0x7c9fffff
 810cd4c:	9b08      	ldr	r3, [sp, #32]
 810cd4e:	b323      	cbz	r3, 810cd9a <_strtod_l+0xb5a>
 810cd50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 810cd54:	d821      	bhi.n	810cd9a <_strtod_l+0xb5a>
 810cd56:	a328      	add	r3, pc, #160	@ (adr r3, 810cdf8 <_strtod_l+0xbb8>)
 810cd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cd5c:	4630      	mov	r0, r6
 810cd5e:	4639      	mov	r1, r7
 810cd60:	f7f3 ff4e 	bl	8100c00 <__aeabi_dcmple>
 810cd64:	b1a0      	cbz	r0, 810cd90 <_strtod_l+0xb50>
 810cd66:	4639      	mov	r1, r7
 810cd68:	4630      	mov	r0, r6
 810cd6a:	f7f3 ffa5 	bl	8100cb8 <__aeabi_d2uiz>
 810cd6e:	2801      	cmp	r0, #1
 810cd70:	bf38      	it	cc
 810cd72:	2001      	movcc	r0, #1
 810cd74:	f7f3 fc4e 	bl	8100614 <__aeabi_ui2d>
 810cd78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cd7a:	4606      	mov	r6, r0
 810cd7c:	460f      	mov	r7, r1
 810cd7e:	b9fb      	cbnz	r3, 810cdc0 <_strtod_l+0xb80>
 810cd80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 810cd84:	9014      	str	r0, [sp, #80]	@ 0x50
 810cd86:	9315      	str	r3, [sp, #84]	@ 0x54
 810cd88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 810cd8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 810cd90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 810cd92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 810cd96:	1b5b      	subs	r3, r3, r5
 810cd98:	9311      	str	r3, [sp, #68]	@ 0x44
 810cd9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 810cd9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 810cda2:	f7ff f8f1 	bl	810bf88 <__ulp>
 810cda6:	4650      	mov	r0, sl
 810cda8:	ec53 2b10 	vmov	r2, r3, d0
 810cdac:	4659      	mov	r1, fp
 810cdae:	f7f3 fcab 	bl	8100708 <__aeabi_dmul>
 810cdb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 810cdb6:	f7f3 faf1 	bl	810039c <__adddf3>
 810cdba:	4682      	mov	sl, r0
 810cdbc:	468b      	mov	fp, r1
 810cdbe:	e770      	b.n	810cca2 <_strtod_l+0xa62>
 810cdc0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 810cdc4:	e7e0      	b.n	810cd88 <_strtod_l+0xb48>
 810cdc6:	a30e      	add	r3, pc, #56	@ (adr r3, 810ce00 <_strtod_l+0xbc0>)
 810cdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cdcc:	f7f3 ff0e 	bl	8100bec <__aeabi_dcmplt>
 810cdd0:	e798      	b.n	810cd04 <_strtod_l+0xac4>
 810cdd2:	2300      	movs	r3, #0
 810cdd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 810cdd6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 810cdd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810cdda:	6013      	str	r3, [r2, #0]
 810cddc:	f7ff ba6d 	b.w	810c2ba <_strtod_l+0x7a>
 810cde0:	2a65      	cmp	r2, #101	@ 0x65
 810cde2:	f43f ab66 	beq.w	810c4b2 <_strtod_l+0x272>
 810cde6:	2a45      	cmp	r2, #69	@ 0x45
 810cde8:	f43f ab63 	beq.w	810c4b2 <_strtod_l+0x272>
 810cdec:	2301      	movs	r3, #1
 810cdee:	f7ff bb9e 	b.w	810c52e <_strtod_l+0x2ee>
 810cdf2:	bf00      	nop
 810cdf4:	f3af 8000 	nop.w
 810cdf8:	ffc00000 	.word	0xffc00000
 810cdfc:	41dfffff 	.word	0x41dfffff
 810ce00:	94a03595 	.word	0x94a03595
 810ce04:	3fcfffff 	.word	0x3fcfffff

0810ce08 <_strtod_r>:
 810ce08:	4b01      	ldr	r3, [pc, #4]	@ (810ce10 <_strtod_r+0x8>)
 810ce0a:	f7ff ba19 	b.w	810c240 <_strtod_l>
 810ce0e:	bf00      	nop
 810ce10:	1000007c 	.word	0x1000007c

0810ce14 <_strtol_l.constprop.0>:
 810ce14:	2b24      	cmp	r3, #36	@ 0x24
 810ce16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810ce1a:	4686      	mov	lr, r0
 810ce1c:	4690      	mov	r8, r2
 810ce1e:	d801      	bhi.n	810ce24 <_strtol_l.constprop.0+0x10>
 810ce20:	2b01      	cmp	r3, #1
 810ce22:	d106      	bne.n	810ce32 <_strtol_l.constprop.0+0x1e>
 810ce24:	f7fd fd96 	bl	810a954 <__errno>
 810ce28:	2316      	movs	r3, #22
 810ce2a:	6003      	str	r3, [r0, #0]
 810ce2c:	2000      	movs	r0, #0
 810ce2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ce32:	4834      	ldr	r0, [pc, #208]	@ (810cf04 <_strtol_l.constprop.0+0xf0>)
 810ce34:	460d      	mov	r5, r1
 810ce36:	462a      	mov	r2, r5
 810ce38:	f815 4b01 	ldrb.w	r4, [r5], #1
 810ce3c:	5d06      	ldrb	r6, [r0, r4]
 810ce3e:	f016 0608 	ands.w	r6, r6, #8
 810ce42:	d1f8      	bne.n	810ce36 <_strtol_l.constprop.0+0x22>
 810ce44:	2c2d      	cmp	r4, #45	@ 0x2d
 810ce46:	d12d      	bne.n	810cea4 <_strtol_l.constprop.0+0x90>
 810ce48:	782c      	ldrb	r4, [r5, #0]
 810ce4a:	2601      	movs	r6, #1
 810ce4c:	1c95      	adds	r5, r2, #2
 810ce4e:	f033 0210 	bics.w	r2, r3, #16
 810ce52:	d109      	bne.n	810ce68 <_strtol_l.constprop.0+0x54>
 810ce54:	2c30      	cmp	r4, #48	@ 0x30
 810ce56:	d12a      	bne.n	810ceae <_strtol_l.constprop.0+0x9a>
 810ce58:	782a      	ldrb	r2, [r5, #0]
 810ce5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 810ce5e:	2a58      	cmp	r2, #88	@ 0x58
 810ce60:	d125      	bne.n	810ceae <_strtol_l.constprop.0+0x9a>
 810ce62:	786c      	ldrb	r4, [r5, #1]
 810ce64:	2310      	movs	r3, #16
 810ce66:	3502      	adds	r5, #2
 810ce68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 810ce6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 810ce70:	2200      	movs	r2, #0
 810ce72:	fbbc f9f3 	udiv	r9, ip, r3
 810ce76:	4610      	mov	r0, r2
 810ce78:	fb03 ca19 	mls	sl, r3, r9, ip
 810ce7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 810ce80:	2f09      	cmp	r7, #9
 810ce82:	d81b      	bhi.n	810cebc <_strtol_l.constprop.0+0xa8>
 810ce84:	463c      	mov	r4, r7
 810ce86:	42a3      	cmp	r3, r4
 810ce88:	dd27      	ble.n	810ceda <_strtol_l.constprop.0+0xc6>
 810ce8a:	1c57      	adds	r7, r2, #1
 810ce8c:	d007      	beq.n	810ce9e <_strtol_l.constprop.0+0x8a>
 810ce8e:	4581      	cmp	r9, r0
 810ce90:	d320      	bcc.n	810ced4 <_strtol_l.constprop.0+0xc0>
 810ce92:	d101      	bne.n	810ce98 <_strtol_l.constprop.0+0x84>
 810ce94:	45a2      	cmp	sl, r4
 810ce96:	db1d      	blt.n	810ced4 <_strtol_l.constprop.0+0xc0>
 810ce98:	fb00 4003 	mla	r0, r0, r3, r4
 810ce9c:	2201      	movs	r2, #1
 810ce9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 810cea2:	e7eb      	b.n	810ce7c <_strtol_l.constprop.0+0x68>
 810cea4:	2c2b      	cmp	r4, #43	@ 0x2b
 810cea6:	bf04      	itt	eq
 810cea8:	782c      	ldrbeq	r4, [r5, #0]
 810ceaa:	1c95      	addeq	r5, r2, #2
 810ceac:	e7cf      	b.n	810ce4e <_strtol_l.constprop.0+0x3a>
 810ceae:	2b00      	cmp	r3, #0
 810ceb0:	d1da      	bne.n	810ce68 <_strtol_l.constprop.0+0x54>
 810ceb2:	2c30      	cmp	r4, #48	@ 0x30
 810ceb4:	bf0c      	ite	eq
 810ceb6:	2308      	moveq	r3, #8
 810ceb8:	230a      	movne	r3, #10
 810ceba:	e7d5      	b.n	810ce68 <_strtol_l.constprop.0+0x54>
 810cebc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 810cec0:	2f19      	cmp	r7, #25
 810cec2:	d801      	bhi.n	810cec8 <_strtol_l.constprop.0+0xb4>
 810cec4:	3c37      	subs	r4, #55	@ 0x37
 810cec6:	e7de      	b.n	810ce86 <_strtol_l.constprop.0+0x72>
 810cec8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 810cecc:	2f19      	cmp	r7, #25
 810cece:	d804      	bhi.n	810ceda <_strtol_l.constprop.0+0xc6>
 810ced0:	3c57      	subs	r4, #87	@ 0x57
 810ced2:	e7d8      	b.n	810ce86 <_strtol_l.constprop.0+0x72>
 810ced4:	f04f 32ff 	mov.w	r2, #4294967295
 810ced8:	e7e1      	b.n	810ce9e <_strtol_l.constprop.0+0x8a>
 810ceda:	1c53      	adds	r3, r2, #1
 810cedc:	d108      	bne.n	810cef0 <_strtol_l.constprop.0+0xdc>
 810cede:	2322      	movs	r3, #34	@ 0x22
 810cee0:	f8ce 3000 	str.w	r3, [lr]
 810cee4:	4660      	mov	r0, ip
 810cee6:	f1b8 0f00 	cmp.w	r8, #0
 810ceea:	d0a0      	beq.n	810ce2e <_strtol_l.constprop.0+0x1a>
 810ceec:	1e69      	subs	r1, r5, #1
 810ceee:	e006      	b.n	810cefe <_strtol_l.constprop.0+0xea>
 810cef0:	b106      	cbz	r6, 810cef4 <_strtol_l.constprop.0+0xe0>
 810cef2:	4240      	negs	r0, r0
 810cef4:	f1b8 0f00 	cmp.w	r8, #0
 810cef8:	d099      	beq.n	810ce2e <_strtol_l.constprop.0+0x1a>
 810cefa:	2a00      	cmp	r2, #0
 810cefc:	d1f6      	bne.n	810ceec <_strtol_l.constprop.0+0xd8>
 810cefe:	f8c8 1000 	str.w	r1, [r8]
 810cf02:	e794      	b.n	810ce2e <_strtol_l.constprop.0+0x1a>
 810cf04:	0810ed49 	.word	0x0810ed49

0810cf08 <_strtol_r>:
 810cf08:	f7ff bf84 	b.w	810ce14 <_strtol_l.constprop.0>

0810cf0c <__ssputs_r>:
 810cf0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810cf10:	688e      	ldr	r6, [r1, #8]
 810cf12:	461f      	mov	r7, r3
 810cf14:	42be      	cmp	r6, r7
 810cf16:	680b      	ldr	r3, [r1, #0]
 810cf18:	4682      	mov	sl, r0
 810cf1a:	460c      	mov	r4, r1
 810cf1c:	4690      	mov	r8, r2
 810cf1e:	d82d      	bhi.n	810cf7c <__ssputs_r+0x70>
 810cf20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810cf24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 810cf28:	d026      	beq.n	810cf78 <__ssputs_r+0x6c>
 810cf2a:	6965      	ldr	r5, [r4, #20]
 810cf2c:	6909      	ldr	r1, [r1, #16]
 810cf2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810cf32:	eba3 0901 	sub.w	r9, r3, r1
 810cf36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810cf3a:	1c7b      	adds	r3, r7, #1
 810cf3c:	444b      	add	r3, r9
 810cf3e:	106d      	asrs	r5, r5, #1
 810cf40:	429d      	cmp	r5, r3
 810cf42:	bf38      	it	cc
 810cf44:	461d      	movcc	r5, r3
 810cf46:	0553      	lsls	r3, r2, #21
 810cf48:	d527      	bpl.n	810cf9a <__ssputs_r+0x8e>
 810cf4a:	4629      	mov	r1, r5
 810cf4c:	f7fe fc1c 	bl	810b788 <_malloc_r>
 810cf50:	4606      	mov	r6, r0
 810cf52:	b360      	cbz	r0, 810cfae <__ssputs_r+0xa2>
 810cf54:	6921      	ldr	r1, [r4, #16]
 810cf56:	464a      	mov	r2, r9
 810cf58:	f7fd fd29 	bl	810a9ae <memcpy>
 810cf5c:	89a3      	ldrh	r3, [r4, #12]
 810cf5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 810cf62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810cf66:	81a3      	strh	r3, [r4, #12]
 810cf68:	6126      	str	r6, [r4, #16]
 810cf6a:	6165      	str	r5, [r4, #20]
 810cf6c:	444e      	add	r6, r9
 810cf6e:	eba5 0509 	sub.w	r5, r5, r9
 810cf72:	6026      	str	r6, [r4, #0]
 810cf74:	60a5      	str	r5, [r4, #8]
 810cf76:	463e      	mov	r6, r7
 810cf78:	42be      	cmp	r6, r7
 810cf7a:	d900      	bls.n	810cf7e <__ssputs_r+0x72>
 810cf7c:	463e      	mov	r6, r7
 810cf7e:	6820      	ldr	r0, [r4, #0]
 810cf80:	4632      	mov	r2, r6
 810cf82:	4641      	mov	r1, r8
 810cf84:	f000 fb6a 	bl	810d65c <memmove>
 810cf88:	68a3      	ldr	r3, [r4, #8]
 810cf8a:	1b9b      	subs	r3, r3, r6
 810cf8c:	60a3      	str	r3, [r4, #8]
 810cf8e:	6823      	ldr	r3, [r4, #0]
 810cf90:	4433      	add	r3, r6
 810cf92:	6023      	str	r3, [r4, #0]
 810cf94:	2000      	movs	r0, #0
 810cf96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810cf9a:	462a      	mov	r2, r5
 810cf9c:	f000 ff67 	bl	810de6e <_realloc_r>
 810cfa0:	4606      	mov	r6, r0
 810cfa2:	2800      	cmp	r0, #0
 810cfa4:	d1e0      	bne.n	810cf68 <__ssputs_r+0x5c>
 810cfa6:	6921      	ldr	r1, [r4, #16]
 810cfa8:	4650      	mov	r0, sl
 810cfaa:	f7fe fb79 	bl	810b6a0 <_free_r>
 810cfae:	230c      	movs	r3, #12
 810cfb0:	f8ca 3000 	str.w	r3, [sl]
 810cfb4:	89a3      	ldrh	r3, [r4, #12]
 810cfb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810cfba:	81a3      	strh	r3, [r4, #12]
 810cfbc:	f04f 30ff 	mov.w	r0, #4294967295
 810cfc0:	e7e9      	b.n	810cf96 <__ssputs_r+0x8a>
	...

0810cfc4 <_svfiprintf_r>:
 810cfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cfc8:	4698      	mov	r8, r3
 810cfca:	898b      	ldrh	r3, [r1, #12]
 810cfcc:	061b      	lsls	r3, r3, #24
 810cfce:	b09d      	sub	sp, #116	@ 0x74
 810cfd0:	4607      	mov	r7, r0
 810cfd2:	460d      	mov	r5, r1
 810cfd4:	4614      	mov	r4, r2
 810cfd6:	d510      	bpl.n	810cffa <_svfiprintf_r+0x36>
 810cfd8:	690b      	ldr	r3, [r1, #16]
 810cfda:	b973      	cbnz	r3, 810cffa <_svfiprintf_r+0x36>
 810cfdc:	2140      	movs	r1, #64	@ 0x40
 810cfde:	f7fe fbd3 	bl	810b788 <_malloc_r>
 810cfe2:	6028      	str	r0, [r5, #0]
 810cfe4:	6128      	str	r0, [r5, #16]
 810cfe6:	b930      	cbnz	r0, 810cff6 <_svfiprintf_r+0x32>
 810cfe8:	230c      	movs	r3, #12
 810cfea:	603b      	str	r3, [r7, #0]
 810cfec:	f04f 30ff 	mov.w	r0, #4294967295
 810cff0:	b01d      	add	sp, #116	@ 0x74
 810cff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cff6:	2340      	movs	r3, #64	@ 0x40
 810cff8:	616b      	str	r3, [r5, #20]
 810cffa:	2300      	movs	r3, #0
 810cffc:	9309      	str	r3, [sp, #36]	@ 0x24
 810cffe:	2320      	movs	r3, #32
 810d000:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810d004:	f8cd 800c 	str.w	r8, [sp, #12]
 810d008:	2330      	movs	r3, #48	@ 0x30
 810d00a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 810d1a8 <_svfiprintf_r+0x1e4>
 810d00e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810d012:	f04f 0901 	mov.w	r9, #1
 810d016:	4623      	mov	r3, r4
 810d018:	469a      	mov	sl, r3
 810d01a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d01e:	b10a      	cbz	r2, 810d024 <_svfiprintf_r+0x60>
 810d020:	2a25      	cmp	r2, #37	@ 0x25
 810d022:	d1f9      	bne.n	810d018 <_svfiprintf_r+0x54>
 810d024:	ebba 0b04 	subs.w	fp, sl, r4
 810d028:	d00b      	beq.n	810d042 <_svfiprintf_r+0x7e>
 810d02a:	465b      	mov	r3, fp
 810d02c:	4622      	mov	r2, r4
 810d02e:	4629      	mov	r1, r5
 810d030:	4638      	mov	r0, r7
 810d032:	f7ff ff6b 	bl	810cf0c <__ssputs_r>
 810d036:	3001      	adds	r0, #1
 810d038:	f000 80a7 	beq.w	810d18a <_svfiprintf_r+0x1c6>
 810d03c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810d03e:	445a      	add	r2, fp
 810d040:	9209      	str	r2, [sp, #36]	@ 0x24
 810d042:	f89a 3000 	ldrb.w	r3, [sl]
 810d046:	2b00      	cmp	r3, #0
 810d048:	f000 809f 	beq.w	810d18a <_svfiprintf_r+0x1c6>
 810d04c:	2300      	movs	r3, #0
 810d04e:	f04f 32ff 	mov.w	r2, #4294967295
 810d052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d056:	f10a 0a01 	add.w	sl, sl, #1
 810d05a:	9304      	str	r3, [sp, #16]
 810d05c:	9307      	str	r3, [sp, #28]
 810d05e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810d062:	931a      	str	r3, [sp, #104]	@ 0x68
 810d064:	4654      	mov	r4, sl
 810d066:	2205      	movs	r2, #5
 810d068:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d06c:	484e      	ldr	r0, [pc, #312]	@ (810d1a8 <_svfiprintf_r+0x1e4>)
 810d06e:	f7f3 f937 	bl	81002e0 <memchr>
 810d072:	9a04      	ldr	r2, [sp, #16]
 810d074:	b9d8      	cbnz	r0, 810d0ae <_svfiprintf_r+0xea>
 810d076:	06d0      	lsls	r0, r2, #27
 810d078:	bf44      	itt	mi
 810d07a:	2320      	movmi	r3, #32
 810d07c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810d080:	0711      	lsls	r1, r2, #28
 810d082:	bf44      	itt	mi
 810d084:	232b      	movmi	r3, #43	@ 0x2b
 810d086:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810d08a:	f89a 3000 	ldrb.w	r3, [sl]
 810d08e:	2b2a      	cmp	r3, #42	@ 0x2a
 810d090:	d015      	beq.n	810d0be <_svfiprintf_r+0xfa>
 810d092:	9a07      	ldr	r2, [sp, #28]
 810d094:	4654      	mov	r4, sl
 810d096:	2000      	movs	r0, #0
 810d098:	f04f 0c0a 	mov.w	ip, #10
 810d09c:	4621      	mov	r1, r4
 810d09e:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d0a2:	3b30      	subs	r3, #48	@ 0x30
 810d0a4:	2b09      	cmp	r3, #9
 810d0a6:	d94b      	bls.n	810d140 <_svfiprintf_r+0x17c>
 810d0a8:	b1b0      	cbz	r0, 810d0d8 <_svfiprintf_r+0x114>
 810d0aa:	9207      	str	r2, [sp, #28]
 810d0ac:	e014      	b.n	810d0d8 <_svfiprintf_r+0x114>
 810d0ae:	eba0 0308 	sub.w	r3, r0, r8
 810d0b2:	fa09 f303 	lsl.w	r3, r9, r3
 810d0b6:	4313      	orrs	r3, r2
 810d0b8:	9304      	str	r3, [sp, #16]
 810d0ba:	46a2      	mov	sl, r4
 810d0bc:	e7d2      	b.n	810d064 <_svfiprintf_r+0xa0>
 810d0be:	9b03      	ldr	r3, [sp, #12]
 810d0c0:	1d19      	adds	r1, r3, #4
 810d0c2:	681b      	ldr	r3, [r3, #0]
 810d0c4:	9103      	str	r1, [sp, #12]
 810d0c6:	2b00      	cmp	r3, #0
 810d0c8:	bfbb      	ittet	lt
 810d0ca:	425b      	neglt	r3, r3
 810d0cc:	f042 0202 	orrlt.w	r2, r2, #2
 810d0d0:	9307      	strge	r3, [sp, #28]
 810d0d2:	9307      	strlt	r3, [sp, #28]
 810d0d4:	bfb8      	it	lt
 810d0d6:	9204      	strlt	r2, [sp, #16]
 810d0d8:	7823      	ldrb	r3, [r4, #0]
 810d0da:	2b2e      	cmp	r3, #46	@ 0x2e
 810d0dc:	d10a      	bne.n	810d0f4 <_svfiprintf_r+0x130>
 810d0de:	7863      	ldrb	r3, [r4, #1]
 810d0e0:	2b2a      	cmp	r3, #42	@ 0x2a
 810d0e2:	d132      	bne.n	810d14a <_svfiprintf_r+0x186>
 810d0e4:	9b03      	ldr	r3, [sp, #12]
 810d0e6:	1d1a      	adds	r2, r3, #4
 810d0e8:	681b      	ldr	r3, [r3, #0]
 810d0ea:	9203      	str	r2, [sp, #12]
 810d0ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810d0f0:	3402      	adds	r4, #2
 810d0f2:	9305      	str	r3, [sp, #20]
 810d0f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 810d1b8 <_svfiprintf_r+0x1f4>
 810d0f8:	7821      	ldrb	r1, [r4, #0]
 810d0fa:	2203      	movs	r2, #3
 810d0fc:	4650      	mov	r0, sl
 810d0fe:	f7f3 f8ef 	bl	81002e0 <memchr>
 810d102:	b138      	cbz	r0, 810d114 <_svfiprintf_r+0x150>
 810d104:	9b04      	ldr	r3, [sp, #16]
 810d106:	eba0 000a 	sub.w	r0, r0, sl
 810d10a:	2240      	movs	r2, #64	@ 0x40
 810d10c:	4082      	lsls	r2, r0
 810d10e:	4313      	orrs	r3, r2
 810d110:	3401      	adds	r4, #1
 810d112:	9304      	str	r3, [sp, #16]
 810d114:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d118:	4824      	ldr	r0, [pc, #144]	@ (810d1ac <_svfiprintf_r+0x1e8>)
 810d11a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810d11e:	2206      	movs	r2, #6
 810d120:	f7f3 f8de 	bl	81002e0 <memchr>
 810d124:	2800      	cmp	r0, #0
 810d126:	d036      	beq.n	810d196 <_svfiprintf_r+0x1d2>
 810d128:	4b21      	ldr	r3, [pc, #132]	@ (810d1b0 <_svfiprintf_r+0x1ec>)
 810d12a:	bb1b      	cbnz	r3, 810d174 <_svfiprintf_r+0x1b0>
 810d12c:	9b03      	ldr	r3, [sp, #12]
 810d12e:	3307      	adds	r3, #7
 810d130:	f023 0307 	bic.w	r3, r3, #7
 810d134:	3308      	adds	r3, #8
 810d136:	9303      	str	r3, [sp, #12]
 810d138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d13a:	4433      	add	r3, r6
 810d13c:	9309      	str	r3, [sp, #36]	@ 0x24
 810d13e:	e76a      	b.n	810d016 <_svfiprintf_r+0x52>
 810d140:	fb0c 3202 	mla	r2, ip, r2, r3
 810d144:	460c      	mov	r4, r1
 810d146:	2001      	movs	r0, #1
 810d148:	e7a8      	b.n	810d09c <_svfiprintf_r+0xd8>
 810d14a:	2300      	movs	r3, #0
 810d14c:	3401      	adds	r4, #1
 810d14e:	9305      	str	r3, [sp, #20]
 810d150:	4619      	mov	r1, r3
 810d152:	f04f 0c0a 	mov.w	ip, #10
 810d156:	4620      	mov	r0, r4
 810d158:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d15c:	3a30      	subs	r2, #48	@ 0x30
 810d15e:	2a09      	cmp	r2, #9
 810d160:	d903      	bls.n	810d16a <_svfiprintf_r+0x1a6>
 810d162:	2b00      	cmp	r3, #0
 810d164:	d0c6      	beq.n	810d0f4 <_svfiprintf_r+0x130>
 810d166:	9105      	str	r1, [sp, #20]
 810d168:	e7c4      	b.n	810d0f4 <_svfiprintf_r+0x130>
 810d16a:	fb0c 2101 	mla	r1, ip, r1, r2
 810d16e:	4604      	mov	r4, r0
 810d170:	2301      	movs	r3, #1
 810d172:	e7f0      	b.n	810d156 <_svfiprintf_r+0x192>
 810d174:	ab03      	add	r3, sp, #12
 810d176:	9300      	str	r3, [sp, #0]
 810d178:	462a      	mov	r2, r5
 810d17a:	4b0e      	ldr	r3, [pc, #56]	@ (810d1b4 <_svfiprintf_r+0x1f0>)
 810d17c:	a904      	add	r1, sp, #16
 810d17e:	4638      	mov	r0, r7
 810d180:	f7fc fb5a 	bl	8109838 <_printf_float>
 810d184:	1c42      	adds	r2, r0, #1
 810d186:	4606      	mov	r6, r0
 810d188:	d1d6      	bne.n	810d138 <_svfiprintf_r+0x174>
 810d18a:	89ab      	ldrh	r3, [r5, #12]
 810d18c:	065b      	lsls	r3, r3, #25
 810d18e:	f53f af2d 	bmi.w	810cfec <_svfiprintf_r+0x28>
 810d192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810d194:	e72c      	b.n	810cff0 <_svfiprintf_r+0x2c>
 810d196:	ab03      	add	r3, sp, #12
 810d198:	9300      	str	r3, [sp, #0]
 810d19a:	462a      	mov	r2, r5
 810d19c:	4b05      	ldr	r3, [pc, #20]	@ (810d1b4 <_svfiprintf_r+0x1f0>)
 810d19e:	a904      	add	r1, sp, #16
 810d1a0:	4638      	mov	r0, r7
 810d1a2:	f7fc fde1 	bl	8109d68 <_printf_i>
 810d1a6:	e7ed      	b.n	810d184 <_svfiprintf_r+0x1c0>
 810d1a8:	0810ee49 	.word	0x0810ee49
 810d1ac:	0810ee53 	.word	0x0810ee53
 810d1b0:	08109839 	.word	0x08109839
 810d1b4:	0810cf0d 	.word	0x0810cf0d
 810d1b8:	0810ee4f 	.word	0x0810ee4f

0810d1bc <__sfputc_r>:
 810d1bc:	6893      	ldr	r3, [r2, #8]
 810d1be:	3b01      	subs	r3, #1
 810d1c0:	2b00      	cmp	r3, #0
 810d1c2:	b410      	push	{r4}
 810d1c4:	6093      	str	r3, [r2, #8]
 810d1c6:	da08      	bge.n	810d1da <__sfputc_r+0x1e>
 810d1c8:	6994      	ldr	r4, [r2, #24]
 810d1ca:	42a3      	cmp	r3, r4
 810d1cc:	db01      	blt.n	810d1d2 <__sfputc_r+0x16>
 810d1ce:	290a      	cmp	r1, #10
 810d1d0:	d103      	bne.n	810d1da <__sfputc_r+0x1e>
 810d1d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d1d6:	f7fd bad6 	b.w	810a786 <__swbuf_r>
 810d1da:	6813      	ldr	r3, [r2, #0]
 810d1dc:	1c58      	adds	r0, r3, #1
 810d1de:	6010      	str	r0, [r2, #0]
 810d1e0:	7019      	strb	r1, [r3, #0]
 810d1e2:	4608      	mov	r0, r1
 810d1e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d1e8:	4770      	bx	lr

0810d1ea <__sfputs_r>:
 810d1ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d1ec:	4606      	mov	r6, r0
 810d1ee:	460f      	mov	r7, r1
 810d1f0:	4614      	mov	r4, r2
 810d1f2:	18d5      	adds	r5, r2, r3
 810d1f4:	42ac      	cmp	r4, r5
 810d1f6:	d101      	bne.n	810d1fc <__sfputs_r+0x12>
 810d1f8:	2000      	movs	r0, #0
 810d1fa:	e007      	b.n	810d20c <__sfputs_r+0x22>
 810d1fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d200:	463a      	mov	r2, r7
 810d202:	4630      	mov	r0, r6
 810d204:	f7ff ffda 	bl	810d1bc <__sfputc_r>
 810d208:	1c43      	adds	r3, r0, #1
 810d20a:	d1f3      	bne.n	810d1f4 <__sfputs_r+0xa>
 810d20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810d210 <_vfiprintf_r>:
 810d210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d214:	460d      	mov	r5, r1
 810d216:	b09d      	sub	sp, #116	@ 0x74
 810d218:	4614      	mov	r4, r2
 810d21a:	4698      	mov	r8, r3
 810d21c:	4606      	mov	r6, r0
 810d21e:	b118      	cbz	r0, 810d228 <_vfiprintf_r+0x18>
 810d220:	6a03      	ldr	r3, [r0, #32]
 810d222:	b90b      	cbnz	r3, 810d228 <_vfiprintf_r+0x18>
 810d224:	f7fd f960 	bl	810a4e8 <__sinit>
 810d228:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810d22a:	07d9      	lsls	r1, r3, #31
 810d22c:	d405      	bmi.n	810d23a <_vfiprintf_r+0x2a>
 810d22e:	89ab      	ldrh	r3, [r5, #12]
 810d230:	059a      	lsls	r2, r3, #22
 810d232:	d402      	bmi.n	810d23a <_vfiprintf_r+0x2a>
 810d234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810d236:	f7fd fbb8 	bl	810a9aa <__retarget_lock_acquire_recursive>
 810d23a:	89ab      	ldrh	r3, [r5, #12]
 810d23c:	071b      	lsls	r3, r3, #28
 810d23e:	d501      	bpl.n	810d244 <_vfiprintf_r+0x34>
 810d240:	692b      	ldr	r3, [r5, #16]
 810d242:	b99b      	cbnz	r3, 810d26c <_vfiprintf_r+0x5c>
 810d244:	4629      	mov	r1, r5
 810d246:	4630      	mov	r0, r6
 810d248:	f7fd fadc 	bl	810a804 <__swsetup_r>
 810d24c:	b170      	cbz	r0, 810d26c <_vfiprintf_r+0x5c>
 810d24e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810d250:	07dc      	lsls	r4, r3, #31
 810d252:	d504      	bpl.n	810d25e <_vfiprintf_r+0x4e>
 810d254:	f04f 30ff 	mov.w	r0, #4294967295
 810d258:	b01d      	add	sp, #116	@ 0x74
 810d25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d25e:	89ab      	ldrh	r3, [r5, #12]
 810d260:	0598      	lsls	r0, r3, #22
 810d262:	d4f7      	bmi.n	810d254 <_vfiprintf_r+0x44>
 810d264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810d266:	f7fd fba1 	bl	810a9ac <__retarget_lock_release_recursive>
 810d26a:	e7f3      	b.n	810d254 <_vfiprintf_r+0x44>
 810d26c:	2300      	movs	r3, #0
 810d26e:	9309      	str	r3, [sp, #36]	@ 0x24
 810d270:	2320      	movs	r3, #32
 810d272:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810d276:	f8cd 800c 	str.w	r8, [sp, #12]
 810d27a:	2330      	movs	r3, #48	@ 0x30
 810d27c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 810d42c <_vfiprintf_r+0x21c>
 810d280:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810d284:	f04f 0901 	mov.w	r9, #1
 810d288:	4623      	mov	r3, r4
 810d28a:	469a      	mov	sl, r3
 810d28c:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d290:	b10a      	cbz	r2, 810d296 <_vfiprintf_r+0x86>
 810d292:	2a25      	cmp	r2, #37	@ 0x25
 810d294:	d1f9      	bne.n	810d28a <_vfiprintf_r+0x7a>
 810d296:	ebba 0b04 	subs.w	fp, sl, r4
 810d29a:	d00b      	beq.n	810d2b4 <_vfiprintf_r+0xa4>
 810d29c:	465b      	mov	r3, fp
 810d29e:	4622      	mov	r2, r4
 810d2a0:	4629      	mov	r1, r5
 810d2a2:	4630      	mov	r0, r6
 810d2a4:	f7ff ffa1 	bl	810d1ea <__sfputs_r>
 810d2a8:	3001      	adds	r0, #1
 810d2aa:	f000 80a7 	beq.w	810d3fc <_vfiprintf_r+0x1ec>
 810d2ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810d2b0:	445a      	add	r2, fp
 810d2b2:	9209      	str	r2, [sp, #36]	@ 0x24
 810d2b4:	f89a 3000 	ldrb.w	r3, [sl]
 810d2b8:	2b00      	cmp	r3, #0
 810d2ba:	f000 809f 	beq.w	810d3fc <_vfiprintf_r+0x1ec>
 810d2be:	2300      	movs	r3, #0
 810d2c0:	f04f 32ff 	mov.w	r2, #4294967295
 810d2c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d2c8:	f10a 0a01 	add.w	sl, sl, #1
 810d2cc:	9304      	str	r3, [sp, #16]
 810d2ce:	9307      	str	r3, [sp, #28]
 810d2d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810d2d4:	931a      	str	r3, [sp, #104]	@ 0x68
 810d2d6:	4654      	mov	r4, sl
 810d2d8:	2205      	movs	r2, #5
 810d2da:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d2de:	4853      	ldr	r0, [pc, #332]	@ (810d42c <_vfiprintf_r+0x21c>)
 810d2e0:	f7f2 fffe 	bl	81002e0 <memchr>
 810d2e4:	9a04      	ldr	r2, [sp, #16]
 810d2e6:	b9d8      	cbnz	r0, 810d320 <_vfiprintf_r+0x110>
 810d2e8:	06d1      	lsls	r1, r2, #27
 810d2ea:	bf44      	itt	mi
 810d2ec:	2320      	movmi	r3, #32
 810d2ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810d2f2:	0713      	lsls	r3, r2, #28
 810d2f4:	bf44      	itt	mi
 810d2f6:	232b      	movmi	r3, #43	@ 0x2b
 810d2f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810d2fc:	f89a 3000 	ldrb.w	r3, [sl]
 810d300:	2b2a      	cmp	r3, #42	@ 0x2a
 810d302:	d015      	beq.n	810d330 <_vfiprintf_r+0x120>
 810d304:	9a07      	ldr	r2, [sp, #28]
 810d306:	4654      	mov	r4, sl
 810d308:	2000      	movs	r0, #0
 810d30a:	f04f 0c0a 	mov.w	ip, #10
 810d30e:	4621      	mov	r1, r4
 810d310:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d314:	3b30      	subs	r3, #48	@ 0x30
 810d316:	2b09      	cmp	r3, #9
 810d318:	d94b      	bls.n	810d3b2 <_vfiprintf_r+0x1a2>
 810d31a:	b1b0      	cbz	r0, 810d34a <_vfiprintf_r+0x13a>
 810d31c:	9207      	str	r2, [sp, #28]
 810d31e:	e014      	b.n	810d34a <_vfiprintf_r+0x13a>
 810d320:	eba0 0308 	sub.w	r3, r0, r8
 810d324:	fa09 f303 	lsl.w	r3, r9, r3
 810d328:	4313      	orrs	r3, r2
 810d32a:	9304      	str	r3, [sp, #16]
 810d32c:	46a2      	mov	sl, r4
 810d32e:	e7d2      	b.n	810d2d6 <_vfiprintf_r+0xc6>
 810d330:	9b03      	ldr	r3, [sp, #12]
 810d332:	1d19      	adds	r1, r3, #4
 810d334:	681b      	ldr	r3, [r3, #0]
 810d336:	9103      	str	r1, [sp, #12]
 810d338:	2b00      	cmp	r3, #0
 810d33a:	bfbb      	ittet	lt
 810d33c:	425b      	neglt	r3, r3
 810d33e:	f042 0202 	orrlt.w	r2, r2, #2
 810d342:	9307      	strge	r3, [sp, #28]
 810d344:	9307      	strlt	r3, [sp, #28]
 810d346:	bfb8      	it	lt
 810d348:	9204      	strlt	r2, [sp, #16]
 810d34a:	7823      	ldrb	r3, [r4, #0]
 810d34c:	2b2e      	cmp	r3, #46	@ 0x2e
 810d34e:	d10a      	bne.n	810d366 <_vfiprintf_r+0x156>
 810d350:	7863      	ldrb	r3, [r4, #1]
 810d352:	2b2a      	cmp	r3, #42	@ 0x2a
 810d354:	d132      	bne.n	810d3bc <_vfiprintf_r+0x1ac>
 810d356:	9b03      	ldr	r3, [sp, #12]
 810d358:	1d1a      	adds	r2, r3, #4
 810d35a:	681b      	ldr	r3, [r3, #0]
 810d35c:	9203      	str	r2, [sp, #12]
 810d35e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810d362:	3402      	adds	r4, #2
 810d364:	9305      	str	r3, [sp, #20]
 810d366:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 810d43c <_vfiprintf_r+0x22c>
 810d36a:	7821      	ldrb	r1, [r4, #0]
 810d36c:	2203      	movs	r2, #3
 810d36e:	4650      	mov	r0, sl
 810d370:	f7f2 ffb6 	bl	81002e0 <memchr>
 810d374:	b138      	cbz	r0, 810d386 <_vfiprintf_r+0x176>
 810d376:	9b04      	ldr	r3, [sp, #16]
 810d378:	eba0 000a 	sub.w	r0, r0, sl
 810d37c:	2240      	movs	r2, #64	@ 0x40
 810d37e:	4082      	lsls	r2, r0
 810d380:	4313      	orrs	r3, r2
 810d382:	3401      	adds	r4, #1
 810d384:	9304      	str	r3, [sp, #16]
 810d386:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d38a:	4829      	ldr	r0, [pc, #164]	@ (810d430 <_vfiprintf_r+0x220>)
 810d38c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810d390:	2206      	movs	r2, #6
 810d392:	f7f2 ffa5 	bl	81002e0 <memchr>
 810d396:	2800      	cmp	r0, #0
 810d398:	d03f      	beq.n	810d41a <_vfiprintf_r+0x20a>
 810d39a:	4b26      	ldr	r3, [pc, #152]	@ (810d434 <_vfiprintf_r+0x224>)
 810d39c:	bb1b      	cbnz	r3, 810d3e6 <_vfiprintf_r+0x1d6>
 810d39e:	9b03      	ldr	r3, [sp, #12]
 810d3a0:	3307      	adds	r3, #7
 810d3a2:	f023 0307 	bic.w	r3, r3, #7
 810d3a6:	3308      	adds	r3, #8
 810d3a8:	9303      	str	r3, [sp, #12]
 810d3aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d3ac:	443b      	add	r3, r7
 810d3ae:	9309      	str	r3, [sp, #36]	@ 0x24
 810d3b0:	e76a      	b.n	810d288 <_vfiprintf_r+0x78>
 810d3b2:	fb0c 3202 	mla	r2, ip, r2, r3
 810d3b6:	460c      	mov	r4, r1
 810d3b8:	2001      	movs	r0, #1
 810d3ba:	e7a8      	b.n	810d30e <_vfiprintf_r+0xfe>
 810d3bc:	2300      	movs	r3, #0
 810d3be:	3401      	adds	r4, #1
 810d3c0:	9305      	str	r3, [sp, #20]
 810d3c2:	4619      	mov	r1, r3
 810d3c4:	f04f 0c0a 	mov.w	ip, #10
 810d3c8:	4620      	mov	r0, r4
 810d3ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d3ce:	3a30      	subs	r2, #48	@ 0x30
 810d3d0:	2a09      	cmp	r2, #9
 810d3d2:	d903      	bls.n	810d3dc <_vfiprintf_r+0x1cc>
 810d3d4:	2b00      	cmp	r3, #0
 810d3d6:	d0c6      	beq.n	810d366 <_vfiprintf_r+0x156>
 810d3d8:	9105      	str	r1, [sp, #20]
 810d3da:	e7c4      	b.n	810d366 <_vfiprintf_r+0x156>
 810d3dc:	fb0c 2101 	mla	r1, ip, r1, r2
 810d3e0:	4604      	mov	r4, r0
 810d3e2:	2301      	movs	r3, #1
 810d3e4:	e7f0      	b.n	810d3c8 <_vfiprintf_r+0x1b8>
 810d3e6:	ab03      	add	r3, sp, #12
 810d3e8:	9300      	str	r3, [sp, #0]
 810d3ea:	462a      	mov	r2, r5
 810d3ec:	4b12      	ldr	r3, [pc, #72]	@ (810d438 <_vfiprintf_r+0x228>)
 810d3ee:	a904      	add	r1, sp, #16
 810d3f0:	4630      	mov	r0, r6
 810d3f2:	f7fc fa21 	bl	8109838 <_printf_float>
 810d3f6:	4607      	mov	r7, r0
 810d3f8:	1c78      	adds	r0, r7, #1
 810d3fa:	d1d6      	bne.n	810d3aa <_vfiprintf_r+0x19a>
 810d3fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810d3fe:	07d9      	lsls	r1, r3, #31
 810d400:	d405      	bmi.n	810d40e <_vfiprintf_r+0x1fe>
 810d402:	89ab      	ldrh	r3, [r5, #12]
 810d404:	059a      	lsls	r2, r3, #22
 810d406:	d402      	bmi.n	810d40e <_vfiprintf_r+0x1fe>
 810d408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810d40a:	f7fd facf 	bl	810a9ac <__retarget_lock_release_recursive>
 810d40e:	89ab      	ldrh	r3, [r5, #12]
 810d410:	065b      	lsls	r3, r3, #25
 810d412:	f53f af1f 	bmi.w	810d254 <_vfiprintf_r+0x44>
 810d416:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810d418:	e71e      	b.n	810d258 <_vfiprintf_r+0x48>
 810d41a:	ab03      	add	r3, sp, #12
 810d41c:	9300      	str	r3, [sp, #0]
 810d41e:	462a      	mov	r2, r5
 810d420:	4b05      	ldr	r3, [pc, #20]	@ (810d438 <_vfiprintf_r+0x228>)
 810d422:	a904      	add	r1, sp, #16
 810d424:	4630      	mov	r0, r6
 810d426:	f7fc fc9f 	bl	8109d68 <_printf_i>
 810d42a:	e7e4      	b.n	810d3f6 <_vfiprintf_r+0x1e6>
 810d42c:	0810ee49 	.word	0x0810ee49
 810d430:	0810ee53 	.word	0x0810ee53
 810d434:	08109839 	.word	0x08109839
 810d438:	0810d1eb 	.word	0x0810d1eb
 810d43c:	0810ee4f 	.word	0x0810ee4f

0810d440 <__sflush_r>:
 810d440:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810d444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d448:	0716      	lsls	r6, r2, #28
 810d44a:	4605      	mov	r5, r0
 810d44c:	460c      	mov	r4, r1
 810d44e:	d454      	bmi.n	810d4fa <__sflush_r+0xba>
 810d450:	684b      	ldr	r3, [r1, #4]
 810d452:	2b00      	cmp	r3, #0
 810d454:	dc02      	bgt.n	810d45c <__sflush_r+0x1c>
 810d456:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810d458:	2b00      	cmp	r3, #0
 810d45a:	dd48      	ble.n	810d4ee <__sflush_r+0xae>
 810d45c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810d45e:	2e00      	cmp	r6, #0
 810d460:	d045      	beq.n	810d4ee <__sflush_r+0xae>
 810d462:	2300      	movs	r3, #0
 810d464:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 810d468:	682f      	ldr	r7, [r5, #0]
 810d46a:	6a21      	ldr	r1, [r4, #32]
 810d46c:	602b      	str	r3, [r5, #0]
 810d46e:	d030      	beq.n	810d4d2 <__sflush_r+0x92>
 810d470:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810d472:	89a3      	ldrh	r3, [r4, #12]
 810d474:	0759      	lsls	r1, r3, #29
 810d476:	d505      	bpl.n	810d484 <__sflush_r+0x44>
 810d478:	6863      	ldr	r3, [r4, #4]
 810d47a:	1ad2      	subs	r2, r2, r3
 810d47c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810d47e:	b10b      	cbz	r3, 810d484 <__sflush_r+0x44>
 810d480:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810d482:	1ad2      	subs	r2, r2, r3
 810d484:	2300      	movs	r3, #0
 810d486:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810d488:	6a21      	ldr	r1, [r4, #32]
 810d48a:	4628      	mov	r0, r5
 810d48c:	47b0      	blx	r6
 810d48e:	1c43      	adds	r3, r0, #1
 810d490:	89a3      	ldrh	r3, [r4, #12]
 810d492:	d106      	bne.n	810d4a2 <__sflush_r+0x62>
 810d494:	6829      	ldr	r1, [r5, #0]
 810d496:	291d      	cmp	r1, #29
 810d498:	d82b      	bhi.n	810d4f2 <__sflush_r+0xb2>
 810d49a:	4a2a      	ldr	r2, [pc, #168]	@ (810d544 <__sflush_r+0x104>)
 810d49c:	410a      	asrs	r2, r1
 810d49e:	07d6      	lsls	r6, r2, #31
 810d4a0:	d427      	bmi.n	810d4f2 <__sflush_r+0xb2>
 810d4a2:	2200      	movs	r2, #0
 810d4a4:	6062      	str	r2, [r4, #4]
 810d4a6:	04d9      	lsls	r1, r3, #19
 810d4a8:	6922      	ldr	r2, [r4, #16]
 810d4aa:	6022      	str	r2, [r4, #0]
 810d4ac:	d504      	bpl.n	810d4b8 <__sflush_r+0x78>
 810d4ae:	1c42      	adds	r2, r0, #1
 810d4b0:	d101      	bne.n	810d4b6 <__sflush_r+0x76>
 810d4b2:	682b      	ldr	r3, [r5, #0]
 810d4b4:	b903      	cbnz	r3, 810d4b8 <__sflush_r+0x78>
 810d4b6:	6560      	str	r0, [r4, #84]	@ 0x54
 810d4b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810d4ba:	602f      	str	r7, [r5, #0]
 810d4bc:	b1b9      	cbz	r1, 810d4ee <__sflush_r+0xae>
 810d4be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810d4c2:	4299      	cmp	r1, r3
 810d4c4:	d002      	beq.n	810d4cc <__sflush_r+0x8c>
 810d4c6:	4628      	mov	r0, r5
 810d4c8:	f7fe f8ea 	bl	810b6a0 <_free_r>
 810d4cc:	2300      	movs	r3, #0
 810d4ce:	6363      	str	r3, [r4, #52]	@ 0x34
 810d4d0:	e00d      	b.n	810d4ee <__sflush_r+0xae>
 810d4d2:	2301      	movs	r3, #1
 810d4d4:	4628      	mov	r0, r5
 810d4d6:	47b0      	blx	r6
 810d4d8:	4602      	mov	r2, r0
 810d4da:	1c50      	adds	r0, r2, #1
 810d4dc:	d1c9      	bne.n	810d472 <__sflush_r+0x32>
 810d4de:	682b      	ldr	r3, [r5, #0]
 810d4e0:	2b00      	cmp	r3, #0
 810d4e2:	d0c6      	beq.n	810d472 <__sflush_r+0x32>
 810d4e4:	2b1d      	cmp	r3, #29
 810d4e6:	d001      	beq.n	810d4ec <__sflush_r+0xac>
 810d4e8:	2b16      	cmp	r3, #22
 810d4ea:	d11e      	bne.n	810d52a <__sflush_r+0xea>
 810d4ec:	602f      	str	r7, [r5, #0]
 810d4ee:	2000      	movs	r0, #0
 810d4f0:	e022      	b.n	810d538 <__sflush_r+0xf8>
 810d4f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810d4f6:	b21b      	sxth	r3, r3
 810d4f8:	e01b      	b.n	810d532 <__sflush_r+0xf2>
 810d4fa:	690f      	ldr	r7, [r1, #16]
 810d4fc:	2f00      	cmp	r7, #0
 810d4fe:	d0f6      	beq.n	810d4ee <__sflush_r+0xae>
 810d500:	0793      	lsls	r3, r2, #30
 810d502:	680e      	ldr	r6, [r1, #0]
 810d504:	bf08      	it	eq
 810d506:	694b      	ldreq	r3, [r1, #20]
 810d508:	600f      	str	r7, [r1, #0]
 810d50a:	bf18      	it	ne
 810d50c:	2300      	movne	r3, #0
 810d50e:	eba6 0807 	sub.w	r8, r6, r7
 810d512:	608b      	str	r3, [r1, #8]
 810d514:	f1b8 0f00 	cmp.w	r8, #0
 810d518:	dde9      	ble.n	810d4ee <__sflush_r+0xae>
 810d51a:	6a21      	ldr	r1, [r4, #32]
 810d51c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810d51e:	4643      	mov	r3, r8
 810d520:	463a      	mov	r2, r7
 810d522:	4628      	mov	r0, r5
 810d524:	47b0      	blx	r6
 810d526:	2800      	cmp	r0, #0
 810d528:	dc08      	bgt.n	810d53c <__sflush_r+0xfc>
 810d52a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d52e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810d532:	81a3      	strh	r3, [r4, #12]
 810d534:	f04f 30ff 	mov.w	r0, #4294967295
 810d538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d53c:	4407      	add	r7, r0
 810d53e:	eba8 0800 	sub.w	r8, r8, r0
 810d542:	e7e7      	b.n	810d514 <__sflush_r+0xd4>
 810d544:	dfbffffe 	.word	0xdfbffffe

0810d548 <_fflush_r>:
 810d548:	b538      	push	{r3, r4, r5, lr}
 810d54a:	690b      	ldr	r3, [r1, #16]
 810d54c:	4605      	mov	r5, r0
 810d54e:	460c      	mov	r4, r1
 810d550:	b913      	cbnz	r3, 810d558 <_fflush_r+0x10>
 810d552:	2500      	movs	r5, #0
 810d554:	4628      	mov	r0, r5
 810d556:	bd38      	pop	{r3, r4, r5, pc}
 810d558:	b118      	cbz	r0, 810d562 <_fflush_r+0x1a>
 810d55a:	6a03      	ldr	r3, [r0, #32]
 810d55c:	b90b      	cbnz	r3, 810d562 <_fflush_r+0x1a>
 810d55e:	f7fc ffc3 	bl	810a4e8 <__sinit>
 810d562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d566:	2b00      	cmp	r3, #0
 810d568:	d0f3      	beq.n	810d552 <_fflush_r+0xa>
 810d56a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 810d56c:	07d0      	lsls	r0, r2, #31
 810d56e:	d404      	bmi.n	810d57a <_fflush_r+0x32>
 810d570:	0599      	lsls	r1, r3, #22
 810d572:	d402      	bmi.n	810d57a <_fflush_r+0x32>
 810d574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810d576:	f7fd fa18 	bl	810a9aa <__retarget_lock_acquire_recursive>
 810d57a:	4628      	mov	r0, r5
 810d57c:	4621      	mov	r1, r4
 810d57e:	f7ff ff5f 	bl	810d440 <__sflush_r>
 810d582:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810d584:	07da      	lsls	r2, r3, #31
 810d586:	4605      	mov	r5, r0
 810d588:	d4e4      	bmi.n	810d554 <_fflush_r+0xc>
 810d58a:	89a3      	ldrh	r3, [r4, #12]
 810d58c:	059b      	lsls	r3, r3, #22
 810d58e:	d4e1      	bmi.n	810d554 <_fflush_r+0xc>
 810d590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810d592:	f7fd fa0b 	bl	810a9ac <__retarget_lock_release_recursive>
 810d596:	e7dd      	b.n	810d554 <_fflush_r+0xc>

0810d598 <__swhatbuf_r>:
 810d598:	b570      	push	{r4, r5, r6, lr}
 810d59a:	460c      	mov	r4, r1
 810d59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d5a0:	2900      	cmp	r1, #0
 810d5a2:	b096      	sub	sp, #88	@ 0x58
 810d5a4:	4615      	mov	r5, r2
 810d5a6:	461e      	mov	r6, r3
 810d5a8:	da0d      	bge.n	810d5c6 <__swhatbuf_r+0x2e>
 810d5aa:	89a3      	ldrh	r3, [r4, #12]
 810d5ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810d5b0:	f04f 0100 	mov.w	r1, #0
 810d5b4:	bf14      	ite	ne
 810d5b6:	2340      	movne	r3, #64	@ 0x40
 810d5b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 810d5bc:	2000      	movs	r0, #0
 810d5be:	6031      	str	r1, [r6, #0]
 810d5c0:	602b      	str	r3, [r5, #0]
 810d5c2:	b016      	add	sp, #88	@ 0x58
 810d5c4:	bd70      	pop	{r4, r5, r6, pc}
 810d5c6:	466a      	mov	r2, sp
 810d5c8:	f000 f8a4 	bl	810d714 <_fstat_r>
 810d5cc:	2800      	cmp	r0, #0
 810d5ce:	dbec      	blt.n	810d5aa <__swhatbuf_r+0x12>
 810d5d0:	9901      	ldr	r1, [sp, #4]
 810d5d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810d5d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810d5da:	4259      	negs	r1, r3
 810d5dc:	4159      	adcs	r1, r3
 810d5de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810d5e2:	e7eb      	b.n	810d5bc <__swhatbuf_r+0x24>

0810d5e4 <__smakebuf_r>:
 810d5e4:	898b      	ldrh	r3, [r1, #12]
 810d5e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810d5e8:	079d      	lsls	r5, r3, #30
 810d5ea:	4606      	mov	r6, r0
 810d5ec:	460c      	mov	r4, r1
 810d5ee:	d507      	bpl.n	810d600 <__smakebuf_r+0x1c>
 810d5f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 810d5f4:	6023      	str	r3, [r4, #0]
 810d5f6:	6123      	str	r3, [r4, #16]
 810d5f8:	2301      	movs	r3, #1
 810d5fa:	6163      	str	r3, [r4, #20]
 810d5fc:	b003      	add	sp, #12
 810d5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810d600:	ab01      	add	r3, sp, #4
 810d602:	466a      	mov	r2, sp
 810d604:	f7ff ffc8 	bl	810d598 <__swhatbuf_r>
 810d608:	9f00      	ldr	r7, [sp, #0]
 810d60a:	4605      	mov	r5, r0
 810d60c:	4639      	mov	r1, r7
 810d60e:	4630      	mov	r0, r6
 810d610:	f7fe f8ba 	bl	810b788 <_malloc_r>
 810d614:	b948      	cbnz	r0, 810d62a <__smakebuf_r+0x46>
 810d616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d61a:	059a      	lsls	r2, r3, #22
 810d61c:	d4ee      	bmi.n	810d5fc <__smakebuf_r+0x18>
 810d61e:	f023 0303 	bic.w	r3, r3, #3
 810d622:	f043 0302 	orr.w	r3, r3, #2
 810d626:	81a3      	strh	r3, [r4, #12]
 810d628:	e7e2      	b.n	810d5f0 <__smakebuf_r+0xc>
 810d62a:	89a3      	ldrh	r3, [r4, #12]
 810d62c:	6020      	str	r0, [r4, #0]
 810d62e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810d632:	81a3      	strh	r3, [r4, #12]
 810d634:	9b01      	ldr	r3, [sp, #4]
 810d636:	e9c4 0704 	strd	r0, r7, [r4, #16]
 810d63a:	b15b      	cbz	r3, 810d654 <__smakebuf_r+0x70>
 810d63c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810d640:	4630      	mov	r0, r6
 810d642:	f000 f879 	bl	810d738 <_isatty_r>
 810d646:	b128      	cbz	r0, 810d654 <__smakebuf_r+0x70>
 810d648:	89a3      	ldrh	r3, [r4, #12]
 810d64a:	f023 0303 	bic.w	r3, r3, #3
 810d64e:	f043 0301 	orr.w	r3, r3, #1
 810d652:	81a3      	strh	r3, [r4, #12]
 810d654:	89a3      	ldrh	r3, [r4, #12]
 810d656:	431d      	orrs	r5, r3
 810d658:	81a5      	strh	r5, [r4, #12]
 810d65a:	e7cf      	b.n	810d5fc <__smakebuf_r+0x18>

0810d65c <memmove>:
 810d65c:	4288      	cmp	r0, r1
 810d65e:	b510      	push	{r4, lr}
 810d660:	eb01 0402 	add.w	r4, r1, r2
 810d664:	d902      	bls.n	810d66c <memmove+0x10>
 810d666:	4284      	cmp	r4, r0
 810d668:	4623      	mov	r3, r4
 810d66a:	d807      	bhi.n	810d67c <memmove+0x20>
 810d66c:	1e43      	subs	r3, r0, #1
 810d66e:	42a1      	cmp	r1, r4
 810d670:	d008      	beq.n	810d684 <memmove+0x28>
 810d672:	f811 2b01 	ldrb.w	r2, [r1], #1
 810d676:	f803 2f01 	strb.w	r2, [r3, #1]!
 810d67a:	e7f8      	b.n	810d66e <memmove+0x12>
 810d67c:	4402      	add	r2, r0
 810d67e:	4601      	mov	r1, r0
 810d680:	428a      	cmp	r2, r1
 810d682:	d100      	bne.n	810d686 <memmove+0x2a>
 810d684:	bd10      	pop	{r4, pc}
 810d686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810d68a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810d68e:	e7f7      	b.n	810d680 <memmove+0x24>

0810d690 <strncmp>:
 810d690:	b510      	push	{r4, lr}
 810d692:	b16a      	cbz	r2, 810d6b0 <strncmp+0x20>
 810d694:	3901      	subs	r1, #1
 810d696:	1884      	adds	r4, r0, r2
 810d698:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d69c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810d6a0:	429a      	cmp	r2, r3
 810d6a2:	d103      	bne.n	810d6ac <strncmp+0x1c>
 810d6a4:	42a0      	cmp	r0, r4
 810d6a6:	d001      	beq.n	810d6ac <strncmp+0x1c>
 810d6a8:	2a00      	cmp	r2, #0
 810d6aa:	d1f5      	bne.n	810d698 <strncmp+0x8>
 810d6ac:	1ad0      	subs	r0, r2, r3
 810d6ae:	bd10      	pop	{r4, pc}
 810d6b0:	4610      	mov	r0, r2
 810d6b2:	e7fc      	b.n	810d6ae <strncmp+0x1e>

0810d6b4 <_raise_r>:
 810d6b4:	291f      	cmp	r1, #31
 810d6b6:	b538      	push	{r3, r4, r5, lr}
 810d6b8:	4605      	mov	r5, r0
 810d6ba:	460c      	mov	r4, r1
 810d6bc:	d904      	bls.n	810d6c8 <_raise_r+0x14>
 810d6be:	2316      	movs	r3, #22
 810d6c0:	6003      	str	r3, [r0, #0]
 810d6c2:	f04f 30ff 	mov.w	r0, #4294967295
 810d6c6:	bd38      	pop	{r3, r4, r5, pc}
 810d6c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 810d6ca:	b112      	cbz	r2, 810d6d2 <_raise_r+0x1e>
 810d6cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810d6d0:	b94b      	cbnz	r3, 810d6e6 <_raise_r+0x32>
 810d6d2:	4628      	mov	r0, r5
 810d6d4:	f000 f852 	bl	810d77c <_getpid_r>
 810d6d8:	4622      	mov	r2, r4
 810d6da:	4601      	mov	r1, r0
 810d6dc:	4628      	mov	r0, r5
 810d6de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810d6e2:	f000 b839 	b.w	810d758 <_kill_r>
 810d6e6:	2b01      	cmp	r3, #1
 810d6e8:	d00a      	beq.n	810d700 <_raise_r+0x4c>
 810d6ea:	1c59      	adds	r1, r3, #1
 810d6ec:	d103      	bne.n	810d6f6 <_raise_r+0x42>
 810d6ee:	2316      	movs	r3, #22
 810d6f0:	6003      	str	r3, [r0, #0]
 810d6f2:	2001      	movs	r0, #1
 810d6f4:	e7e7      	b.n	810d6c6 <_raise_r+0x12>
 810d6f6:	2100      	movs	r1, #0
 810d6f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 810d6fc:	4620      	mov	r0, r4
 810d6fe:	4798      	blx	r3
 810d700:	2000      	movs	r0, #0
 810d702:	e7e0      	b.n	810d6c6 <_raise_r+0x12>

0810d704 <raise>:
 810d704:	4b02      	ldr	r3, [pc, #8]	@ (810d710 <raise+0xc>)
 810d706:	4601      	mov	r1, r0
 810d708:	6818      	ldr	r0, [r3, #0]
 810d70a:	f7ff bfd3 	b.w	810d6b4 <_raise_r>
 810d70e:	bf00      	nop
 810d710:	1000002c 	.word	0x1000002c

0810d714 <_fstat_r>:
 810d714:	b538      	push	{r3, r4, r5, lr}
 810d716:	4d07      	ldr	r5, [pc, #28]	@ (810d734 <_fstat_r+0x20>)
 810d718:	2300      	movs	r3, #0
 810d71a:	4604      	mov	r4, r0
 810d71c:	4608      	mov	r0, r1
 810d71e:	4611      	mov	r1, r2
 810d720:	602b      	str	r3, [r5, #0]
 810d722:	f7f6 f9ac 	bl	8103a7e <_fstat>
 810d726:	1c43      	adds	r3, r0, #1
 810d728:	d102      	bne.n	810d730 <_fstat_r+0x1c>
 810d72a:	682b      	ldr	r3, [r5, #0]
 810d72c:	b103      	cbz	r3, 810d730 <_fstat_r+0x1c>
 810d72e:	6023      	str	r3, [r4, #0]
 810d730:	bd38      	pop	{r3, r4, r5, pc}
 810d732:	bf00      	nop
 810d734:	10000a94 	.word	0x10000a94

0810d738 <_isatty_r>:
 810d738:	b538      	push	{r3, r4, r5, lr}
 810d73a:	4d06      	ldr	r5, [pc, #24]	@ (810d754 <_isatty_r+0x1c>)
 810d73c:	2300      	movs	r3, #0
 810d73e:	4604      	mov	r4, r0
 810d740:	4608      	mov	r0, r1
 810d742:	602b      	str	r3, [r5, #0]
 810d744:	f7f6 f9ab 	bl	8103a9e <_isatty>
 810d748:	1c43      	adds	r3, r0, #1
 810d74a:	d102      	bne.n	810d752 <_isatty_r+0x1a>
 810d74c:	682b      	ldr	r3, [r5, #0]
 810d74e:	b103      	cbz	r3, 810d752 <_isatty_r+0x1a>
 810d750:	6023      	str	r3, [r4, #0]
 810d752:	bd38      	pop	{r3, r4, r5, pc}
 810d754:	10000a94 	.word	0x10000a94

0810d758 <_kill_r>:
 810d758:	b538      	push	{r3, r4, r5, lr}
 810d75a:	4d07      	ldr	r5, [pc, #28]	@ (810d778 <_kill_r+0x20>)
 810d75c:	2300      	movs	r3, #0
 810d75e:	4604      	mov	r4, r0
 810d760:	4608      	mov	r0, r1
 810d762:	4611      	mov	r1, r2
 810d764:	602b      	str	r3, [r5, #0]
 810d766:	f7f6 f928 	bl	81039ba <_kill>
 810d76a:	1c43      	adds	r3, r0, #1
 810d76c:	d102      	bne.n	810d774 <_kill_r+0x1c>
 810d76e:	682b      	ldr	r3, [r5, #0]
 810d770:	b103      	cbz	r3, 810d774 <_kill_r+0x1c>
 810d772:	6023      	str	r3, [r4, #0]
 810d774:	bd38      	pop	{r3, r4, r5, pc}
 810d776:	bf00      	nop
 810d778:	10000a94 	.word	0x10000a94

0810d77c <_getpid_r>:
 810d77c:	f7f6 b915 	b.w	81039aa <_getpid>

0810d780 <_sbrk_r>:
 810d780:	b538      	push	{r3, r4, r5, lr}
 810d782:	4d06      	ldr	r5, [pc, #24]	@ (810d79c <_sbrk_r+0x1c>)
 810d784:	2300      	movs	r3, #0
 810d786:	4604      	mov	r4, r0
 810d788:	4608      	mov	r0, r1
 810d78a:	602b      	str	r3, [r5, #0]
 810d78c:	f7f6 f9a0 	bl	8103ad0 <_sbrk>
 810d790:	1c43      	adds	r3, r0, #1
 810d792:	d102      	bne.n	810d79a <_sbrk_r+0x1a>
 810d794:	682b      	ldr	r3, [r5, #0]
 810d796:	b103      	cbz	r3, 810d79a <_sbrk_r+0x1a>
 810d798:	6023      	str	r3, [r4, #0]
 810d79a:	bd38      	pop	{r3, r4, r5, pc}
 810d79c:	10000a94 	.word	0x10000a94

0810d7a0 <nan>:
 810d7a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 810d7a8 <nan+0x8>
 810d7a4:	4770      	bx	lr
 810d7a6:	bf00      	nop
 810d7a8:	00000000 	.word	0x00000000
 810d7ac:	7ff80000 	.word	0x7ff80000

0810d7b0 <_calloc_r>:
 810d7b0:	b570      	push	{r4, r5, r6, lr}
 810d7b2:	fba1 5402 	umull	r5, r4, r1, r2
 810d7b6:	b93c      	cbnz	r4, 810d7c8 <_calloc_r+0x18>
 810d7b8:	4629      	mov	r1, r5
 810d7ba:	f7fd ffe5 	bl	810b788 <_malloc_r>
 810d7be:	4606      	mov	r6, r0
 810d7c0:	b928      	cbnz	r0, 810d7ce <_calloc_r+0x1e>
 810d7c2:	2600      	movs	r6, #0
 810d7c4:	4630      	mov	r0, r6
 810d7c6:	bd70      	pop	{r4, r5, r6, pc}
 810d7c8:	220c      	movs	r2, #12
 810d7ca:	6002      	str	r2, [r0, #0]
 810d7cc:	e7f9      	b.n	810d7c2 <_calloc_r+0x12>
 810d7ce:	462a      	mov	r2, r5
 810d7d0:	4621      	mov	r1, r4
 810d7d2:	f7fd f86d 	bl	810a8b0 <memset>
 810d7d6:	e7f5      	b.n	810d7c4 <_calloc_r+0x14>

0810d7d8 <rshift>:
 810d7d8:	6903      	ldr	r3, [r0, #16]
 810d7da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810d7de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810d7e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 810d7e6:	f100 0414 	add.w	r4, r0, #20
 810d7ea:	dd45      	ble.n	810d878 <rshift+0xa0>
 810d7ec:	f011 011f 	ands.w	r1, r1, #31
 810d7f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810d7f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810d7f8:	d10c      	bne.n	810d814 <rshift+0x3c>
 810d7fa:	f100 0710 	add.w	r7, r0, #16
 810d7fe:	4629      	mov	r1, r5
 810d800:	42b1      	cmp	r1, r6
 810d802:	d334      	bcc.n	810d86e <rshift+0x96>
 810d804:	1a9b      	subs	r3, r3, r2
 810d806:	009b      	lsls	r3, r3, #2
 810d808:	1eea      	subs	r2, r5, #3
 810d80a:	4296      	cmp	r6, r2
 810d80c:	bf38      	it	cc
 810d80e:	2300      	movcc	r3, #0
 810d810:	4423      	add	r3, r4
 810d812:	e015      	b.n	810d840 <rshift+0x68>
 810d814:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810d818:	f1c1 0820 	rsb	r8, r1, #32
 810d81c:	40cf      	lsrs	r7, r1
 810d81e:	f105 0e04 	add.w	lr, r5, #4
 810d822:	46a1      	mov	r9, r4
 810d824:	4576      	cmp	r6, lr
 810d826:	46f4      	mov	ip, lr
 810d828:	d815      	bhi.n	810d856 <rshift+0x7e>
 810d82a:	1a9a      	subs	r2, r3, r2
 810d82c:	0092      	lsls	r2, r2, #2
 810d82e:	3a04      	subs	r2, #4
 810d830:	3501      	adds	r5, #1
 810d832:	42ae      	cmp	r6, r5
 810d834:	bf38      	it	cc
 810d836:	2200      	movcc	r2, #0
 810d838:	18a3      	adds	r3, r4, r2
 810d83a:	50a7      	str	r7, [r4, r2]
 810d83c:	b107      	cbz	r7, 810d840 <rshift+0x68>
 810d83e:	3304      	adds	r3, #4
 810d840:	1b1a      	subs	r2, r3, r4
 810d842:	42a3      	cmp	r3, r4
 810d844:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810d848:	bf08      	it	eq
 810d84a:	2300      	moveq	r3, #0
 810d84c:	6102      	str	r2, [r0, #16]
 810d84e:	bf08      	it	eq
 810d850:	6143      	streq	r3, [r0, #20]
 810d852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810d856:	f8dc c000 	ldr.w	ip, [ip]
 810d85a:	fa0c fc08 	lsl.w	ip, ip, r8
 810d85e:	ea4c 0707 	orr.w	r7, ip, r7
 810d862:	f849 7b04 	str.w	r7, [r9], #4
 810d866:	f85e 7b04 	ldr.w	r7, [lr], #4
 810d86a:	40cf      	lsrs	r7, r1
 810d86c:	e7da      	b.n	810d824 <rshift+0x4c>
 810d86e:	f851 cb04 	ldr.w	ip, [r1], #4
 810d872:	f847 cf04 	str.w	ip, [r7, #4]!
 810d876:	e7c3      	b.n	810d800 <rshift+0x28>
 810d878:	4623      	mov	r3, r4
 810d87a:	e7e1      	b.n	810d840 <rshift+0x68>

0810d87c <__hexdig_fun>:
 810d87c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 810d880:	2b09      	cmp	r3, #9
 810d882:	d802      	bhi.n	810d88a <__hexdig_fun+0xe>
 810d884:	3820      	subs	r0, #32
 810d886:	b2c0      	uxtb	r0, r0
 810d888:	4770      	bx	lr
 810d88a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 810d88e:	2b05      	cmp	r3, #5
 810d890:	d801      	bhi.n	810d896 <__hexdig_fun+0x1a>
 810d892:	3847      	subs	r0, #71	@ 0x47
 810d894:	e7f7      	b.n	810d886 <__hexdig_fun+0xa>
 810d896:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 810d89a:	2b05      	cmp	r3, #5
 810d89c:	d801      	bhi.n	810d8a2 <__hexdig_fun+0x26>
 810d89e:	3827      	subs	r0, #39	@ 0x27
 810d8a0:	e7f1      	b.n	810d886 <__hexdig_fun+0xa>
 810d8a2:	2000      	movs	r0, #0
 810d8a4:	4770      	bx	lr
	...

0810d8a8 <__gethex>:
 810d8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d8ac:	b085      	sub	sp, #20
 810d8ae:	468a      	mov	sl, r1
 810d8b0:	9302      	str	r3, [sp, #8]
 810d8b2:	680b      	ldr	r3, [r1, #0]
 810d8b4:	9001      	str	r0, [sp, #4]
 810d8b6:	4690      	mov	r8, r2
 810d8b8:	1c9c      	adds	r4, r3, #2
 810d8ba:	46a1      	mov	r9, r4
 810d8bc:	f814 0b01 	ldrb.w	r0, [r4], #1
 810d8c0:	2830      	cmp	r0, #48	@ 0x30
 810d8c2:	d0fa      	beq.n	810d8ba <__gethex+0x12>
 810d8c4:	eba9 0303 	sub.w	r3, r9, r3
 810d8c8:	f1a3 0b02 	sub.w	fp, r3, #2
 810d8cc:	f7ff ffd6 	bl	810d87c <__hexdig_fun>
 810d8d0:	4605      	mov	r5, r0
 810d8d2:	2800      	cmp	r0, #0
 810d8d4:	d168      	bne.n	810d9a8 <__gethex+0x100>
 810d8d6:	49a0      	ldr	r1, [pc, #640]	@ (810db58 <__gethex+0x2b0>)
 810d8d8:	2201      	movs	r2, #1
 810d8da:	4648      	mov	r0, r9
 810d8dc:	f7ff fed8 	bl	810d690 <strncmp>
 810d8e0:	4607      	mov	r7, r0
 810d8e2:	2800      	cmp	r0, #0
 810d8e4:	d167      	bne.n	810d9b6 <__gethex+0x10e>
 810d8e6:	f899 0001 	ldrb.w	r0, [r9, #1]
 810d8ea:	4626      	mov	r6, r4
 810d8ec:	f7ff ffc6 	bl	810d87c <__hexdig_fun>
 810d8f0:	2800      	cmp	r0, #0
 810d8f2:	d062      	beq.n	810d9ba <__gethex+0x112>
 810d8f4:	4623      	mov	r3, r4
 810d8f6:	7818      	ldrb	r0, [r3, #0]
 810d8f8:	2830      	cmp	r0, #48	@ 0x30
 810d8fa:	4699      	mov	r9, r3
 810d8fc:	f103 0301 	add.w	r3, r3, #1
 810d900:	d0f9      	beq.n	810d8f6 <__gethex+0x4e>
 810d902:	f7ff ffbb 	bl	810d87c <__hexdig_fun>
 810d906:	fab0 f580 	clz	r5, r0
 810d90a:	096d      	lsrs	r5, r5, #5
 810d90c:	f04f 0b01 	mov.w	fp, #1
 810d910:	464a      	mov	r2, r9
 810d912:	4616      	mov	r6, r2
 810d914:	3201      	adds	r2, #1
 810d916:	7830      	ldrb	r0, [r6, #0]
 810d918:	f7ff ffb0 	bl	810d87c <__hexdig_fun>
 810d91c:	2800      	cmp	r0, #0
 810d91e:	d1f8      	bne.n	810d912 <__gethex+0x6a>
 810d920:	498d      	ldr	r1, [pc, #564]	@ (810db58 <__gethex+0x2b0>)
 810d922:	2201      	movs	r2, #1
 810d924:	4630      	mov	r0, r6
 810d926:	f7ff feb3 	bl	810d690 <strncmp>
 810d92a:	2800      	cmp	r0, #0
 810d92c:	d13f      	bne.n	810d9ae <__gethex+0x106>
 810d92e:	b944      	cbnz	r4, 810d942 <__gethex+0x9a>
 810d930:	1c74      	adds	r4, r6, #1
 810d932:	4622      	mov	r2, r4
 810d934:	4616      	mov	r6, r2
 810d936:	3201      	adds	r2, #1
 810d938:	7830      	ldrb	r0, [r6, #0]
 810d93a:	f7ff ff9f 	bl	810d87c <__hexdig_fun>
 810d93e:	2800      	cmp	r0, #0
 810d940:	d1f8      	bne.n	810d934 <__gethex+0x8c>
 810d942:	1ba4      	subs	r4, r4, r6
 810d944:	00a7      	lsls	r7, r4, #2
 810d946:	7833      	ldrb	r3, [r6, #0]
 810d948:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 810d94c:	2b50      	cmp	r3, #80	@ 0x50
 810d94e:	d13e      	bne.n	810d9ce <__gethex+0x126>
 810d950:	7873      	ldrb	r3, [r6, #1]
 810d952:	2b2b      	cmp	r3, #43	@ 0x2b
 810d954:	d033      	beq.n	810d9be <__gethex+0x116>
 810d956:	2b2d      	cmp	r3, #45	@ 0x2d
 810d958:	d034      	beq.n	810d9c4 <__gethex+0x11c>
 810d95a:	1c71      	adds	r1, r6, #1
 810d95c:	2400      	movs	r4, #0
 810d95e:	7808      	ldrb	r0, [r1, #0]
 810d960:	f7ff ff8c 	bl	810d87c <__hexdig_fun>
 810d964:	1e43      	subs	r3, r0, #1
 810d966:	b2db      	uxtb	r3, r3
 810d968:	2b18      	cmp	r3, #24
 810d96a:	d830      	bhi.n	810d9ce <__gethex+0x126>
 810d96c:	f1a0 0210 	sub.w	r2, r0, #16
 810d970:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810d974:	f7ff ff82 	bl	810d87c <__hexdig_fun>
 810d978:	f100 3cff 	add.w	ip, r0, #4294967295
 810d97c:	fa5f fc8c 	uxtb.w	ip, ip
 810d980:	f1bc 0f18 	cmp.w	ip, #24
 810d984:	f04f 030a 	mov.w	r3, #10
 810d988:	d91e      	bls.n	810d9c8 <__gethex+0x120>
 810d98a:	b104      	cbz	r4, 810d98e <__gethex+0xe6>
 810d98c:	4252      	negs	r2, r2
 810d98e:	4417      	add	r7, r2
 810d990:	f8ca 1000 	str.w	r1, [sl]
 810d994:	b1ed      	cbz	r5, 810d9d2 <__gethex+0x12a>
 810d996:	f1bb 0f00 	cmp.w	fp, #0
 810d99a:	bf0c      	ite	eq
 810d99c:	2506      	moveq	r5, #6
 810d99e:	2500      	movne	r5, #0
 810d9a0:	4628      	mov	r0, r5
 810d9a2:	b005      	add	sp, #20
 810d9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d9a8:	2500      	movs	r5, #0
 810d9aa:	462c      	mov	r4, r5
 810d9ac:	e7b0      	b.n	810d910 <__gethex+0x68>
 810d9ae:	2c00      	cmp	r4, #0
 810d9b0:	d1c7      	bne.n	810d942 <__gethex+0x9a>
 810d9b2:	4627      	mov	r7, r4
 810d9b4:	e7c7      	b.n	810d946 <__gethex+0x9e>
 810d9b6:	464e      	mov	r6, r9
 810d9b8:	462f      	mov	r7, r5
 810d9ba:	2501      	movs	r5, #1
 810d9bc:	e7c3      	b.n	810d946 <__gethex+0x9e>
 810d9be:	2400      	movs	r4, #0
 810d9c0:	1cb1      	adds	r1, r6, #2
 810d9c2:	e7cc      	b.n	810d95e <__gethex+0xb6>
 810d9c4:	2401      	movs	r4, #1
 810d9c6:	e7fb      	b.n	810d9c0 <__gethex+0x118>
 810d9c8:	fb03 0002 	mla	r0, r3, r2, r0
 810d9cc:	e7ce      	b.n	810d96c <__gethex+0xc4>
 810d9ce:	4631      	mov	r1, r6
 810d9d0:	e7de      	b.n	810d990 <__gethex+0xe8>
 810d9d2:	eba6 0309 	sub.w	r3, r6, r9
 810d9d6:	3b01      	subs	r3, #1
 810d9d8:	4629      	mov	r1, r5
 810d9da:	2b07      	cmp	r3, #7
 810d9dc:	dc0a      	bgt.n	810d9f4 <__gethex+0x14c>
 810d9de:	9801      	ldr	r0, [sp, #4]
 810d9e0:	f7fd ff5e 	bl	810b8a0 <_Balloc>
 810d9e4:	4604      	mov	r4, r0
 810d9e6:	b940      	cbnz	r0, 810d9fa <__gethex+0x152>
 810d9e8:	4b5c      	ldr	r3, [pc, #368]	@ (810db5c <__gethex+0x2b4>)
 810d9ea:	4602      	mov	r2, r0
 810d9ec:	21e4      	movs	r1, #228	@ 0xe4
 810d9ee:	485c      	ldr	r0, [pc, #368]	@ (810db60 <__gethex+0x2b8>)
 810d9f0:	f7fb fe64 	bl	81096bc <__assert_func>
 810d9f4:	3101      	adds	r1, #1
 810d9f6:	105b      	asrs	r3, r3, #1
 810d9f8:	e7ef      	b.n	810d9da <__gethex+0x132>
 810d9fa:	f100 0a14 	add.w	sl, r0, #20
 810d9fe:	2300      	movs	r3, #0
 810da00:	4655      	mov	r5, sl
 810da02:	469b      	mov	fp, r3
 810da04:	45b1      	cmp	r9, r6
 810da06:	d337      	bcc.n	810da78 <__gethex+0x1d0>
 810da08:	f845 bb04 	str.w	fp, [r5], #4
 810da0c:	eba5 050a 	sub.w	r5, r5, sl
 810da10:	10ad      	asrs	r5, r5, #2
 810da12:	6125      	str	r5, [r4, #16]
 810da14:	4658      	mov	r0, fp
 810da16:	f7fe f835 	bl	810ba84 <__hi0bits>
 810da1a:	016d      	lsls	r5, r5, #5
 810da1c:	f8d8 6000 	ldr.w	r6, [r8]
 810da20:	1a2d      	subs	r5, r5, r0
 810da22:	42b5      	cmp	r5, r6
 810da24:	dd54      	ble.n	810dad0 <__gethex+0x228>
 810da26:	1bad      	subs	r5, r5, r6
 810da28:	4629      	mov	r1, r5
 810da2a:	4620      	mov	r0, r4
 810da2c:	f7fe fbc9 	bl	810c1c2 <__any_on>
 810da30:	4681      	mov	r9, r0
 810da32:	b178      	cbz	r0, 810da54 <__gethex+0x1ac>
 810da34:	1e6b      	subs	r3, r5, #1
 810da36:	1159      	asrs	r1, r3, #5
 810da38:	f003 021f 	and.w	r2, r3, #31
 810da3c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 810da40:	f04f 0901 	mov.w	r9, #1
 810da44:	fa09 f202 	lsl.w	r2, r9, r2
 810da48:	420a      	tst	r2, r1
 810da4a:	d003      	beq.n	810da54 <__gethex+0x1ac>
 810da4c:	454b      	cmp	r3, r9
 810da4e:	dc36      	bgt.n	810dabe <__gethex+0x216>
 810da50:	f04f 0902 	mov.w	r9, #2
 810da54:	4629      	mov	r1, r5
 810da56:	4620      	mov	r0, r4
 810da58:	f7ff febe 	bl	810d7d8 <rshift>
 810da5c:	442f      	add	r7, r5
 810da5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810da62:	42bb      	cmp	r3, r7
 810da64:	da42      	bge.n	810daec <__gethex+0x244>
 810da66:	9801      	ldr	r0, [sp, #4]
 810da68:	4621      	mov	r1, r4
 810da6a:	f7fd ff59 	bl	810b920 <_Bfree>
 810da6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810da70:	2300      	movs	r3, #0
 810da72:	6013      	str	r3, [r2, #0]
 810da74:	25a3      	movs	r5, #163	@ 0xa3
 810da76:	e793      	b.n	810d9a0 <__gethex+0xf8>
 810da78:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 810da7c:	2a2e      	cmp	r2, #46	@ 0x2e
 810da7e:	d012      	beq.n	810daa6 <__gethex+0x1fe>
 810da80:	2b20      	cmp	r3, #32
 810da82:	d104      	bne.n	810da8e <__gethex+0x1e6>
 810da84:	f845 bb04 	str.w	fp, [r5], #4
 810da88:	f04f 0b00 	mov.w	fp, #0
 810da8c:	465b      	mov	r3, fp
 810da8e:	7830      	ldrb	r0, [r6, #0]
 810da90:	9303      	str	r3, [sp, #12]
 810da92:	f7ff fef3 	bl	810d87c <__hexdig_fun>
 810da96:	9b03      	ldr	r3, [sp, #12]
 810da98:	f000 000f 	and.w	r0, r0, #15
 810da9c:	4098      	lsls	r0, r3
 810da9e:	ea4b 0b00 	orr.w	fp, fp, r0
 810daa2:	3304      	adds	r3, #4
 810daa4:	e7ae      	b.n	810da04 <__gethex+0x15c>
 810daa6:	45b1      	cmp	r9, r6
 810daa8:	d8ea      	bhi.n	810da80 <__gethex+0x1d8>
 810daaa:	492b      	ldr	r1, [pc, #172]	@ (810db58 <__gethex+0x2b0>)
 810daac:	9303      	str	r3, [sp, #12]
 810daae:	2201      	movs	r2, #1
 810dab0:	4630      	mov	r0, r6
 810dab2:	f7ff fded 	bl	810d690 <strncmp>
 810dab6:	9b03      	ldr	r3, [sp, #12]
 810dab8:	2800      	cmp	r0, #0
 810daba:	d1e1      	bne.n	810da80 <__gethex+0x1d8>
 810dabc:	e7a2      	b.n	810da04 <__gethex+0x15c>
 810dabe:	1ea9      	subs	r1, r5, #2
 810dac0:	4620      	mov	r0, r4
 810dac2:	f7fe fb7e 	bl	810c1c2 <__any_on>
 810dac6:	2800      	cmp	r0, #0
 810dac8:	d0c2      	beq.n	810da50 <__gethex+0x1a8>
 810daca:	f04f 0903 	mov.w	r9, #3
 810dace:	e7c1      	b.n	810da54 <__gethex+0x1ac>
 810dad0:	da09      	bge.n	810dae6 <__gethex+0x23e>
 810dad2:	1b75      	subs	r5, r6, r5
 810dad4:	4621      	mov	r1, r4
 810dad6:	9801      	ldr	r0, [sp, #4]
 810dad8:	462a      	mov	r2, r5
 810dada:	f7fe f939 	bl	810bd50 <__lshift>
 810dade:	1b7f      	subs	r7, r7, r5
 810dae0:	4604      	mov	r4, r0
 810dae2:	f100 0a14 	add.w	sl, r0, #20
 810dae6:	f04f 0900 	mov.w	r9, #0
 810daea:	e7b8      	b.n	810da5e <__gethex+0x1b6>
 810daec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810daf0:	42bd      	cmp	r5, r7
 810daf2:	dd6f      	ble.n	810dbd4 <__gethex+0x32c>
 810daf4:	1bed      	subs	r5, r5, r7
 810daf6:	42ae      	cmp	r6, r5
 810daf8:	dc34      	bgt.n	810db64 <__gethex+0x2bc>
 810dafa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810dafe:	2b02      	cmp	r3, #2
 810db00:	d022      	beq.n	810db48 <__gethex+0x2a0>
 810db02:	2b03      	cmp	r3, #3
 810db04:	d024      	beq.n	810db50 <__gethex+0x2a8>
 810db06:	2b01      	cmp	r3, #1
 810db08:	d115      	bne.n	810db36 <__gethex+0x28e>
 810db0a:	42ae      	cmp	r6, r5
 810db0c:	d113      	bne.n	810db36 <__gethex+0x28e>
 810db0e:	2e01      	cmp	r6, #1
 810db10:	d10b      	bne.n	810db2a <__gethex+0x282>
 810db12:	9a02      	ldr	r2, [sp, #8]
 810db14:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810db18:	6013      	str	r3, [r2, #0]
 810db1a:	2301      	movs	r3, #1
 810db1c:	6123      	str	r3, [r4, #16]
 810db1e:	f8ca 3000 	str.w	r3, [sl]
 810db22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810db24:	2562      	movs	r5, #98	@ 0x62
 810db26:	601c      	str	r4, [r3, #0]
 810db28:	e73a      	b.n	810d9a0 <__gethex+0xf8>
 810db2a:	1e71      	subs	r1, r6, #1
 810db2c:	4620      	mov	r0, r4
 810db2e:	f7fe fb48 	bl	810c1c2 <__any_on>
 810db32:	2800      	cmp	r0, #0
 810db34:	d1ed      	bne.n	810db12 <__gethex+0x26a>
 810db36:	9801      	ldr	r0, [sp, #4]
 810db38:	4621      	mov	r1, r4
 810db3a:	f7fd fef1 	bl	810b920 <_Bfree>
 810db3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810db40:	2300      	movs	r3, #0
 810db42:	6013      	str	r3, [r2, #0]
 810db44:	2550      	movs	r5, #80	@ 0x50
 810db46:	e72b      	b.n	810d9a0 <__gethex+0xf8>
 810db48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810db4a:	2b00      	cmp	r3, #0
 810db4c:	d1f3      	bne.n	810db36 <__gethex+0x28e>
 810db4e:	e7e0      	b.n	810db12 <__gethex+0x26a>
 810db50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810db52:	2b00      	cmp	r3, #0
 810db54:	d1dd      	bne.n	810db12 <__gethex+0x26a>
 810db56:	e7ee      	b.n	810db36 <__gethex+0x28e>
 810db58:	0810ecf0 	.word	0x0810ecf0
 810db5c:	0810eb89 	.word	0x0810eb89
 810db60:	0810ee62 	.word	0x0810ee62
 810db64:	1e6f      	subs	r7, r5, #1
 810db66:	f1b9 0f00 	cmp.w	r9, #0
 810db6a:	d130      	bne.n	810dbce <__gethex+0x326>
 810db6c:	b127      	cbz	r7, 810db78 <__gethex+0x2d0>
 810db6e:	4639      	mov	r1, r7
 810db70:	4620      	mov	r0, r4
 810db72:	f7fe fb26 	bl	810c1c2 <__any_on>
 810db76:	4681      	mov	r9, r0
 810db78:	117a      	asrs	r2, r7, #5
 810db7a:	2301      	movs	r3, #1
 810db7c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 810db80:	f007 071f 	and.w	r7, r7, #31
 810db84:	40bb      	lsls	r3, r7
 810db86:	4213      	tst	r3, r2
 810db88:	4629      	mov	r1, r5
 810db8a:	4620      	mov	r0, r4
 810db8c:	bf18      	it	ne
 810db8e:	f049 0902 	orrne.w	r9, r9, #2
 810db92:	f7ff fe21 	bl	810d7d8 <rshift>
 810db96:	f8d8 7004 	ldr.w	r7, [r8, #4]
 810db9a:	1b76      	subs	r6, r6, r5
 810db9c:	2502      	movs	r5, #2
 810db9e:	f1b9 0f00 	cmp.w	r9, #0
 810dba2:	d047      	beq.n	810dc34 <__gethex+0x38c>
 810dba4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810dba8:	2b02      	cmp	r3, #2
 810dbaa:	d015      	beq.n	810dbd8 <__gethex+0x330>
 810dbac:	2b03      	cmp	r3, #3
 810dbae:	d017      	beq.n	810dbe0 <__gethex+0x338>
 810dbb0:	2b01      	cmp	r3, #1
 810dbb2:	d109      	bne.n	810dbc8 <__gethex+0x320>
 810dbb4:	f019 0f02 	tst.w	r9, #2
 810dbb8:	d006      	beq.n	810dbc8 <__gethex+0x320>
 810dbba:	f8da 3000 	ldr.w	r3, [sl]
 810dbbe:	ea49 0903 	orr.w	r9, r9, r3
 810dbc2:	f019 0f01 	tst.w	r9, #1
 810dbc6:	d10e      	bne.n	810dbe6 <__gethex+0x33e>
 810dbc8:	f045 0510 	orr.w	r5, r5, #16
 810dbcc:	e032      	b.n	810dc34 <__gethex+0x38c>
 810dbce:	f04f 0901 	mov.w	r9, #1
 810dbd2:	e7d1      	b.n	810db78 <__gethex+0x2d0>
 810dbd4:	2501      	movs	r5, #1
 810dbd6:	e7e2      	b.n	810db9e <__gethex+0x2f6>
 810dbd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810dbda:	f1c3 0301 	rsb	r3, r3, #1
 810dbde:	930f      	str	r3, [sp, #60]	@ 0x3c
 810dbe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810dbe2:	2b00      	cmp	r3, #0
 810dbe4:	d0f0      	beq.n	810dbc8 <__gethex+0x320>
 810dbe6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810dbea:	f104 0314 	add.w	r3, r4, #20
 810dbee:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810dbf2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810dbf6:	f04f 0c00 	mov.w	ip, #0
 810dbfa:	4618      	mov	r0, r3
 810dbfc:	f853 2b04 	ldr.w	r2, [r3], #4
 810dc00:	f1b2 3fff 	cmp.w	r2, #4294967295
 810dc04:	d01b      	beq.n	810dc3e <__gethex+0x396>
 810dc06:	3201      	adds	r2, #1
 810dc08:	6002      	str	r2, [r0, #0]
 810dc0a:	2d02      	cmp	r5, #2
 810dc0c:	f104 0314 	add.w	r3, r4, #20
 810dc10:	d13c      	bne.n	810dc8c <__gethex+0x3e4>
 810dc12:	f8d8 2000 	ldr.w	r2, [r8]
 810dc16:	3a01      	subs	r2, #1
 810dc18:	42b2      	cmp	r2, r6
 810dc1a:	d109      	bne.n	810dc30 <__gethex+0x388>
 810dc1c:	1171      	asrs	r1, r6, #5
 810dc1e:	2201      	movs	r2, #1
 810dc20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810dc24:	f006 061f 	and.w	r6, r6, #31
 810dc28:	fa02 f606 	lsl.w	r6, r2, r6
 810dc2c:	421e      	tst	r6, r3
 810dc2e:	d13a      	bne.n	810dca6 <__gethex+0x3fe>
 810dc30:	f045 0520 	orr.w	r5, r5, #32
 810dc34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810dc36:	601c      	str	r4, [r3, #0]
 810dc38:	9b02      	ldr	r3, [sp, #8]
 810dc3a:	601f      	str	r7, [r3, #0]
 810dc3c:	e6b0      	b.n	810d9a0 <__gethex+0xf8>
 810dc3e:	4299      	cmp	r1, r3
 810dc40:	f843 cc04 	str.w	ip, [r3, #-4]
 810dc44:	d8d9      	bhi.n	810dbfa <__gethex+0x352>
 810dc46:	68a3      	ldr	r3, [r4, #8]
 810dc48:	459b      	cmp	fp, r3
 810dc4a:	db17      	blt.n	810dc7c <__gethex+0x3d4>
 810dc4c:	6861      	ldr	r1, [r4, #4]
 810dc4e:	9801      	ldr	r0, [sp, #4]
 810dc50:	3101      	adds	r1, #1
 810dc52:	f7fd fe25 	bl	810b8a0 <_Balloc>
 810dc56:	4681      	mov	r9, r0
 810dc58:	b918      	cbnz	r0, 810dc62 <__gethex+0x3ba>
 810dc5a:	4b1a      	ldr	r3, [pc, #104]	@ (810dcc4 <__gethex+0x41c>)
 810dc5c:	4602      	mov	r2, r0
 810dc5e:	2184      	movs	r1, #132	@ 0x84
 810dc60:	e6c5      	b.n	810d9ee <__gethex+0x146>
 810dc62:	6922      	ldr	r2, [r4, #16]
 810dc64:	3202      	adds	r2, #2
 810dc66:	f104 010c 	add.w	r1, r4, #12
 810dc6a:	0092      	lsls	r2, r2, #2
 810dc6c:	300c      	adds	r0, #12
 810dc6e:	f7fc fe9e 	bl	810a9ae <memcpy>
 810dc72:	4621      	mov	r1, r4
 810dc74:	9801      	ldr	r0, [sp, #4]
 810dc76:	f7fd fe53 	bl	810b920 <_Bfree>
 810dc7a:	464c      	mov	r4, r9
 810dc7c:	6923      	ldr	r3, [r4, #16]
 810dc7e:	1c5a      	adds	r2, r3, #1
 810dc80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810dc84:	6122      	str	r2, [r4, #16]
 810dc86:	2201      	movs	r2, #1
 810dc88:	615a      	str	r2, [r3, #20]
 810dc8a:	e7be      	b.n	810dc0a <__gethex+0x362>
 810dc8c:	6922      	ldr	r2, [r4, #16]
 810dc8e:	455a      	cmp	r2, fp
 810dc90:	dd0b      	ble.n	810dcaa <__gethex+0x402>
 810dc92:	2101      	movs	r1, #1
 810dc94:	4620      	mov	r0, r4
 810dc96:	f7ff fd9f 	bl	810d7d8 <rshift>
 810dc9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810dc9e:	3701      	adds	r7, #1
 810dca0:	42bb      	cmp	r3, r7
 810dca2:	f6ff aee0 	blt.w	810da66 <__gethex+0x1be>
 810dca6:	2501      	movs	r5, #1
 810dca8:	e7c2      	b.n	810dc30 <__gethex+0x388>
 810dcaa:	f016 061f 	ands.w	r6, r6, #31
 810dcae:	d0fa      	beq.n	810dca6 <__gethex+0x3fe>
 810dcb0:	4453      	add	r3, sl
 810dcb2:	f1c6 0620 	rsb	r6, r6, #32
 810dcb6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810dcba:	f7fd fee3 	bl	810ba84 <__hi0bits>
 810dcbe:	42b0      	cmp	r0, r6
 810dcc0:	dbe7      	blt.n	810dc92 <__gethex+0x3ea>
 810dcc2:	e7f0      	b.n	810dca6 <__gethex+0x3fe>
 810dcc4:	0810eb89 	.word	0x0810eb89

0810dcc8 <L_shift>:
 810dcc8:	f1c2 0208 	rsb	r2, r2, #8
 810dccc:	0092      	lsls	r2, r2, #2
 810dcce:	b570      	push	{r4, r5, r6, lr}
 810dcd0:	f1c2 0620 	rsb	r6, r2, #32
 810dcd4:	6843      	ldr	r3, [r0, #4]
 810dcd6:	6804      	ldr	r4, [r0, #0]
 810dcd8:	fa03 f506 	lsl.w	r5, r3, r6
 810dcdc:	432c      	orrs	r4, r5
 810dcde:	40d3      	lsrs	r3, r2
 810dce0:	6004      	str	r4, [r0, #0]
 810dce2:	f840 3f04 	str.w	r3, [r0, #4]!
 810dce6:	4288      	cmp	r0, r1
 810dce8:	d3f4      	bcc.n	810dcd4 <L_shift+0xc>
 810dcea:	bd70      	pop	{r4, r5, r6, pc}

0810dcec <__match>:
 810dcec:	b530      	push	{r4, r5, lr}
 810dcee:	6803      	ldr	r3, [r0, #0]
 810dcf0:	3301      	adds	r3, #1
 810dcf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 810dcf6:	b914      	cbnz	r4, 810dcfe <__match+0x12>
 810dcf8:	6003      	str	r3, [r0, #0]
 810dcfa:	2001      	movs	r0, #1
 810dcfc:	bd30      	pop	{r4, r5, pc}
 810dcfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 810dd02:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 810dd06:	2d19      	cmp	r5, #25
 810dd08:	bf98      	it	ls
 810dd0a:	3220      	addls	r2, #32
 810dd0c:	42a2      	cmp	r2, r4
 810dd0e:	d0f0      	beq.n	810dcf2 <__match+0x6>
 810dd10:	2000      	movs	r0, #0
 810dd12:	e7f3      	b.n	810dcfc <__match+0x10>

0810dd14 <__hexnan>:
 810dd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dd18:	680b      	ldr	r3, [r1, #0]
 810dd1a:	6801      	ldr	r1, [r0, #0]
 810dd1c:	115e      	asrs	r6, r3, #5
 810dd1e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810dd22:	f013 031f 	ands.w	r3, r3, #31
 810dd26:	b087      	sub	sp, #28
 810dd28:	bf18      	it	ne
 810dd2a:	3604      	addne	r6, #4
 810dd2c:	2500      	movs	r5, #0
 810dd2e:	1f37      	subs	r7, r6, #4
 810dd30:	4682      	mov	sl, r0
 810dd32:	4690      	mov	r8, r2
 810dd34:	9301      	str	r3, [sp, #4]
 810dd36:	f846 5c04 	str.w	r5, [r6, #-4]
 810dd3a:	46b9      	mov	r9, r7
 810dd3c:	463c      	mov	r4, r7
 810dd3e:	9502      	str	r5, [sp, #8]
 810dd40:	46ab      	mov	fp, r5
 810dd42:	784a      	ldrb	r2, [r1, #1]
 810dd44:	1c4b      	adds	r3, r1, #1
 810dd46:	9303      	str	r3, [sp, #12]
 810dd48:	b342      	cbz	r2, 810dd9c <__hexnan+0x88>
 810dd4a:	4610      	mov	r0, r2
 810dd4c:	9105      	str	r1, [sp, #20]
 810dd4e:	9204      	str	r2, [sp, #16]
 810dd50:	f7ff fd94 	bl	810d87c <__hexdig_fun>
 810dd54:	2800      	cmp	r0, #0
 810dd56:	d151      	bne.n	810ddfc <__hexnan+0xe8>
 810dd58:	9a04      	ldr	r2, [sp, #16]
 810dd5a:	9905      	ldr	r1, [sp, #20]
 810dd5c:	2a20      	cmp	r2, #32
 810dd5e:	d818      	bhi.n	810dd92 <__hexnan+0x7e>
 810dd60:	9b02      	ldr	r3, [sp, #8]
 810dd62:	459b      	cmp	fp, r3
 810dd64:	dd13      	ble.n	810dd8e <__hexnan+0x7a>
 810dd66:	454c      	cmp	r4, r9
 810dd68:	d206      	bcs.n	810dd78 <__hexnan+0x64>
 810dd6a:	2d07      	cmp	r5, #7
 810dd6c:	dc04      	bgt.n	810dd78 <__hexnan+0x64>
 810dd6e:	462a      	mov	r2, r5
 810dd70:	4649      	mov	r1, r9
 810dd72:	4620      	mov	r0, r4
 810dd74:	f7ff ffa8 	bl	810dcc8 <L_shift>
 810dd78:	4544      	cmp	r4, r8
 810dd7a:	d952      	bls.n	810de22 <__hexnan+0x10e>
 810dd7c:	2300      	movs	r3, #0
 810dd7e:	f1a4 0904 	sub.w	r9, r4, #4
 810dd82:	f844 3c04 	str.w	r3, [r4, #-4]
 810dd86:	f8cd b008 	str.w	fp, [sp, #8]
 810dd8a:	464c      	mov	r4, r9
 810dd8c:	461d      	mov	r5, r3
 810dd8e:	9903      	ldr	r1, [sp, #12]
 810dd90:	e7d7      	b.n	810dd42 <__hexnan+0x2e>
 810dd92:	2a29      	cmp	r2, #41	@ 0x29
 810dd94:	d157      	bne.n	810de46 <__hexnan+0x132>
 810dd96:	3102      	adds	r1, #2
 810dd98:	f8ca 1000 	str.w	r1, [sl]
 810dd9c:	f1bb 0f00 	cmp.w	fp, #0
 810dda0:	d051      	beq.n	810de46 <__hexnan+0x132>
 810dda2:	454c      	cmp	r4, r9
 810dda4:	d206      	bcs.n	810ddb4 <__hexnan+0xa0>
 810dda6:	2d07      	cmp	r5, #7
 810dda8:	dc04      	bgt.n	810ddb4 <__hexnan+0xa0>
 810ddaa:	462a      	mov	r2, r5
 810ddac:	4649      	mov	r1, r9
 810ddae:	4620      	mov	r0, r4
 810ddb0:	f7ff ff8a 	bl	810dcc8 <L_shift>
 810ddb4:	4544      	cmp	r4, r8
 810ddb6:	d936      	bls.n	810de26 <__hexnan+0x112>
 810ddb8:	f1a8 0204 	sub.w	r2, r8, #4
 810ddbc:	4623      	mov	r3, r4
 810ddbe:	f853 1b04 	ldr.w	r1, [r3], #4
 810ddc2:	f842 1f04 	str.w	r1, [r2, #4]!
 810ddc6:	429f      	cmp	r7, r3
 810ddc8:	d2f9      	bcs.n	810ddbe <__hexnan+0xaa>
 810ddca:	1b3b      	subs	r3, r7, r4
 810ddcc:	f023 0303 	bic.w	r3, r3, #3
 810ddd0:	3304      	adds	r3, #4
 810ddd2:	3401      	adds	r4, #1
 810ddd4:	3e03      	subs	r6, #3
 810ddd6:	42b4      	cmp	r4, r6
 810ddd8:	bf88      	it	hi
 810ddda:	2304      	movhi	r3, #4
 810dddc:	4443      	add	r3, r8
 810ddde:	2200      	movs	r2, #0
 810dde0:	f843 2b04 	str.w	r2, [r3], #4
 810dde4:	429f      	cmp	r7, r3
 810dde6:	d2fb      	bcs.n	810dde0 <__hexnan+0xcc>
 810dde8:	683b      	ldr	r3, [r7, #0]
 810ddea:	b91b      	cbnz	r3, 810ddf4 <__hexnan+0xe0>
 810ddec:	4547      	cmp	r7, r8
 810ddee:	d128      	bne.n	810de42 <__hexnan+0x12e>
 810ddf0:	2301      	movs	r3, #1
 810ddf2:	603b      	str	r3, [r7, #0]
 810ddf4:	2005      	movs	r0, #5
 810ddf6:	b007      	add	sp, #28
 810ddf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ddfc:	3501      	adds	r5, #1
 810ddfe:	2d08      	cmp	r5, #8
 810de00:	f10b 0b01 	add.w	fp, fp, #1
 810de04:	dd06      	ble.n	810de14 <__hexnan+0x100>
 810de06:	4544      	cmp	r4, r8
 810de08:	d9c1      	bls.n	810dd8e <__hexnan+0x7a>
 810de0a:	2300      	movs	r3, #0
 810de0c:	f844 3c04 	str.w	r3, [r4, #-4]
 810de10:	2501      	movs	r5, #1
 810de12:	3c04      	subs	r4, #4
 810de14:	6822      	ldr	r2, [r4, #0]
 810de16:	f000 000f 	and.w	r0, r0, #15
 810de1a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 810de1e:	6020      	str	r0, [r4, #0]
 810de20:	e7b5      	b.n	810dd8e <__hexnan+0x7a>
 810de22:	2508      	movs	r5, #8
 810de24:	e7b3      	b.n	810dd8e <__hexnan+0x7a>
 810de26:	9b01      	ldr	r3, [sp, #4]
 810de28:	2b00      	cmp	r3, #0
 810de2a:	d0dd      	beq.n	810dde8 <__hexnan+0xd4>
 810de2c:	f1c3 0320 	rsb	r3, r3, #32
 810de30:	f04f 32ff 	mov.w	r2, #4294967295
 810de34:	40da      	lsrs	r2, r3
 810de36:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810de3a:	4013      	ands	r3, r2
 810de3c:	f846 3c04 	str.w	r3, [r6, #-4]
 810de40:	e7d2      	b.n	810dde8 <__hexnan+0xd4>
 810de42:	3f04      	subs	r7, #4
 810de44:	e7d0      	b.n	810dde8 <__hexnan+0xd4>
 810de46:	2004      	movs	r0, #4
 810de48:	e7d5      	b.n	810ddf6 <__hexnan+0xe2>

0810de4a <__ascii_mbtowc>:
 810de4a:	b082      	sub	sp, #8
 810de4c:	b901      	cbnz	r1, 810de50 <__ascii_mbtowc+0x6>
 810de4e:	a901      	add	r1, sp, #4
 810de50:	b142      	cbz	r2, 810de64 <__ascii_mbtowc+0x1a>
 810de52:	b14b      	cbz	r3, 810de68 <__ascii_mbtowc+0x1e>
 810de54:	7813      	ldrb	r3, [r2, #0]
 810de56:	600b      	str	r3, [r1, #0]
 810de58:	7812      	ldrb	r2, [r2, #0]
 810de5a:	1e10      	subs	r0, r2, #0
 810de5c:	bf18      	it	ne
 810de5e:	2001      	movne	r0, #1
 810de60:	b002      	add	sp, #8
 810de62:	4770      	bx	lr
 810de64:	4610      	mov	r0, r2
 810de66:	e7fb      	b.n	810de60 <__ascii_mbtowc+0x16>
 810de68:	f06f 0001 	mvn.w	r0, #1
 810de6c:	e7f8      	b.n	810de60 <__ascii_mbtowc+0x16>

0810de6e <_realloc_r>:
 810de6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810de72:	4680      	mov	r8, r0
 810de74:	4615      	mov	r5, r2
 810de76:	460c      	mov	r4, r1
 810de78:	b921      	cbnz	r1, 810de84 <_realloc_r+0x16>
 810de7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810de7e:	4611      	mov	r1, r2
 810de80:	f7fd bc82 	b.w	810b788 <_malloc_r>
 810de84:	b92a      	cbnz	r2, 810de92 <_realloc_r+0x24>
 810de86:	f7fd fc0b 	bl	810b6a0 <_free_r>
 810de8a:	2400      	movs	r4, #0
 810de8c:	4620      	mov	r0, r4
 810de8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810de92:	f000 f827 	bl	810dee4 <_malloc_usable_size_r>
 810de96:	4285      	cmp	r5, r0
 810de98:	4606      	mov	r6, r0
 810de9a:	d802      	bhi.n	810dea2 <_realloc_r+0x34>
 810de9c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 810dea0:	d8f4      	bhi.n	810de8c <_realloc_r+0x1e>
 810dea2:	4629      	mov	r1, r5
 810dea4:	4640      	mov	r0, r8
 810dea6:	f7fd fc6f 	bl	810b788 <_malloc_r>
 810deaa:	4607      	mov	r7, r0
 810deac:	2800      	cmp	r0, #0
 810deae:	d0ec      	beq.n	810de8a <_realloc_r+0x1c>
 810deb0:	42b5      	cmp	r5, r6
 810deb2:	462a      	mov	r2, r5
 810deb4:	4621      	mov	r1, r4
 810deb6:	bf28      	it	cs
 810deb8:	4632      	movcs	r2, r6
 810deba:	f7fc fd78 	bl	810a9ae <memcpy>
 810debe:	4621      	mov	r1, r4
 810dec0:	4640      	mov	r0, r8
 810dec2:	f7fd fbed 	bl	810b6a0 <_free_r>
 810dec6:	463c      	mov	r4, r7
 810dec8:	e7e0      	b.n	810de8c <_realloc_r+0x1e>

0810deca <__ascii_wctomb>:
 810deca:	4603      	mov	r3, r0
 810decc:	4608      	mov	r0, r1
 810dece:	b141      	cbz	r1, 810dee2 <__ascii_wctomb+0x18>
 810ded0:	2aff      	cmp	r2, #255	@ 0xff
 810ded2:	d904      	bls.n	810dede <__ascii_wctomb+0x14>
 810ded4:	228a      	movs	r2, #138	@ 0x8a
 810ded6:	601a      	str	r2, [r3, #0]
 810ded8:	f04f 30ff 	mov.w	r0, #4294967295
 810dedc:	4770      	bx	lr
 810dede:	700a      	strb	r2, [r1, #0]
 810dee0:	2001      	movs	r0, #1
 810dee2:	4770      	bx	lr

0810dee4 <_malloc_usable_size_r>:
 810dee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810dee8:	1f18      	subs	r0, r3, #4
 810deea:	2b00      	cmp	r3, #0
 810deec:	bfbc      	itt	lt
 810deee:	580b      	ldrlt	r3, [r1, r0]
 810def0:	18c0      	addlt	r0, r0, r3
 810def2:	4770      	bx	lr

0810def4 <sqrt>:
 810def4:	b538      	push	{r3, r4, r5, lr}
 810def6:	ed2d 8b02 	vpush	{d8}
 810defa:	ec55 4b10 	vmov	r4, r5, d0
 810defe:	f000 f825 	bl	810df4c <__ieee754_sqrt>
 810df02:	4622      	mov	r2, r4
 810df04:	462b      	mov	r3, r5
 810df06:	4620      	mov	r0, r4
 810df08:	4629      	mov	r1, r5
 810df0a:	eeb0 8a40 	vmov.f32	s16, s0
 810df0e:	eef0 8a60 	vmov.f32	s17, s1
 810df12:	f7f2 fe93 	bl	8100c3c <__aeabi_dcmpun>
 810df16:	b990      	cbnz	r0, 810df3e <sqrt+0x4a>
 810df18:	2200      	movs	r2, #0
 810df1a:	2300      	movs	r3, #0
 810df1c:	4620      	mov	r0, r4
 810df1e:	4629      	mov	r1, r5
 810df20:	f7f2 fe64 	bl	8100bec <__aeabi_dcmplt>
 810df24:	b158      	cbz	r0, 810df3e <sqrt+0x4a>
 810df26:	f7fc fd15 	bl	810a954 <__errno>
 810df2a:	2321      	movs	r3, #33	@ 0x21
 810df2c:	6003      	str	r3, [r0, #0]
 810df2e:	2200      	movs	r2, #0
 810df30:	2300      	movs	r3, #0
 810df32:	4610      	mov	r0, r2
 810df34:	4619      	mov	r1, r3
 810df36:	f7f2 fd11 	bl	810095c <__aeabi_ddiv>
 810df3a:	ec41 0b18 	vmov	d8, r0, r1
 810df3e:	eeb0 0a48 	vmov.f32	s0, s16
 810df42:	eef0 0a68 	vmov.f32	s1, s17
 810df46:	ecbd 8b02 	vpop	{d8}
 810df4a:	bd38      	pop	{r3, r4, r5, pc}

0810df4c <__ieee754_sqrt>:
 810df4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810df50:	4a68      	ldr	r2, [pc, #416]	@ (810e0f4 <__ieee754_sqrt+0x1a8>)
 810df52:	ec55 4b10 	vmov	r4, r5, d0
 810df56:	43aa      	bics	r2, r5
 810df58:	462b      	mov	r3, r5
 810df5a:	4621      	mov	r1, r4
 810df5c:	d110      	bne.n	810df80 <__ieee754_sqrt+0x34>
 810df5e:	4622      	mov	r2, r4
 810df60:	4620      	mov	r0, r4
 810df62:	4629      	mov	r1, r5
 810df64:	f7f2 fbd0 	bl	8100708 <__aeabi_dmul>
 810df68:	4602      	mov	r2, r0
 810df6a:	460b      	mov	r3, r1
 810df6c:	4620      	mov	r0, r4
 810df6e:	4629      	mov	r1, r5
 810df70:	f7f2 fa14 	bl	810039c <__adddf3>
 810df74:	4604      	mov	r4, r0
 810df76:	460d      	mov	r5, r1
 810df78:	ec45 4b10 	vmov	d0, r4, r5
 810df7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810df80:	2d00      	cmp	r5, #0
 810df82:	dc0e      	bgt.n	810dfa2 <__ieee754_sqrt+0x56>
 810df84:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 810df88:	4322      	orrs	r2, r4
 810df8a:	d0f5      	beq.n	810df78 <__ieee754_sqrt+0x2c>
 810df8c:	b19d      	cbz	r5, 810dfb6 <__ieee754_sqrt+0x6a>
 810df8e:	4622      	mov	r2, r4
 810df90:	4620      	mov	r0, r4
 810df92:	4629      	mov	r1, r5
 810df94:	f7f2 fa00 	bl	8100398 <__aeabi_dsub>
 810df98:	4602      	mov	r2, r0
 810df9a:	460b      	mov	r3, r1
 810df9c:	f7f2 fcde 	bl	810095c <__aeabi_ddiv>
 810dfa0:	e7e8      	b.n	810df74 <__ieee754_sqrt+0x28>
 810dfa2:	152a      	asrs	r2, r5, #20
 810dfa4:	d115      	bne.n	810dfd2 <__ieee754_sqrt+0x86>
 810dfa6:	2000      	movs	r0, #0
 810dfa8:	e009      	b.n	810dfbe <__ieee754_sqrt+0x72>
 810dfaa:	0acb      	lsrs	r3, r1, #11
 810dfac:	3a15      	subs	r2, #21
 810dfae:	0549      	lsls	r1, r1, #21
 810dfb0:	2b00      	cmp	r3, #0
 810dfb2:	d0fa      	beq.n	810dfaa <__ieee754_sqrt+0x5e>
 810dfb4:	e7f7      	b.n	810dfa6 <__ieee754_sqrt+0x5a>
 810dfb6:	462a      	mov	r2, r5
 810dfb8:	e7fa      	b.n	810dfb0 <__ieee754_sqrt+0x64>
 810dfba:	005b      	lsls	r3, r3, #1
 810dfbc:	3001      	adds	r0, #1
 810dfbe:	02dc      	lsls	r4, r3, #11
 810dfc0:	d5fb      	bpl.n	810dfba <__ieee754_sqrt+0x6e>
 810dfc2:	1e44      	subs	r4, r0, #1
 810dfc4:	1b12      	subs	r2, r2, r4
 810dfc6:	f1c0 0420 	rsb	r4, r0, #32
 810dfca:	fa21 f404 	lsr.w	r4, r1, r4
 810dfce:	4323      	orrs	r3, r4
 810dfd0:	4081      	lsls	r1, r0
 810dfd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810dfd6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 810dfda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810dfde:	07d2      	lsls	r2, r2, #31
 810dfe0:	bf5c      	itt	pl
 810dfe2:	005b      	lslpl	r3, r3, #1
 810dfe4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 810dfe8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810dfec:	bf58      	it	pl
 810dfee:	0049      	lslpl	r1, r1, #1
 810dff0:	2600      	movs	r6, #0
 810dff2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 810dff6:	106d      	asrs	r5, r5, #1
 810dff8:	0049      	lsls	r1, r1, #1
 810dffa:	2016      	movs	r0, #22
 810dffc:	4632      	mov	r2, r6
 810dffe:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 810e002:	1917      	adds	r7, r2, r4
 810e004:	429f      	cmp	r7, r3
 810e006:	bfde      	ittt	le
 810e008:	193a      	addle	r2, r7, r4
 810e00a:	1bdb      	suble	r3, r3, r7
 810e00c:	1936      	addle	r6, r6, r4
 810e00e:	0fcf      	lsrs	r7, r1, #31
 810e010:	3801      	subs	r0, #1
 810e012:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 810e016:	ea4f 0141 	mov.w	r1, r1, lsl #1
 810e01a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 810e01e:	d1f0      	bne.n	810e002 <__ieee754_sqrt+0xb6>
 810e020:	4604      	mov	r4, r0
 810e022:	2720      	movs	r7, #32
 810e024:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 810e028:	429a      	cmp	r2, r3
 810e02a:	eb00 0e0c 	add.w	lr, r0, ip
 810e02e:	db02      	blt.n	810e036 <__ieee754_sqrt+0xea>
 810e030:	d113      	bne.n	810e05a <__ieee754_sqrt+0x10e>
 810e032:	458e      	cmp	lr, r1
 810e034:	d811      	bhi.n	810e05a <__ieee754_sqrt+0x10e>
 810e036:	f1be 0f00 	cmp.w	lr, #0
 810e03a:	eb0e 000c 	add.w	r0, lr, ip
 810e03e:	da42      	bge.n	810e0c6 <__ieee754_sqrt+0x17a>
 810e040:	2800      	cmp	r0, #0
 810e042:	db40      	blt.n	810e0c6 <__ieee754_sqrt+0x17a>
 810e044:	f102 0801 	add.w	r8, r2, #1
 810e048:	1a9b      	subs	r3, r3, r2
 810e04a:	458e      	cmp	lr, r1
 810e04c:	bf88      	it	hi
 810e04e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 810e052:	eba1 010e 	sub.w	r1, r1, lr
 810e056:	4464      	add	r4, ip
 810e058:	4642      	mov	r2, r8
 810e05a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 810e05e:	3f01      	subs	r7, #1
 810e060:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 810e064:	ea4f 0141 	mov.w	r1, r1, lsl #1
 810e068:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 810e06c:	d1dc      	bne.n	810e028 <__ieee754_sqrt+0xdc>
 810e06e:	4319      	orrs	r1, r3
 810e070:	d01b      	beq.n	810e0aa <__ieee754_sqrt+0x15e>
 810e072:	f8df a084 	ldr.w	sl, [pc, #132]	@ 810e0f8 <__ieee754_sqrt+0x1ac>
 810e076:	f8df b084 	ldr.w	fp, [pc, #132]	@ 810e0fc <__ieee754_sqrt+0x1b0>
 810e07a:	e9da 0100 	ldrd	r0, r1, [sl]
 810e07e:	e9db 2300 	ldrd	r2, r3, [fp]
 810e082:	f7f2 f989 	bl	8100398 <__aeabi_dsub>
 810e086:	e9da 8900 	ldrd	r8, r9, [sl]
 810e08a:	4602      	mov	r2, r0
 810e08c:	460b      	mov	r3, r1
 810e08e:	4640      	mov	r0, r8
 810e090:	4649      	mov	r1, r9
 810e092:	f7f2 fdb5 	bl	8100c00 <__aeabi_dcmple>
 810e096:	b140      	cbz	r0, 810e0aa <__ieee754_sqrt+0x15e>
 810e098:	f1b4 3fff 	cmp.w	r4, #4294967295
 810e09c:	e9da 0100 	ldrd	r0, r1, [sl]
 810e0a0:	e9db 2300 	ldrd	r2, r3, [fp]
 810e0a4:	d111      	bne.n	810e0ca <__ieee754_sqrt+0x17e>
 810e0a6:	3601      	adds	r6, #1
 810e0a8:	463c      	mov	r4, r7
 810e0aa:	1072      	asrs	r2, r6, #1
 810e0ac:	0863      	lsrs	r3, r4, #1
 810e0ae:	07f1      	lsls	r1, r6, #31
 810e0b0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 810e0b4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 810e0b8:	bf48      	it	mi
 810e0ba:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 810e0be:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 810e0c2:	4618      	mov	r0, r3
 810e0c4:	e756      	b.n	810df74 <__ieee754_sqrt+0x28>
 810e0c6:	4690      	mov	r8, r2
 810e0c8:	e7be      	b.n	810e048 <__ieee754_sqrt+0xfc>
 810e0ca:	f7f2 f967 	bl	810039c <__adddf3>
 810e0ce:	e9da 8900 	ldrd	r8, r9, [sl]
 810e0d2:	4602      	mov	r2, r0
 810e0d4:	460b      	mov	r3, r1
 810e0d6:	4640      	mov	r0, r8
 810e0d8:	4649      	mov	r1, r9
 810e0da:	f7f2 fd87 	bl	8100bec <__aeabi_dcmplt>
 810e0de:	b120      	cbz	r0, 810e0ea <__ieee754_sqrt+0x19e>
 810e0e0:	1ca0      	adds	r0, r4, #2
 810e0e2:	bf08      	it	eq
 810e0e4:	3601      	addeq	r6, #1
 810e0e6:	3402      	adds	r4, #2
 810e0e8:	e7df      	b.n	810e0aa <__ieee754_sqrt+0x15e>
 810e0ea:	1c63      	adds	r3, r4, #1
 810e0ec:	f023 0401 	bic.w	r4, r3, #1
 810e0f0:	e7db      	b.n	810e0aa <__ieee754_sqrt+0x15e>
 810e0f2:	bf00      	nop
 810e0f4:	7ff00000 	.word	0x7ff00000
 810e0f8:	100001f0 	.word	0x100001f0
 810e0fc:	100001e8 	.word	0x100001e8

0810e100 <_init>:
 810e100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e102:	bf00      	nop
 810e104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e106:	bc08      	pop	{r3}
 810e108:	469e      	mov	lr, r3
 810e10a:	4770      	bx	lr

0810e10c <_fini>:
 810e10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e10e:	bf00      	nop
 810e110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e112:	bc08      	pop	{r3}
 810e114:	469e      	mov	lr, r3
 810e116:	4770      	bx	lr
